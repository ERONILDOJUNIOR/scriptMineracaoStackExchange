[
    {
        "titulo": "Flutter Test with fixed time without `withClock` closure",
        "score": 4,
        "views": 181,
        "respostas": 3,
        "tags": [
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/79742051/flutter-test-with-fixed-time-without-withclock-closure",
        "conteudo_html": "<p>I have a test structure that doesn't allow for the use of a context manager <code>withClock(..., () {})</code> to set a fixed date time for the unit tests.</p>\n<p>I am looking for a way to do it in a setUp and tear down structure, i.e.</p>\n<pre class=\"lang-dart prettyprint-override\"><code>void main() {\n  setUp(() {\n    dateTimeOverride = withClock(DateTime(2000, 1, 1)).enter();\n  });\n\n  test('Test 1', () {\n    // Test code\n  });\n\n  tearDown(() {\n    dateTimeOverride.exit()\n  )};\n</code></pre>\n",
        "codigo": [
            "withClock(..., () {})",
            "void main() {\n  setUp(() {\n    dateTimeOverride = withClock(DateTime(2000, 1, 1)).enter();\n  });\n\n  test('Test 1', () {\n    // Test code\n  });\n\n  tearDown(() {\n    dateTimeOverride.exit()\n  )};\n"
        ]
    },
    {
        "titulo": "Mocking platform specific packages in flutter test",
        "score": 0,
        "views": 95,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "mqtt"
        ],
        "link": "https://stackoverflow.com/questions/79681934/mocking-platform-specific-packages-in-flutter-test",
        "conteudo_html": "<p>I am trying to test the behavior of a singleton in dart:</p>\n<pre><code>import 'dart:async';\nimport 'package:mqtt_client/mqtt_browser_client.dart';\n\nclass MqttService {\n  static final MqttService _instance = MqttService._internal();\n\n  factory MqttService() =&gt; _instance;\n\n  MqttService._internal();\n\n  final Map&lt;String, MqttBrowserClient&gt; clients = {};\n  final Map&lt;String, StreamController&lt;int&gt;&gt; controllers = {};\n  final Map&lt;String, int&gt; lastKnownAmounts = {};\n}\n</code></pre>\n<p>I've written the following test:</p>\n<pre><code>import 'package:flutter_test/flutter_test.dart';\nimport 'package:common/mqtt_service.dart';\n\nvoid main() {\n  test('Should not create additional instances of MqttService', () {\n    final service1 = MqttService();\n    final service2 = MqttService();\n\n    expect(service1.hashCode, service2.hashCode);\n  });\n}\n</code></pre>\n<p>However, when running it, I get a giant error (I won't paste everything here, it should be reproducible by the example)</p>\n<pre><code>  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/dom/xhr.dart:502:27: Error: 'JSObject' isn't a type.\n  extension type FormData._(JSObject _) implements JSObject {\n                            ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/dom/xhr.dart:518:5: Error: 'JSAny' isn't a type.\n      JSAny blobValueOrValue, [\n      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/dom/xhr.dart:551:5: Error: 'JSAny' isn't a type.\n      JSAny blobValueOrValue, [\n      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/dom/xhr.dart:565:32: Error: 'JSObject' isn't a type.\n  extension type ProgressEvent._(JSObject _) implements Event, JSObject {\n                                 ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/dom/xhr.dart:605:36: Error: 'JSObject' isn't a type.\n  extension type ProgressEventInit._(JSObject _) implements EventInit, JSObject {\n                                     ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/lists.dart:11:44: Error: 'JSObject' isn't a type.\n  extension type _JSList&lt;T extends JSObject&gt;(JSObject _) implements JSObject {\n                                             ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:10:35: Error: 'JSAny' isn't a type.\n  extension type _CrossOriginWindow(JSAny? any) {\n                                    ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:27:5: Error: 'JSAny' isn't a type.\n      JSAny? message, [\n      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:28:5: Error: 'JSAny' isn't a type.\n      JSAny optionsOrTargetOrigin,\n      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:29:13: Error: 'JSObject' isn't a type.\n      JSArray&lt;JSObject&gt; transfer,\n              ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:29:5: Error: 'JSArray' isn't a type.\n      JSArray&lt;JSObject&gt; transfer,\n      ^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:34:37: Error: 'JSAny' isn't a type.\n  extension type _CrossOriginLocation(JSAny? any) {\n                                      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:51:23: Error: 'JSAny' isn't a type.\n    CrossOriginWindow._(JSAny? o) : _window = _CrossOriginWindow(o);\n                        ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:53:37: Error: 'JSAny' isn't a type.\n    static CrossOriginWindow? _create(JSAny? o) {\n                                      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:96:5: Error: 'JSAny' isn't a type.\n      JSAny? message, [\n      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:97:5: Error: 'JSAny' isn't a type.\n      JSAny? optionsOrTargetOrigin,\n      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:98:13: Error: 'JSObject' isn't a type.\n      JSArray&lt;JSObject&gt;? transfer,\n              ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:98:5: Error: 'JSArray' isn't a type.\n      JSArray&lt;JSObject&gt;? transfer,\n      ^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:132:25: Error: 'JSAny' isn't a type.\n    CrossOriginLocation._(JSAny? o) : _location = _CrossOriginLocation(o);\n                          ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:134:39: Error: 'JSAny' isn't a type.\n    static CrossOriginLocation? _create(JSAny? o) {\n                                        ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/providers.dart:615:25: Error: 'JSObject' isn't a type.\n    final jsObject = e as JSObject;\n                          ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/providers.dart:618:47: Error: The getter 'toJS' isn't defined for the class 'String'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n    } else if (jsObject.hasProperty('mozHidden'.toJS).toDart) {\n                                                ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/providers.dart:620:46: Error: The getter 'toJS' isn't defined for the class 'String'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n    } else if (jsObject.hasProperty('msHidden'.toJS).toDart) {\n                                               ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/providers.dart:622:50: Error: The getter 'toJS' isn't defined for the class 'String'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n    } else if (jsObject.hasProperty('webkitHidden'.toJS).toDart) {\n                                                   ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:119:7: Error: A value of type '_EventStream&lt;T&gt;' can't be returned from a function with return type 'Stream&lt;T&gt;' because 'T' is nullable and 'T' isn't.\n   - '_EventStream' is from 'package:web/src/helpers/events/streams.dart' ('../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart').\n   - 'Stream' is from 'dart:async'.\n        this;\n        ^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:165:69: Error: The getter 'toJS' isn't defined for the class 'void Function(Event)'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n              : _wrapZone&lt;html.Event&gt;((e) =&gt; (onData as dynamic)(e))?.toJS {\n                                                                      ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:218:69: Error: The getter 'toJS' isn't defined for the class 'void Function(Event)'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n          : _wrapZone&lt;html.Event&gt;((e) =&gt; (handleData as dynamic)(e))?.toJS;\n                                                                      ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:253:66: Error: The getter 'toJS' isn't defined for the class 'bool'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n        _target!.addEventListener(_eventType, _onData, _useCapture.toJS);\n                                                                   ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:259:69: Error: The getter 'toJS' isn't defined for the class 'bool'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n        _target!.removeEventListener(_eventType, _onData, _useCapture.toJS);\n                                                                      ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:441:38: Error: The argument type 'void Function(T)?' can't be assigned to the parameter type 'void Function(T)?' because 'T' is nullable and 'T' isn't.\n        streamController.stream.listen(onData,\n                                       ^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:441:31: Error: A value of type 'StreamSubscription&lt;T&gt;' can't be returned from a function with return type 'StreamSubscription&lt;T&gt;' because 'T' is nullable and 'T' isn't.\n   - 'StreamSubscription' is from 'dart:async'.\n        streamController.stream.listen(onData,\n                                ^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:448:24: Error: A value of type 'Stream&lt;T&gt;' can't be returned from a function with return type 'Stream&lt;T&gt;' because 'T' is nullable and 'T' isn't.\n   - 'Stream' is from 'dart:async'.\n        streamController.stream;\n                         ^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/extensions.dart:39:69: Error: The getter 'toJS' isn't defined for the class 'num'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n        (quality == null) ? toDataURL(type) : toDataURL(type, quality.toJS);\n                                                                      ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/extensions.dart:55:7: Error: The method 'jsify' isn't defined for the class 'Map&lt;String, bool&gt;'.\n   - 'Map' is from 'dart:core'.\n  Try correcting the name to the name of an existing method, or defining a method named 'jsify'.\n      }.jsify();\n        ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/http.dart:245:33: Error: The argument type 'ProgressEvent' can't be assigned to the parameter type 'Object' because 'ProgressEvent' is nullable and 'Object' isn't.\n   - 'Object' is from 'dart:core'.\n          completer.completeError(e);\n                                  ^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/http.dart:249:34: Error: The argument type 'void Function(Object, [StackTrace?])' can't be assigned to the parameter type 'void Function(ProgressEvent)?' because 'ProgressEvent' is nullable and 'Object' isn't.\n   - 'Object' is from 'dart:core'.\n   - 'StackTrace' is from 'dart:core'.\n      xhr.onError.listen(completer.completeError);\n                                   ^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/http.dart:252:46: Error: The getter 'toJS' isn't defined for the class 'String'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n        xhr.send(sendData is String ? sendData.toJS : sendData.jsify());\n                                               ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/http.dart:252:62: Error: The method 'jsify' isn't defined for the class 'Object'.\n   - 'Object' is from 'dart:core'.\n  Try correcting the name to the name of an existing method, or defining a method named 'jsify'.\n        xhr.send(sendData is String ? sendData.toJS : sendData.jsify());\n                                                           ^^^^^\n</code></pre>\n<p>Digging a little bit, the culprit seems like the MqttBrowserClient class, removing it makes the test run. Apparently, it is because the test is importing a mqtt package specific to the web (my project is web only). How can I force it to import the &quot;correct&quot; library to run tests?</p>\n<p>Example of working test:</p>\n<pre><code>import 'dart:async';\n//import 'package:mqtt_client/mqtt_browser_client.dart';\n\nclass MqttService {\n  static final MqttService _instance = MqttService._internal();\n\n  factory MqttService() =&gt; _instance;\n\n  MqttService._internal();\n\n  //final Map&lt;String, MqttBrowserClient&gt; clients = {};\n  final Map&lt;String, StreamController&lt;int&gt;&gt; controllers = {};\n  final Map&lt;String, int&gt; lastKnownAmounts = {};\n}\n</code></pre>\n",
        "codigo": [
            "import 'dart:async';\nimport 'package:mqtt_client/mqtt_browser_client.dart';\n\nclass MqttService {\n  static final MqttService _instance = MqttService._internal();\n\n  factory MqttService() => _instance;\n\n  MqttService._internal();\n\n  final Map<String, MqttBrowserClient> clients = {};\n  final Map<String, StreamController<int>> controllers = {};\n  final Map<String, int> lastKnownAmounts = {};\n}\n",
            "import 'package:flutter_test/flutter_test.dart';\nimport 'package:common/mqtt_service.dart';\n\nvoid main() {\n  test('Should not create additional instances of MqttService', () {\n    final service1 = MqttService();\n    final service2 = MqttService();\n\n    expect(service1.hashCode, service2.hashCode);\n  });\n}\n",
            "  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/dom/xhr.dart:502:27: Error: 'JSObject' isn't a type.\n  extension type FormData._(JSObject _) implements JSObject {\n                            ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/dom/xhr.dart:518:5: Error: 'JSAny' isn't a type.\n      JSAny blobValueOrValue, [\n      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/dom/xhr.dart:551:5: Error: 'JSAny' isn't a type.\n      JSAny blobValueOrValue, [\n      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/dom/xhr.dart:565:32: Error: 'JSObject' isn't a type.\n  extension type ProgressEvent._(JSObject _) implements Event, JSObject {\n                                 ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/dom/xhr.dart:605:36: Error: 'JSObject' isn't a type.\n  extension type ProgressEventInit._(JSObject _) implements EventInit, JSObject {\n                                     ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/lists.dart:11:44: Error: 'JSObject' isn't a type.\n  extension type _JSList<T extends JSObject>(JSObject _) implements JSObject {\n                                             ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:10:35: Error: 'JSAny' isn't a type.\n  extension type _CrossOriginWindow(JSAny? any) {\n                                    ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:27:5: Error: 'JSAny' isn't a type.\n      JSAny? message, [\n      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:28:5: Error: 'JSAny' isn't a type.\n      JSAny optionsOrTargetOrigin,\n      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:29:13: Error: 'JSObject' isn't a type.\n      JSArray<JSObject> transfer,\n              ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:29:5: Error: 'JSArray' isn't a type.\n      JSArray<JSObject> transfer,\n      ^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:34:37: Error: 'JSAny' isn't a type.\n  extension type _CrossOriginLocation(JSAny? any) {\n                                      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:51:23: Error: 'JSAny' isn't a type.\n    CrossOriginWindow._(JSAny? o) : _window = _CrossOriginWindow(o);\n                        ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:53:37: Error: 'JSAny' isn't a type.\n    static CrossOriginWindow? _create(JSAny? o) {\n                                      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:96:5: Error: 'JSAny' isn't a type.\n      JSAny? message, [\n      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:97:5: Error: 'JSAny' isn't a type.\n      JSAny? optionsOrTargetOrigin,\n      ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:98:13: Error: 'JSObject' isn't a type.\n      JSArray<JSObject>? transfer,\n              ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:98:5: Error: 'JSArray' isn't a type.\n      JSArray<JSObject>? transfer,\n      ^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:132:25: Error: 'JSAny' isn't a type.\n    CrossOriginLocation._(JSAny? o) : _location = _CrossOriginLocation(o);\n                          ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/cross_origin.dart:134:39: Error: 'JSAny' isn't a type.\n    static CrossOriginLocation? _create(JSAny? o) {\n                                        ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/providers.dart:615:25: Error: 'JSObject' isn't a type.\n    final jsObject = e as JSObject;\n                          ^^^^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/providers.dart:618:47: Error: The getter 'toJS' isn't defined for the class 'String'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n    } else if (jsObject.hasProperty('mozHidden'.toJS).toDart) {\n                                                ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/providers.dart:620:46: Error: The getter 'toJS' isn't defined for the class 'String'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n    } else if (jsObject.hasProperty('msHidden'.toJS).toDart) {\n                                               ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/providers.dart:622:50: Error: The getter 'toJS' isn't defined for the class 'String'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n    } else if (jsObject.hasProperty('webkitHidden'.toJS).toDart) {\n                                                   ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:119:7: Error: A value of type '_EventStream<T>' can't be returned from a function with return type 'Stream<T>' because 'T' is nullable and 'T' isn't.\n   - '_EventStream' is from 'package:web/src/helpers/events/streams.dart' ('../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart').\n   - 'Stream' is from 'dart:async'.\n        this;\n        ^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:165:69: Error: The getter 'toJS' isn't defined for the class 'void Function(Event)'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n              : _wrapZone<html.Event>((e) => (onData as dynamic)(e))?.toJS {\n                                                                      ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:218:69: Error: The getter 'toJS' isn't defined for the class 'void Function(Event)'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n          : _wrapZone<html.Event>((e) => (handleData as dynamic)(e))?.toJS;\n                                                                      ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:253:66: Error: The getter 'toJS' isn't defined for the class 'bool'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n        _target!.addEventListener(_eventType, _onData, _useCapture.toJS);\n                                                                   ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:259:69: Error: The getter 'toJS' isn't defined for the class 'bool'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n        _target!.removeEventListener(_eventType, _onData, _useCapture.toJS);\n                                                                      ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:441:38: Error: The argument type 'void Function(T)?' can't be assigned to the parameter type 'void Function(T)?' because 'T' is nullable and 'T' isn't.\n        streamController.stream.listen(onData,\n                                       ^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:441:31: Error: A value of type 'StreamSubscription<T>' can't be returned from a function with return type 'StreamSubscription<T>' because 'T' is nullable and 'T' isn't.\n   - 'StreamSubscription' is from 'dart:async'.\n        streamController.stream.listen(onData,\n                                ^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/events/streams.dart:448:24: Error: A value of type 'Stream<T>' can't be returned from a function with return type 'Stream<T>' because 'T' is nullable and 'T' isn't.\n   - 'Stream' is from 'dart:async'.\n        streamController.stream;\n                         ^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/extensions.dart:39:69: Error: The getter 'toJS' isn't defined for the class 'num'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n        (quality == null) ? toDataURL(type) : toDataURL(type, quality.toJS);\n                                                                      ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/extensions.dart:55:7: Error: The method 'jsify' isn't defined for the class 'Map<String, bool>'.\n   - 'Map' is from 'dart:core'.\n  Try correcting the name to the name of an existing method, or defining a method named 'jsify'.\n      }.jsify();\n        ^^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/http.dart:245:33: Error: The argument type 'ProgressEvent' can't be assigned to the parameter type 'Object' because 'ProgressEvent' is nullable and 'Object' isn't.\n   - 'Object' is from 'dart:core'.\n          completer.completeError(e);\n                                  ^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/http.dart:249:34: Error: The argument type 'void Function(Object, [StackTrace?])' can't be assigned to the parameter type 'void Function(ProgressEvent)?' because 'ProgressEvent' is nullable and 'Object' isn't.\n   - 'Object' is from 'dart:core'.\n   - 'StackTrace' is from 'dart:core'.\n      xhr.onError.listen(completer.completeError);\n                                   ^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/http.dart:252:46: Error: The getter 'toJS' isn't defined for the class 'String'.\n  Try correcting the name to the name of an existing getter, or defining a getter or field named 'toJS'.\n        xhr.send(sendData is String ? sendData.toJS : sendData.jsify());\n                                               ^^^^\n  ../../.pub-cache/hosted/pub.dev/web-1.1.1/lib/src/helpers/http.dart:252:62: Error: The method 'jsify' isn't defined for the class 'Object'.\n   - 'Object' is from 'dart:core'.\n  Try correcting the name to the name of an existing method, or defining a method named 'jsify'.\n        xhr.send(sendData is String ? sendData.toJS : sendData.jsify());\n                                                           ^^^^^\n",
            "import 'dart:async';\n//import 'package:mqtt_client/mqtt_browser_client.dart';\n\nclass MqttService {\n  static final MqttService _instance = MqttService._internal();\n\n  factory MqttService() => _instance;\n\n  MqttService._internal();\n\n  //final Map<String, MqttBrowserClient> clients = {};\n  final Map<String, StreamController<int>> controllers = {};\n  final Map<String, int> lastKnownAmounts = {};\n}\n"
        ]
    },
    {
        "titulo": "How to test both assert() and the return value as if running in production",
        "score": 0,
        "views": 41,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "unit-testing",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/79619092/how-to-test-both-assert-and-the-return-value-as-if-running-in-production",
        "conteudo_html": "<p>Given a function that has some cases that should never happen (<code>assert</code>), but should still handle them gracefully, like:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>int? foo(int value) {\n  if (value &lt; 0) {\n    assert(false); // throws AssertionError in debug\n    return null;   // returns null in production\n  }\n  if (value &gt; 5) {\n    return null;   // null is returned in some non-error cases\n  }\n  return value;\n}\n</code></pre>\n<p>How can i test both the <code>AssertionError</code>, and that <code>null</code> would be returned in production?</p>\n<p>I know i can do the following for the <code>AssertionError</code> part:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>expect(()=&gt; foo(-1), throwsA(isA&lt;AssertionError&gt;()))\n</code></pre>\n<hr />\n<p>For context, think of a function that maps some values coming from an API.\nOld clients should not break on new values (hence null) but we should still notice missing mappings easily during development (hence assert).</p>\n",
        "codigo": [
            "assert",
            "int? foo(int value) {\n  if (value < 0) {\n    assert(false); // throws AssertionError in debug\n    return null;   // returns null in production\n  }\n  if (value > 5) {\n    return null;   // null is returned in some non-error cases\n  }\n  return value;\n}\n",
            "AssertionError",
            "null",
            "AssertionError",
            "expect(()=> foo(-1), throwsA(isA<AssertionError>()))\n"
        ]
    },
    {
        "titulo": "Unable to intialize Firebase in a Flutter integration test",
        "score": 2,
        "views": 141,
        "respostas": 2,
        "tags": [
            "flutter",
            "firebase",
            "dart",
            "testing",
            "google-cloud-firestore"
        ],
        "link": "https://stackoverflow.com/questions/79545229/unable-to-intialize-firebase-in-a-flutter-integration-test",
        "conteudo_html": "<p>I have a Flutter library project (not an app).</p>\n<p>I am trying to write some integration tests that connect to Firebase (firestore and auth).</p>\n<p>When I try to do so I get a platform exception and I am not sure why.</p>\n<p>My code is as follows...</p>\n<pre><code>import 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\n// Adjust the import below to point to your app's main file\n\nvoid main() {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  setUpAll(() async {\n    await Firebase.initializeApp(\n      options: const FirebaseOptions(\n          apiKey: &quot;myapikey&quot;,\n          projectId: &quot;projectid&quot;,\n          storageBucket: &quot;storagebuck&quot;,\n          messagingSenderId: &quot;someid&quot;,\n          appId: &quot;appid&quot;),\n    );\n    FirebaseFirestore.instance.useFirestoreEmulator('localhost', 8080);\n    await FirebaseAuth.instance.useAuthEmulator('localhost', 9099);\n  });\n\n  test('Firebase Firestore emulator connection test', () async {\n      await FirebaseFirestore.instance.collection(&quot;col1&quot;).doc('doc1').set({\n        'field1': 'value1',\n        'field2': 'value2',\n      });\n      print(&quot;complete&quot;);\n  });\n}\n</code></pre>\n<p>When I run this test, I get the following error...</p>\n<blockquote>\n<p>PlatformException(channel-error, Unable to establish connection on\nchannel., null, null)\npackage:firebase_core_platform_interface/src/pigeon/messages.pigeon.dart\n210:7  FirebaseCoreHostApi.initializeCore</p>\n</blockquote>\n",
        "codigo": [
            "import 'package:firebase_auth/firebase_auth.dart';\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:firebase_core/firebase_core.dart';\nimport 'package:cloud_firestore/cloud_firestore.dart';\n// Adjust the import below to point to your app's main file\n\nvoid main() {\n  WidgetsFlutterBinding.ensureInitialized();\n\n  setUpAll(() async {\n    await Firebase.initializeApp(\n      options: const FirebaseOptions(\n          apiKey: \"myapikey\",\n          projectId: \"projectid\",\n          storageBucket: \"storagebuck\",\n          messagingSenderId: \"someid\",\n          appId: \"appid\"),\n    );\n    FirebaseFirestore.instance.useFirestoreEmulator('localhost', 8080);\n    await FirebaseAuth.instance.useAuthEmulator('localhost', 9099);\n  });\n\n  test('Firebase Firestore emulator connection test', () async {\n      await FirebaseFirestore.instance.collection(\"col1\").doc('doc1').set({\n        'field1': 'value1',\n        'field2': 'value2',\n      });\n      print(\"complete\");\n  });\n}\n"
        ]
    },
    {
        "titulo": "How to get the visible/rendered value of a Text-widget while Testing?",
        "score": 0,
        "views": 39,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "flutter-text"
        ],
        "link": "https://stackoverflow.com/questions/79454820/how-to-get-the-visible-rendered-value-of-a-text-widget-while-testing",
        "conteudo_html": "<p>I have kind of an responsive Text-widget which uses as much space as possible, but truncates overflowing Texts.</p>\n<p>To get stable and reliable code-base I want to have an test. which verifies that truncation works. I thought about something like the following example, but as <code>text</code> i get the passed-in content, not the visible (truncated) one.</p>\n<pre><code>@override\nFuture&lt;void&gt; test() async {\n    expect($(MultiLineText), findsOneWidget, reason: 'Cannot find main [MultiLineText] widget');\n\n    String? textContent = $(MultiLineText).$(Text).first.text;\n\n    expect(textContent?.contains('...'), true, reason: 'Cannot find ... ellipsis in too long content.');\n}\n</code></pre>\n<p>Is there a way to get the visible content of a Text widget while Testing?</p>\n",
        "codigo": [
            "text",
            "@override\nFuture<void> test() async {\n    expect($(MultiLineText), findsOneWidget, reason: 'Cannot find main [MultiLineText] widget');\n\n    String? textContent = $(MultiLineText).$(Text).first.text;\n\n    expect(textContent?.contains('...'), true, reason: 'Cannot find ... ellipsis in too long content.');\n}\n"
        ]
    },
    {
        "titulo": "LateInitializationError: Field &#39;_prefs@29023595&#39; has not been initialized in flutter testing",
        "score": 1,
        "views": 30,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "sharedpreferences",
            "provider"
        ],
        "link": "https://stackoverflow.com/questions/79180792/lateinitializationerror-field-prefs29023595-has-not-been-initialized-in-flu",
        "conteudo_html": "<pre><code>void main() async {\n\n  WidgetsFlutterBinding.ensureInitialized();\n  await SharedPreferenceHelper.initPreference();\n  runApp(\n    MultiProvider(\n      providers: [\n        ChangeNotifierProvider(create: (_) =&gt; ThemeProvider(),),\n        ChangeNotifierProvider(create: (_) =&gt; ApiProvider(),),\n      ],\n      child: const MyApp()\n    )\n  );\n  \n}\n</code></pre>\n<p>This is my main.dart file I used two Providers for Theme of the app and API calling.I used SharedPreference as Singleton class to avoid multiple instance creation.</p>\n<pre><code>class SharedPreferenceHelper {\n  static late SharedPreferences _prefs;\n\n  static Future&lt;void&gt; initPreference() async {\n    _prefs = await SharedPreferences.getInstance();\n  }\n\n  static SharedPreferences getInstance() =&gt; _prefs;\n}\n</code></pre>\n<p>But I have an issue while I testing it this is my testing code and assume in the sign in screen with textfield that only accept 10 numbers as input (only number).</p>\n<pre><code>  testWidgets(&quot;Validate Signin field with different input&quot;, (WidgetTester tester) async {\n    \n\n    // tester.view.devicePixelRatio = 1.0;\n     await tester.pumpWidget(\n      MultiProvider(\n        providers: [\n            ChangeNotifierProvider(create: (_) =&gt; ThemeProvider()),\n            ChangeNotifierProvider(create: (_) =&gt; ApiProvider()),\n          ],\n        child: const MaterialApp(\n          home: SigninScreen(),\n         )\n        )\n      );\n      // print(&quot;Before entering text&quot;);\n    // Enter invalid text \n    await tester.enterText(find.byKey(const Key(&quot;mobile_field&quot;)), &quot;123343&quot;);\n      // print(&quot;After entering text&quot;);\n    // Press the button\n    await tester.tap(find.byType(ButtonWidget));\n    await tester.pumpAndSettle();\n\n    expect(find.text(&quot;Enter a valid user ID&quot;), findsOneWidget);\n\n    // Clear the text field\n    await tester.enterText(find.byKey(const Key(&quot;mobile_field&quot;)), &quot;&quot;);\n    await tester.pump();\n\n    // Check with the empty String\n    await tester.enterText(find.byKey(const Key(&quot;mobile_field&quot;)), &quot;&quot;);\n    await tester.tap(find.byType(ButtonWidget));\n    await tester.pump();\n\n    expect(find.text(&quot;User ID is required&quot;), findsOneWidget);\n    \n    // Clear the text field\n    await tester.enterText(find.byKey(const Key(&quot;mobile_field&quot;)), &quot;&quot;);\n    await tester.pump();\n\n    await tester.enterText(find.byKey(const Key(&quot;mobile_field&quot;)), &quot;9876543210&quot;);\n    await tester.tap(find.byType(ButtonWidget));\n    await tester.pump();\n\n    expect(find.byKey(const Key(&quot;home_screen&quot;)), findsOneWidget);\n\n  });\n\n</code></pre>\n<p>but it shows this error from my API Provider</p>\n<pre><code>class ApiProvider extends ChangeNotifier{\n  // instance of shared preference\n  final SharedPreferences _prefs = SharedPreferenceHelper.getInstance();\n}\n\nThe following LateError was thrown building Consumer&lt;ApiProvider&gt;(dirty, dependencies:\n[_InheritedProviderScope&lt;ApiProvider?&gt;]):\nLateInitializationError: Field '_prefs@29023595' has not been initialized.\n\nThe relevant error-causing widget was:\n  Consumer&lt;ApiProvider&gt; Consumer:file:///D:/Projects/kitafeedback/lib/screens/home_screen.dart:43:13\n\nWhen the exception was thrown, this was the stack:\n#0      SharedPreferenceHelper._prefs (package:kitafeedback/common/shared_preference_helper.dart)\n#1      SharedPreferenceHelper.getInstance (package:kitafeedback/common/shared_preference_helper.dart:10:45)\n#2      new ApiProvider (package:kitafeedback/API/api_provider.dart:18:59)\n</code></pre>\n",
        "codigo": [
            "void main() async {\n\n  WidgetsFlutterBinding.ensureInitialized();\n  await SharedPreferenceHelper.initPreference();\n  runApp(\n    MultiProvider(\n      providers: [\n        ChangeNotifierProvider(create: (_) => ThemeProvider(),),\n        ChangeNotifierProvider(create: (_) => ApiProvider(),),\n      ],\n      child: const MyApp()\n    )\n  );\n  \n}\n",
            "class SharedPreferenceHelper {\n  static late SharedPreferences _prefs;\n\n  static Future<void> initPreference() async {\n    _prefs = await SharedPreferences.getInstance();\n  }\n\n  static SharedPreferences getInstance() => _prefs;\n}\n",
            "  testWidgets(\"Validate Signin field with different input\", (WidgetTester tester) async {\n    \n\n    // tester.view.devicePixelRatio = 1.0;\n     await tester.pumpWidget(\n      MultiProvider(\n        providers: [\n            ChangeNotifierProvider(create: (_) => ThemeProvider()),\n            ChangeNotifierProvider(create: (_) => ApiProvider()),\n          ],\n        child: const MaterialApp(\n          home: SigninScreen(),\n         )\n        )\n      );\n      // print(\"Before entering text\");\n    // Enter invalid text \n    await tester.enterText(find.byKey(const Key(\"mobile_field\")), \"123343\");\n      // print(\"After entering text\");\n    // Press the button\n    await tester.tap(find.byType(ButtonWidget));\n    await tester.pumpAndSettle();\n\n    expect(find.text(\"Enter a valid user ID\"), findsOneWidget);\n\n    // Clear the text field\n    await tester.enterText(find.byKey(const Key(\"mobile_field\")), \"\");\n    await tester.pump();\n\n    // Check with the empty String\n    await tester.enterText(find.byKey(const Key(\"mobile_field\")), \"\");\n    await tester.tap(find.byType(ButtonWidget));\n    await tester.pump();\n\n    expect(find.text(\"User ID is required\"), findsOneWidget);\n    \n    // Clear the text field\n    await tester.enterText(find.byKey(const Key(\"mobile_field\")), \"\");\n    await tester.pump();\n\n    await tester.enterText(find.byKey(const Key(\"mobile_field\")), \"9876543210\");\n    await tester.tap(find.byType(ButtonWidget));\n    await tester.pump();\n\n    expect(find.byKey(const Key(\"home_screen\")), findsOneWidget);\n\n  });\n\n",
            "class ApiProvider extends ChangeNotifier{\n  // instance of shared preference\n  final SharedPreferences _prefs = SharedPreferenceHelper.getInstance();\n}\n\nThe following LateError was thrown building Consumer<ApiProvider>(dirty, dependencies:\n[_InheritedProviderScope<ApiProvider?>]):\nLateInitializationError: Field '_prefs@29023595' has not been initialized.\n\nThe relevant error-causing widget was:\n  Consumer<ApiProvider> Consumer:file:///D:/Projects/kitafeedback/lib/screens/home_screen.dart:43:13\n\nWhen the exception was thrown, this was the stack:\n#0      SharedPreferenceHelper._prefs (package:kitafeedback/common/shared_preference_helper.dart)\n#1      SharedPreferenceHelper.getInstance (package:kitafeedback/common/shared_preference_helper.dart:10:45)\n#2      new ApiProvider (package:kitafeedback/API/api_provider.dart:18:59)\n"
        ]
    },
    {
        "titulo": "Execution order confusion in Flutter tests: Future&lt;void&gt; runs before test groups",
        "score": 0,
        "views": 47,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "unit-testing",
            "testing",
            "automated-tests"
        ],
        "link": "https://stackoverflow.com/questions/78971977/execution-order-confusion-in-flutter-tests-futurevoid-runs-before-test-groups",
        "conteudo_html": "<p>I have a test folder in my flitter project which contains the following :</p>\n<pre><code>group ('beneficiary methods tests', () {\n\ntest('insert beneficiary test',()async{…}\n\ntest('update beneficiary test',()async{…}\n\ntest('get beneficiary test',()async{…}\n\n});\n\nawait deleteDatabase('testingDB');\n</code></pre>\n<p>What I’m expecting is to run the code line by line , meaning that the deletion of the database will be after each test’s execution , however this is not happening the tests depend’s on the database and they’re failing with the following error</p>\n<pre><code>SafLiteFfiException(error,\nBad state: This database\nhas already been closed})\n</code></pre>\n<p>Moving the <strong>await</strong> <strong>deleteDatabase('testingDB');</strong> above the group solved the error but I still want to understand the reason of this behavior</p>\n",
        "codigo": [
            "group ('beneficiary methods tests', () {\n\ntest('insert beneficiary test',()async{…}\n\ntest('update beneficiary test',()async{…}\n\ntest('get beneficiary test',()async{…}\n\n});\n\nawait deleteDatabase('testingDB');\n",
            "SafLiteFfiException(error,\nBad state: This database\nhas already been closed})\n"
        ]
    },
    {
        "titulo": "Running my google fonts using widget test separately works, but fails when ran together",
        "score": 1,
        "views": 151,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "google-fonts"
        ],
        "link": "https://stackoverflow.com/questions/78814319/running-my-google-fonts-using-widget-test-separately-works-but-fails-when-ran-t",
        "conteudo_html": "<p>I have the following tests. They both pass if I run them separately. But if I run the together at once the second test fails because isEnabled == true. Upon further inspection it looks like it never gets to the line where isEnabled is set to true because it seems to keep hanging on <code>await GoogleFonts.pendingFonts();</code> in the onEdit. But the test does end. Why is this happening and what can I do to fix it?</p>\n<pre><code>// Flutter imports:\nimport 'package:flutter/material.dart';\n\n// Package imports:\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:google_fonts/google_fonts.dart';\n\nvoid main() {\n  setUpAll(() async {\n    GoogleFonts.config.allowRuntimeFetching = false;\n  });\n\n  testWidgets('should load', (WidgetTester tester) async {\n    //Act\n    await tester.pumpWidget(\n      MaterialApp(\n        home: SpecialTextWidget(\n          shouldEdit: false,\n        ),\n      ),\n    );\n\n    //Assert\n    final textWidgetFinder = find.byType(SpecialTextWidget);\n    final loadedState = tester.state(textWidgetFinder) as SpecialTextWidgetState;\n    expect(textWidgetFinder, findsOneWidget);\n    expect(loadedState.isEnabled, true);\n  });\n\n  testWidgets('should handle edits', (WidgetTester tester) async {\n    //Act\n    await tester.pumpWidget(\n      MaterialApp(\n        home: SpecialTextWidget(\n          shouldEdit: true,\n        ),\n      ),\n    );\n    await tester.pump();\n\n    //Assert\n    final textWidgetFinder = find.byType(SpecialTextWidget);\n    final editedState = tester.state(textWidgetFinder) as SpecialTextWidgetState;\n    expect(textWidgetFinder, findsOneWidget);\n    expect(editedState.isEnabled, false);\n  });\n}\n\nclass SpecialTextWidget extends StatefulWidget {\n  final bool _shouldEdit;\n\n  const SpecialTextWidget({\n    super.key,\n    bool shouldEdit = false,\n  }) : _shouldEdit = shouldEdit;\n\n  @override\n  State&lt;SpecialTextWidget&gt; createState() =&gt; SpecialTextWidgetState();\n}\n\nclass SpecialTextWidgetState extends State&lt;SpecialTextWidget&gt; {\n  late bool _isInitialized;\n  late bool _isEnabled;\n  String? _data;\n  TextStyle? _style;\n\n  @visibleForTesting\n  bool get isEnabled =&gt; _isEnabled;\n\n  @override\n  void initState() {\n    _isInitialized = false;\n    _isEnabled = false;\n    super.initState();\n  }\n\n  @override\n  void didChangeDependencies() {\n    if (!_isInitialized) {\n      initialize();\n      _isInitialized = true;\n    }\n    super.didChangeDependencies();\n  }\n\n  Future&lt;void&gt; initialize() async {\n    await onLoad(\n      fontFamily: 'Roboto',\n      fontSize: 14.0,\n      fontWeight: FontWeight.normal,\n      fontStyle: FontStyle.normal,\n      color: Colors.black,\n      isEnabled: true,\n      data: 'Hello',\n    );\n    if (widget._shouldEdit) {\n      await onEdit(\n        fontFamily: 'Open Sans',\n        fontSize: 16.0,\n        fontWeight: FontWeight.bold,\n        fontStyle: FontStyle.italic,\n        color: Colors.white,\n        isEnabled: false,\n        data: 'Hello World',\n      );\n    }\n  }\n\n  Future&lt;void&gt; onLoad({\n    required String fontFamily,\n    required double fontSize,\n    required FontWeight fontWeight,\n    required FontStyle fontStyle,\n    required Color color,\n    required bool isEnabled,\n    required String data,\n  }) async {\n    final textStyle = GoogleFonts.getFont(\n      fontFamily,\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      fontStyle: fontStyle,\n      color: color,\n    );\n    await GoogleFonts.pendingFonts();\n    setState(() {\n      _isEnabled = isEnabled;\n      _data = data;\n      _style = textStyle;\n    });\n  }\n\n  Future&lt;void&gt; onEdit({\n    required String fontFamily,\n    required double fontSize,\n    required FontWeight fontWeight,\n    required FontStyle fontStyle,\n    required Color color,\n    required bool isEnabled,\n    required String data,\n  }) async {\n    var updatedStyle = _style;\n    updatedStyle = GoogleFonts.getFont(\n      fontFamily,\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      fontStyle: fontStyle,\n      color: color,\n    );\n    await GoogleFonts.pendingFonts();\n    setState(() {\n      _isEnabled = isEnabled;\n      _data = data;\n      _style = updatedStyle;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (!_isEnabled) {\n      return SizedBox.shrink();\n    }\n\n    return Text(\n      _data!,\n      style: _style,\n    );\n  }\n}\n</code></pre>\n",
        "codigo": [
            "await GoogleFonts.pendingFonts();",
            "// Flutter imports:\nimport 'package:flutter/material.dart';\n\n// Package imports:\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:google_fonts/google_fonts.dart';\n\nvoid main() {\n  setUpAll(() async {\n    GoogleFonts.config.allowRuntimeFetching = false;\n  });\n\n  testWidgets('should load', (WidgetTester tester) async {\n    //Act\n    await tester.pumpWidget(\n      MaterialApp(\n        home: SpecialTextWidget(\n          shouldEdit: false,\n        ),\n      ),\n    );\n\n    //Assert\n    final textWidgetFinder = find.byType(SpecialTextWidget);\n    final loadedState = tester.state(textWidgetFinder) as SpecialTextWidgetState;\n    expect(textWidgetFinder, findsOneWidget);\n    expect(loadedState.isEnabled, true);\n  });\n\n  testWidgets('should handle edits', (WidgetTester tester) async {\n    //Act\n    await tester.pumpWidget(\n      MaterialApp(\n        home: SpecialTextWidget(\n          shouldEdit: true,\n        ),\n      ),\n    );\n    await tester.pump();\n\n    //Assert\n    final textWidgetFinder = find.byType(SpecialTextWidget);\n    final editedState = tester.state(textWidgetFinder) as SpecialTextWidgetState;\n    expect(textWidgetFinder, findsOneWidget);\n    expect(editedState.isEnabled, false);\n  });\n}\n\nclass SpecialTextWidget extends StatefulWidget {\n  final bool _shouldEdit;\n\n  const SpecialTextWidget({\n    super.key,\n    bool shouldEdit = false,\n  }) : _shouldEdit = shouldEdit;\n\n  @override\n  State<SpecialTextWidget> createState() => SpecialTextWidgetState();\n}\n\nclass SpecialTextWidgetState extends State<SpecialTextWidget> {\n  late bool _isInitialized;\n  late bool _isEnabled;\n  String? _data;\n  TextStyle? _style;\n\n  @visibleForTesting\n  bool get isEnabled => _isEnabled;\n\n  @override\n  void initState() {\n    _isInitialized = false;\n    _isEnabled = false;\n    super.initState();\n  }\n\n  @override\n  void didChangeDependencies() {\n    if (!_isInitialized) {\n      initialize();\n      _isInitialized = true;\n    }\n    super.didChangeDependencies();\n  }\n\n  Future<void> initialize() async {\n    await onLoad(\n      fontFamily: 'Roboto',\n      fontSize: 14.0,\n      fontWeight: FontWeight.normal,\n      fontStyle: FontStyle.normal,\n      color: Colors.black,\n      isEnabled: true,\n      data: 'Hello',\n    );\n    if (widget._shouldEdit) {\n      await onEdit(\n        fontFamily: 'Open Sans',\n        fontSize: 16.0,\n        fontWeight: FontWeight.bold,\n        fontStyle: FontStyle.italic,\n        color: Colors.white,\n        isEnabled: false,\n        data: 'Hello World',\n      );\n    }\n  }\n\n  Future<void> onLoad({\n    required String fontFamily,\n    required double fontSize,\n    required FontWeight fontWeight,\n    required FontStyle fontStyle,\n    required Color color,\n    required bool isEnabled,\n    required String data,\n  }) async {\n    final textStyle = GoogleFonts.getFont(\n      fontFamily,\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      fontStyle: fontStyle,\n      color: color,\n    );\n    await GoogleFonts.pendingFonts();\n    setState(() {\n      _isEnabled = isEnabled;\n      _data = data;\n      _style = textStyle;\n    });\n  }\n\n  Future<void> onEdit({\n    required String fontFamily,\n    required double fontSize,\n    required FontWeight fontWeight,\n    required FontStyle fontStyle,\n    required Color color,\n    required bool isEnabled,\n    required String data,\n  }) async {\n    var updatedStyle = _style;\n    updatedStyle = GoogleFonts.getFont(\n      fontFamily,\n      fontSize: fontSize,\n      fontWeight: fontWeight,\n      fontStyle: fontStyle,\n      color: color,\n    );\n    await GoogleFonts.pendingFonts();\n    setState(() {\n      _isEnabled = isEnabled;\n      _data = data;\n      _style = updatedStyle;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    if (!_isEnabled) {\n      return SizedBox.shrink();\n    }\n\n    return Text(\n      _data!,\n      style: _style,\n    );\n  }\n}\n"
        ]
    },
    {
        "titulo": "Test that a Dart stream does not emit anything, without listening to it",
        "score": 0,
        "views": 171,
        "respostas": 0,
        "tags": [
            "dart",
            "unit-testing",
            "testing",
            "stream"
        ],
        "link": "https://stackoverflow.com/questions/78507458/test-that-a-dart-stream-does-not-emit-anything-without-listening-to-it",
        "conteudo_html": "<p>I am currently working on a Flutter app, but my question is solely related to Dart. I need to implement a repository which exposes an outbound stream of data. This repository's responsibility is to call the backend, transform the data, and emit the data in the outbound stream (note, this stream is actually a BehaviorSubject, because of the way to integrate this repository in the application overall architecture).</p>\n<p>The repository needs to call the backend if and only if:</p>\n<ul>\n<li>the user is logged in\nAND</li>\n<li>some &quot;client&quot; has listened to the repository outbound stream</li>\n</ul>\n<p>whenever the user logs in or some &quot;client&quot; listens to the outbound stream.\n(see example code below)</p>\n<pre class=\"lang-dart prettyprint-override\"><code>class Repository {\n  Repository(\n    {required this.backendClient}\n  ) {\n    streamController = BehaviorSubject&lt;DataModel&gt;(\n      onListen: () {\n        conditionallyCallBackend();\n      }\n    );\n  }\n\n  final BackendClient backendClient;\n  late final BehaviorSubject&lt;DataModel&gt; streamController;\n  bool isAuthenticated = false;\n\n  void conditionallyCallBackend() {\n    if(isAuthenticated &amp; streamController.hasListener) {\n      callBackend();\n    }\n  }\n\n  void callBackend() async {\n    await backendClient.callBackend();\n    streamController.add(DataModel());\n  }\n\n  void onUserLogin() {\n    isAuthenticated = true;\n    conditionallyCallBackend();\n  }\n}\n</code></pre>\n<p>This implementation covers my requirements well, but I am having trouble testing those rules, especially when I want to verify that nothing has been emitted in the stream.</p>\n<p>See the following test, which fails:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>void main() {\n  group(&quot;test rules&quot;, () {\n      late Repository repository;\n      late BackendClient backendClient;\n\n      setUp(\n        backendClient = MockClient();\n        repository = Repository(backendClient: backendClient);\n      );\n\n      test(&quot;stream does not emit if not listened to (even if logged in)&quot;, () {\n          repository.onUserLogin();\n          unawaited(expectLater(repository.streamController.stream, neverEmits(anything));\n        }\n      );\n    }\n  );\n}\n</code></pre>\n<p>This test fails, because the <code>expectLater</code> function listens to the stream as a side effect. Therefore, <code>conditionallyCallBackend</code> if clause is true, <code>callBackend</code> is called and data is emitted through the stream.</p>\n<p>How would one test that nothing has been emitted through the stream without listening to it? Is the fact that this test is difficult to write a smell that my implementation is incorrect?</p>\n<p>Thanks a lot for your help!</p>\n",
        "codigo": [
            "class Repository {\n  Repository(\n    {required this.backendClient}\n  ) {\n    streamController = BehaviorSubject<DataModel>(\n      onListen: () {\n        conditionallyCallBackend();\n      }\n    );\n  }\n\n  final BackendClient backendClient;\n  late final BehaviorSubject<DataModel> streamController;\n  bool isAuthenticated = false;\n\n  void conditionallyCallBackend() {\n    if(isAuthenticated & streamController.hasListener) {\n      callBackend();\n    }\n  }\n\n  void callBackend() async {\n    await backendClient.callBackend();\n    streamController.add(DataModel());\n  }\n\n  void onUserLogin() {\n    isAuthenticated = true;\n    conditionallyCallBackend();\n  }\n}\n",
            "void main() {\n  group(\"test rules\", () {\n      late Repository repository;\n      late BackendClient backendClient;\n\n      setUp(\n        backendClient = MockClient();\n        repository = Repository(backendClient: backendClient);\n      );\n\n      test(\"stream does not emit if not listened to (even if logged in)\", () {\n          repository.onUserLogin();\n          unawaited(expectLater(repository.streamController.stream, neverEmits(anything));\n        }\n      );\n    }\n  );\n}\n",
            "expectLater",
            "conditionallyCallBackend",
            "callBackend"
        ]
    },
    {
        "titulo": "How do you test animations in flutter?",
        "score": 1,
        "views": 464,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "flutter-animation"
        ],
        "link": "https://stackoverflow.com/questions/78494710/how-do-you-test-animations-in-flutter",
        "conteudo_html": "<p>I didn't find any information, but looking at the flutter code I think it's with <a href=\"https://api.flutter.dev/flutter/flutter_test/AnimationSheetBuilder-class.html\" rel=\"nofollow noreferrer\">AnimationSheetBuilder</a> in a golden tests.</p>\n<p>Is that the correct way? or is there any other way to test animations?</p>\n<p>Thank you</p>\n<p>Like <a href=\"https://github.com/flutter/flutter/blob/cb656c21f082c400a169050f59c30023ae14c5c2/packages/flutter/test/material/progress_indicator_test.dart#L1063-L1084\" rel=\"nofollow noreferrer\">here</a></p>\n<pre class=\"lang-dart prettyprint-override\"><code>  testWidgets('Material3 - Indeterminate CircularProgressIndicator uses expected animation', (WidgetTester tester) async {\n    final AnimationSheetBuilder animationSheet = AnimationSheetBuilder(frameSize: const Size(40, 40));\n    addTearDown(animationSheet.dispose);\n\n    await tester.pumpFrames(animationSheet.record(\n      Theme(\n        data: ThemeData(useMaterial3: true),\n        child: const Directionality(\n          textDirection: TextDirection.ltr,\n          child: Padding(\n            padding: EdgeInsets.all(4),\n            child: CircularProgressIndicator(),\n          ),\n        ),\n      ),\n    ), const Duration(seconds: 2));\n\n    await expectLater(\n      animationSheet.collate(20),\n      matchesGoldenFile('m3_material.circular_progress_indicator.indeterminate.png'),\n    );\n  }, skip: isBrowser); // https://github.com/flutter/flutter/issues/56001\n</code></pre>\n<p>Result for the golden test is the image.</p>\n<p><a href=\"https://i.sstatic.net/9QcgqriK.png\" rel=\"nofollow noreferrer\">Golden test image generated</a></p>\n<p>Thanks</p>\n",
        "codigo": [
            "  testWidgets('Material3 - Indeterminate CircularProgressIndicator uses expected animation', (WidgetTester tester) async {\n    final AnimationSheetBuilder animationSheet = AnimationSheetBuilder(frameSize: const Size(40, 40));\n    addTearDown(animationSheet.dispose);\n\n    await tester.pumpFrames(animationSheet.record(\n      Theme(\n        data: ThemeData(useMaterial3: true),\n        child: const Directionality(\n          textDirection: TextDirection.ltr,\n          child: Padding(\n            padding: EdgeInsets.all(4),\n            child: CircularProgressIndicator(),\n          ),\n        ),\n      ),\n    ), const Duration(seconds: 2));\n\n    await expectLater(\n      animationSheet.collate(20),\n      matchesGoldenFile('m3_material.circular_progress_indicator.indeterminate.png'),\n    );\n  }, skip: isBrowser); // https://github.com/flutter/flutter/issues/56001\n"
        ]
    },
    {
        "titulo": "Isolates &amp; Testing in Dart/Flutter : how to verify a call inside an Isolate?",
        "score": 0,
        "views": 553,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "unit-testing",
            "testing",
            "dart-isolates"
        ],
        "link": "https://stackoverflow.com/questions/78277378/isolates-testing-in-dart-flutter-how-to-verify-a-call-inside-an-isolate",
        "conteudo_html": "<p><strong>Situation</strong>:\nI have a class Repository that is responsible for retrieving raw data from the DB and mapping it. The mapping happens in an isolate because, being a synchronous operation but, because of the amount of data, it should be async as recommended <a href=\"https://docs.flutter.dev/cookbook/networking/background-parsing#4-move-this-work-to-a-separate-isolate\" rel=\"nofollow noreferrer\">there</a>. (Note: I use Isolate.run but it's the same as compute).</p>\n<p><strong>Issue</strong>:\nI am using Mocktail package for testing (it would be the same also with Mockito), and apparently the mapping functions happening inside the isolate are called but they are not caught by the Mockito verify method.\nAfter some research, I think it happens because of the fact that isolate don't use the same input mapper object but copy it (<a href=\"https://stackoverflow.com/questions/75058944/access-variables-in-external-scope-when-using-isolation-in-dart\">source</a>): in this case, it copies the mapper object and uses it's method.</p>\n<p><strong>Questions</strong>:</p>\n<ol>\n<li>Is my assumption right that the verify calls are not caught because the isolate copies the mapper object for mapping?</li>\n<li>How would you change the repository code or the testing code to make sure the mapping is called?</li>\n</ol>\n<p>Repository code:</p>\n<pre><code>class Repository{\nfinal Source source;\nfinal Mapper mapper;\nRepository({required this.source, required this.mapper});\n\nFuture&lt;List&lt;MappedData&gt;&gt; getMappedData() async {\n final rawData = source.getRawData();\n final mappedData = await Isolate.run(()=&gt;\n _mapRawData(rawData, mapper);\n );\n return mappedData;\n }\n\n\n static List&lt;MappedData&gt; _mapRawData(List&lt;RawData&gt; rawData, Mapper mapper){\n return rawData.map((e)=&gt; mapper(e)).toList();\n }\n\n}\n</code></pre>\n<p>Testing code</p>\n<pre><code>import 'package:flutter_test/flutter_test.dart';\nimport 'package:mocktail/mocktail.dart';\n\nclass MockSource extends Mock implements Source{}\nclass MockMapper extends Mock implements Mapper{}\n\nvoid main() {\n late MockSource source;\n late MockMapper mapper;\n late Repository repository;\n\n final rawData = [\n RawData(1),\n RawData(2),\n };\n\n final mappedData = [\n MappedData(1),\n MappedData(2),\n ];\n\n setup(){\n source= MockSource();\n mapper = MockMapper();\n repository = Repository (source:source, mapper: mapper);\n }\n\n test(\n      'Repository getMappedData should call source and mapper',\n      () async {\n  //assign\n  when(()=&gt; source.getRawData).thenReturn(rawData);\n  when(()=&gt; mapper(rawData[0])).thenReturn(mappedData[0]);\n  when(()=&gt; mapper(rawData[1])).thenReturn(mappedData[1]);\n  //act\n  final result = await source.getMappedData();\n  //assert\n  expect(result, mappedData);\n  verify(()=&gt; source.getRawData).called(1);\n  verify(()=&gt; mapper(rawData[0])).called(1);\n  verify(()=&gt; mapper(rawData[1])).called(1);\n}\n</code></pre>\n<p>The <code>expect</code> works fine, only the <code>verify</code> methods trigger an error as they are never called.</p>\n",
        "codigo": [
            "class Repository{\nfinal Source source;\nfinal Mapper mapper;\nRepository({required this.source, required this.mapper});\n\nFuture<List<MappedData>> getMappedData() async {\n final rawData = source.getRawData();\n final mappedData = await Isolate.run(()=>\n _mapRawData(rawData, mapper);\n );\n return mappedData;\n }\n\n\n static List<MappedData> _mapRawData(List<RawData> rawData, Mapper mapper){\n return rawData.map((e)=> mapper(e)).toList();\n }\n\n}\n",
            "import 'package:flutter_test/flutter_test.dart';\nimport 'package:mocktail/mocktail.dart';\n\nclass MockSource extends Mock implements Source{}\nclass MockMapper extends Mock implements Mapper{}\n\nvoid main() {\n late MockSource source;\n late MockMapper mapper;\n late Repository repository;\n\n final rawData = [\n RawData(1),\n RawData(2),\n };\n\n final mappedData = [\n MappedData(1),\n MappedData(2),\n ];\n\n setup(){\n source= MockSource();\n mapper = MockMapper();\n repository = Repository (source:source, mapper: mapper);\n }\n\n test(\n      'Repository getMappedData should call source and mapper',\n      () async {\n  //assign\n  when(()=> source.getRawData).thenReturn(rawData);\n  when(()=> mapper(rawData[0])).thenReturn(mappedData[0]);\n  when(()=> mapper(rawData[1])).thenReturn(mappedData[1]);\n  //act\n  final result = await source.getMappedData();\n  //assert\n  expect(result, mappedData);\n  verify(()=> source.getRawData).called(1);\n  verify(()=> mapper(rawData[0])).called(1);\n  verify(()=> mapper(rawData[1])).called(1);\n}\n",
            "expect",
            "verify"
        ]
    },
    {
        "titulo": "type &#39;Null&#39; is not a subtype of type &#39;Future&lt;List&lt;Job&gt;&gt; when unit testing a throw",
        "score": 0,
        "views": 75,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "unit-testing",
            "testing",
            "bloc"
        ],
        "link": "https://stackoverflow.com/questions/78238600/type-null-is-not-a-subtype-of-type-futurelistjob-when-unit-testing-a-thro",
        "conteudo_html": "<p>i'm trying to unit test a method in my BLoC but i'm encountering a strange error:</p>\n<blockquote>\n<p>No matching calls. All calls: MockAlertBloc.add(AlertError(type 'Null' is not a subtype of type 'Future&lt;List&gt;', null))\n(If you called <code>verify(...).called(0);</code>, please instead use <code>verifyNever(...);</code>.)\npackage:matcher                            fail\npackage:mocktail/src/mocktail.dart 728:7   _VerifyCall._checkWith\npackage:mocktail/src/mocktail.dart 519:18  _makeVerify.\ntest/blocs/job_bloc_test.dart        main..</p>\n</blockquote>\n<p>I debugged it and figured out it was throwed by the jobRepository.getJobs(), which makes no sense because I'm litterally mocking that method in my test.</p>\n<p>Is there anything I'm doing wrong in here ?</p>\n<p>My BLoC method:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>  void _onFetch(JobFetch event, Emitter&lt;JobState&gt; emit) async {\n    JobState oldState = state;\n    try {\n      emit(JobLoading());\n      List&lt;Job&gt; jobs = await jobRepository.getJobs();\n      emit(JobLoaded(jobs: jobs));\n    } catch (e, stacktrace) {\n      emit(oldState);\n      alertBloc.add(AlertError(error: e, stackTrace: stacktrace));\n    }\n  }\n</code></pre>\n<p>and this is my test file:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>class MockJobRepository extends Mock implements JobRepository {}\n\nclass MockAlertBloc extends MockBloc&lt;AlertEvent, AlertState&gt;\n    implements AlertBloc {}\n\nclass MockAuthBloc extends MockBloc&lt;AuthEvent, AuthState&gt; implements AuthBloc {\n  @override\n  AuthState get state =&gt; AuthLoggedIn();\n}\n\nvoid main() {\n  group('JobBloc', () {\n    late JobRepository jobRepository;\n    late AuthBloc authBloc;\n    late AlertBloc alertBloc;\n    late JobBloc jobBloc;\n\n    setUp(() {\n      jobRepository = MockJobRepository();\n      authBloc = MockAuthBloc();\n      alertBloc = MockAlertBloc();\n      jobBloc = JobBloc(\n        jobRepository: jobRepository,\n        authBloc: authBloc,\n        alertBloc: alertBloc,\n      );\n    });\n\n    test('adds AlertError to AlertBloc when an error occurs during JobFetch',\n        () async {\n      final error = Exception('Error fetching jobs');\n\n      when(() =&gt; jobRepository.getJobs()).thenThrow(error);\n\n      final expectedStates = [\n        JobInitial(), // Old state\n      ];\n\n      final expectedAlertError = AlertError(error: error, stackTrace: null);\n\n      expectLater(\n        jobBloc.stream,\n        emitsInOrder(expectedStates),\n      );\n\n      verify(() =&gt; alertBloc.add(expectedAlertError)).called(1);\n\n      jobBloc.add(const JobFetch());\n    });\n  });\n}\n</code></pre>\n<p>If it can helps, this is my JobRepository</p>\n<pre class=\"lang-dart prettyprint-override\"><code>class JobRepository {\n    final JobProvider jobProvider;\n\n    const JobRepository({required this.jobProvider});\n\n    Future&lt;List&lt;Job&gt;&gt; getJobs() async {\n        List&lt;Job&gt; allJobs = await jobProvider.getJobs(query: {&quot;perPage&quot;: &quot;200&quot;});\n        allJobs.retainWhere((job) {\n            bool? isPublished = job.isPublished;\n            return isPublished != null &amp;&amp;\n                isPublished &amp;&amp;\n        });\n        return allJobs;\n    }\n}\n</code></pre>\n<p>I tried to debug the test, tried to override the getJobs method in the MockJobRepository, to try to pass the test, but it wasn't helping</p>\n<p>EDIT: Solution: I had to add the <code>when(() =&gt; jobRepository.getJobs()).thenThrow(error);</code> into the setup of test, because it wasn't working in the test directly for some reason</p>\n",
        "codigo": [
            "verify(...).called(0);",
            "verifyNever(...);",
            "  void _onFetch(JobFetch event, Emitter<JobState> emit) async {\n    JobState oldState = state;\n    try {\n      emit(JobLoading());\n      List<Job> jobs = await jobRepository.getJobs();\n      emit(JobLoaded(jobs: jobs));\n    } catch (e, stacktrace) {\n      emit(oldState);\n      alertBloc.add(AlertError(error: e, stackTrace: stacktrace));\n    }\n  }\n",
            "class MockJobRepository extends Mock implements JobRepository {}\n\nclass MockAlertBloc extends MockBloc<AlertEvent, AlertState>\n    implements AlertBloc {}\n\nclass MockAuthBloc extends MockBloc<AuthEvent, AuthState> implements AuthBloc {\n  @override\n  AuthState get state => AuthLoggedIn();\n}\n\nvoid main() {\n  group('JobBloc', () {\n    late JobRepository jobRepository;\n    late AuthBloc authBloc;\n    late AlertBloc alertBloc;\n    late JobBloc jobBloc;\n\n    setUp(() {\n      jobRepository = MockJobRepository();\n      authBloc = MockAuthBloc();\n      alertBloc = MockAlertBloc();\n      jobBloc = JobBloc(\n        jobRepository: jobRepository,\n        authBloc: authBloc,\n        alertBloc: alertBloc,\n      );\n    });\n\n    test('adds AlertError to AlertBloc when an error occurs during JobFetch',\n        () async {\n      final error = Exception('Error fetching jobs');\n\n      when(() => jobRepository.getJobs()).thenThrow(error);\n\n      final expectedStates = [\n        JobInitial(), // Old state\n      ];\n\n      final expectedAlertError = AlertError(error: error, stackTrace: null);\n\n      expectLater(\n        jobBloc.stream,\n        emitsInOrder(expectedStates),\n      );\n\n      verify(() => alertBloc.add(expectedAlertError)).called(1);\n\n      jobBloc.add(const JobFetch());\n    });\n  });\n}\n",
            "class JobRepository {\n    final JobProvider jobProvider;\n\n    const JobRepository({required this.jobProvider});\n\n    Future<List<Job>> getJobs() async {\n        List<Job> allJobs = await jobProvider.getJobs(query: {\"perPage\": \"200\"});\n        allJobs.retainWhere((job) {\n            bool? isPublished = job.isPublished;\n            return isPublished != null &&\n                isPublished &&\n        });\n        return allJobs;\n    }\n}\n",
            "when(() => jobRepository.getJobs()).thenThrow(error);"
        ]
    },
    {
        "titulo": "Flutter - Problem mocking supabase with mocktail",
        "score": 1,
        "views": 230,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "unit-testing",
            "testing",
            "supabase"
        ],
        "link": "https://stackoverflow.com/questions/78128787/flutter-problem-mocking-supabase-with-mocktail",
        "conteudo_html": "<p>I'm trying to mock a query to a table in Supabase with mocktail, and it doesn't work. My problem is mocking the await on the PostgrestTransformBuilder, it doesn't work at all:</p>\n<pre><code>import 'package:flutter_test/flutter_test.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass MockPostgrestTransformBuilder extends Mock\n    implements PostgrestTransformBuilder&lt;PostgrestList&gt; {}\n\nvoid main() {\n  final mockPostgrestTransformBuilder = MockPostgrestTransformBuilder();\n  final myList = &lt;Map&lt;String, dynamic&gt;&gt;[];\n\n  test('Mocking PostgrestTransformBuilder', () async {\n    // defining the mock\n    when(() async =&gt; mockPostgrestTransformBuilder)\n        .thenAnswer((_) async =&gt; myList);\n\n    // calling the mock\n    final result = await mockPostgrestTransformBuilder;\n\n    // expecting the result\n    expect(result, myList);\n  });\n}\n</code></pre>\n<p>Can anybody help me?</p>\n<p>I have tried a lot of things, and it doesn't work</p>\n<p>Edit: I add here the &quot;real code&quot; I try to test. In this code, that is working perfectly calling Supabase objects, I have been able to mock:</p>\n<ul>\n<li>The SupabaseClient.from</li>\n<li>The SupabaseQueryBuilder.select</li>\n<li>The PostgrestFilterBuilder.order</li>\n</ul>\n<p>But the final mock never works.</p>\n<pre><code>import 'package:supabase_flutter/supabase_flutter.dart';\n\nclass MyService {   const MyService({required this.supabaseClient});   final SupabaseClient supabaseClient;\n\n  /// read the data\n  Future&lt;void&gt; readData() async {\n    final a = supabaseClient.from('table_name');\n    // a is SupabaseQueryBuilder\n    final b = a.select();\n    // b is PostgrestFilterBuilder&lt;List&lt;Map&lt;String, dynamic&gt;&gt;&gt;\n    final c = b.order('column name', ascending: true);\n    // c is PostgrestTransformBuilder&lt;List&lt;Map&lt;String, dynamic&gt;&gt;&gt;\n    final d = await c;\n    // d is List&lt;Map&lt;String, dynamic&gt;&gt;\n    /* ... */\n  }\n  /* ... */\n}\n</code></pre>\n<p>Thanks.</p>\n<hr />\n<p>Edit v2</p>\n<p>I try to put a complete example of the code I'm trying to test. The error I get is <code>type 'Null' is not a subtype of type 'Future&lt;dynamic&gt;'</code>, and I supose it's because I am not mocking the <code>final d = await c;</code>. But I don't know how to mock it...</p>\n<pre><code>import 'package:flutter_test/flutter_test.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass MockSupabaseClient extends Mock implements SupabaseClient {}\n\nclass MockSupabaseQueryBuilder extends Mock implements SupabaseQueryBuilder {}\n\nclass MockPostgrestFilterBuilder&lt;R&gt; extends Mock\n    implements PostgrestFilterBuilder&lt;R&gt; {}\n\nclass MockPostgrestTransformBuilder&lt;R&gt; extends Mock\n    implements PostgrestTransformBuilder&lt;R&gt; {}\n\nclass MyService {\n  const MyService({required this.supabaseClient});\n  final SupabaseClient supabaseClient;\n\n  Future&lt;List&lt;Map&lt;String, dynamic&gt;&gt;&gt; readData() async {\n    final a = supabaseClient.from('table_name');\n    // a is SupabaseQueryBuilder\n    final b = a.select();\n    // b is PostgrestFilterBuilder&lt;List&lt;Map&lt;String, dynamic&gt;&gt;&gt;\n    final c = b.order('column name', ascending: true);\n    // c is PostgrestTransformBuilder&lt;List&lt;Map&lt;String, dynamic&gt;&gt;&gt;\n    final d = await c;\n    // d is List&lt;Map&lt;String, dynamic&gt;&gt;\n    return d;\n  }\n}\n\nvoid main() {\n  late MockSupabaseClient mockSupabaseClient;\n  late MockSupabaseQueryBuilder mockSupabaseQueryBuilder;\n  late MockPostgrestFilterBuilder&lt;PostgrestList&gt; mockPostgrestFilterBuilder;\n  late MockPostgrestTransformBuilder&lt;PostgrestList&gt;\n      mockPostgrestTransformBuilder;\n  late MyService myService;\n  late Map&lt;String, dynamic&gt; myList;\n\n  setUpAll(() {\n    mockSupabaseClient = MockSupabaseClient();\n    mockSupabaseQueryBuilder = MockSupabaseQueryBuilder();\n    mockPostgrestFilterBuilder = MockPostgrestFilterBuilder();\n    mockPostgrestTransformBuilder = MockPostgrestTransformBuilder();\n    myService = MyService(supabaseClient: mockSupabaseClient);\n  });\n\n  test('Mock test', () async {\n    when(() =&gt; mockSupabaseClient.from(any()))\n        .thenAnswer((_) =&gt; mockSupabaseQueryBuilder);\n    when(() =&gt; mockSupabaseQueryBuilder.select())\n        .thenAnswer((_) =&gt; mockPostgrestFilterBuilder);\n    when(() =&gt; mockPostgrestFilterBuilder.order(any(), ascending: true))\n        .thenAnswer((_) =&gt; mockPostgrestTransformBuilder);\n\n    final result = await myService.readData();\n\n    expect(result, &lt;Map&lt;String, dynamic&gt;&gt;[]);\n  });\n}\n</code></pre>\n<p>Thanks in advance.</p>\n",
        "codigo": [
            "import 'package:flutter_test/flutter_test.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass MockPostgrestTransformBuilder extends Mock\n    implements PostgrestTransformBuilder<PostgrestList> {}\n\nvoid main() {\n  final mockPostgrestTransformBuilder = MockPostgrestTransformBuilder();\n  final myList = <Map<String, dynamic>>[];\n\n  test('Mocking PostgrestTransformBuilder', () async {\n    // defining the mock\n    when(() async => mockPostgrestTransformBuilder)\n        .thenAnswer((_) async => myList);\n\n    // calling the mock\n    final result = await mockPostgrestTransformBuilder;\n\n    // expecting the result\n    expect(result, myList);\n  });\n}\n",
            "import 'package:supabase_flutter/supabase_flutter.dart';\n\nclass MyService {   const MyService({required this.supabaseClient});   final SupabaseClient supabaseClient;\n\n  /// read the data\n  Future<void> readData() async {\n    final a = supabaseClient.from('table_name');\n    // a is SupabaseQueryBuilder\n    final b = a.select();\n    // b is PostgrestFilterBuilder<List<Map<String, dynamic>>>\n    final c = b.order('column name', ascending: true);\n    // c is PostgrestTransformBuilder<List<Map<String, dynamic>>>\n    final d = await c;\n    // d is List<Map<String, dynamic>>\n    /* ... */\n  }\n  /* ... */\n}\n",
            "type 'Null' is not a subtype of type 'Future<dynamic>'",
            "final d = await c;",
            "import 'package:flutter_test/flutter_test.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:supabase_flutter/supabase_flutter.dart';\n\nclass MockSupabaseClient extends Mock implements SupabaseClient {}\n\nclass MockSupabaseQueryBuilder extends Mock implements SupabaseQueryBuilder {}\n\nclass MockPostgrestFilterBuilder<R> extends Mock\n    implements PostgrestFilterBuilder<R> {}\n\nclass MockPostgrestTransformBuilder<R> extends Mock\n    implements PostgrestTransformBuilder<R> {}\n\nclass MyService {\n  const MyService({required this.supabaseClient});\n  final SupabaseClient supabaseClient;\n\n  Future<List<Map<String, dynamic>>> readData() async {\n    final a = supabaseClient.from('table_name');\n    // a is SupabaseQueryBuilder\n    final b = a.select();\n    // b is PostgrestFilterBuilder<List<Map<String, dynamic>>>\n    final c = b.order('column name', ascending: true);\n    // c is PostgrestTransformBuilder<List<Map<String, dynamic>>>\n    final d = await c;\n    // d is List<Map<String, dynamic>>\n    return d;\n  }\n}\n\nvoid main() {\n  late MockSupabaseClient mockSupabaseClient;\n  late MockSupabaseQueryBuilder mockSupabaseQueryBuilder;\n  late MockPostgrestFilterBuilder<PostgrestList> mockPostgrestFilterBuilder;\n  late MockPostgrestTransformBuilder<PostgrestList>\n      mockPostgrestTransformBuilder;\n  late MyService myService;\n  late Map<String, dynamic> myList;\n\n  setUpAll(() {\n    mockSupabaseClient = MockSupabaseClient();\n    mockSupabaseQueryBuilder = MockSupabaseQueryBuilder();\n    mockPostgrestFilterBuilder = MockPostgrestFilterBuilder();\n    mockPostgrestTransformBuilder = MockPostgrestTransformBuilder();\n    myService = MyService(supabaseClient: mockSupabaseClient);\n  });\n\n  test('Mock test', () async {\n    when(() => mockSupabaseClient.from(any()))\n        .thenAnswer((_) => mockSupabaseQueryBuilder);\n    when(() => mockSupabaseQueryBuilder.select())\n        .thenAnswer((_) => mockPostgrestFilterBuilder);\n    when(() => mockPostgrestFilterBuilder.order(any(), ascending: true))\n        .thenAnswer((_) => mockPostgrestTransformBuilder);\n\n    final result = await myService.readData();\n\n    expect(result, <Map<String, dynamic>>[]);\n  });\n}\n"
        ]
    },
    {
        "titulo": "How to pass --dart-define variables to `dart test`?",
        "score": 1,
        "views": 841,
        "respostas": 2,
        "tags": [
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/78121533/how-to-pass-dart-define-variables-to-dart-test",
        "conteudo_html": "<p>I want to pass variables to tests run in pure Dart the same way as one can pass them in Flutter.</p>\n<p>Flutter example:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>$ flutter test --dart-define=FOO=BAR\n</code></pre>\n<pre><code>  test('Value is correct', () {\n    expect(const String.fromEnvironment('FOO'), 'BAR'); // passes\n  });\n</code></pre>\n<p>Dart example:</p>\n<pre class=\"lang-bash prettyprint-override\"><code>$ dart test --dart-define=FOO=BAR\n\nCould not find an option named &quot;dart-define&quot;.\n</code></pre>\n<p>Is this possible?</p>\n",
        "codigo": [
            "$ flutter test --dart-define=FOO=BAR\n",
            "  test('Value is correct', () {\n    expect(const String.fromEnvironment('FOO'), 'BAR'); // passes\n  });\n",
            "$ dart test --dart-define=FOO=BAR\n\nCould not find an option named \"dart-define\".\n"
        ]
    },
    {
        "titulo": "How to catch Completer.CompleterError in Flutter?",
        "score": 0,
        "views": 147,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "unit-testing",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/77616397/how-to-catch-completer-completererror-in-flutter",
        "conteudo_html": "<p>I would like to know why this test case fails and how can I resolve it.</p>\n<pre><code>  test('first error  ', () async {\n    try {\n      final clusterCompleter = Completer&lt;String&gt;();\n      clusterCompleter.completeError(Exception(&quot;API Error&quot;));\n    } catch (e) {\n      print(&quot;Error: $e&quot;);\n    }\n    print(&quot;Passed&quot;);\n    expect(1, 1);\n  });\n</code></pre>\n<p>What's confusing is that it prints :</p>\n<pre><code>Passed\n\nException: API Error\n</code></pre>\n<p><a href=\"https://i.sstatic.net/imgTc.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/imgTc.png\" alt=\"enter image description here\" /></a></p>\n<p>Why does it pass and fail at the same time ?</p>\n",
        "codigo": [
            "  test('first error  ', () async {\n    try {\n      final clusterCompleter = Completer<String>();\n      clusterCompleter.completeError(Exception(\"API Error\"));\n    } catch (e) {\n      print(\"Error: $e\");\n    }\n    print(\"Passed\");\n    expect(1, 1);\n  });\n",
            "Passed\n\nException: API Error\n"
        ]
    },
    {
        "titulo": "dart_test: how to execute `setUp` if a loop before `test` is used based on the data assigned in `setUp`?",
        "score": 0,
        "views": 77,
        "respostas": 3,
        "tags": [
            "dart",
            "unit-testing",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/77562063/dart-test-how-to-execute-setup-if-a-loop-before-test-is-used-based-on-the-d",
        "conteudo_html": "<p>The problem is in this code:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>void main() {\n  late List&lt;int&gt; data;\n\n  setUp(() async {\n    data = [11, 22, 33];\n  });\n  \n  int counter = 0;\n  for (final d in data) { // error\n    test('data', () {\n      expect(d, data[counter++]);\n    });\n  }\n}\n</code></pre>\n<p><strong>error</strong>:</p>\n<pre><code>Local 'data' has not been initialized.\n</code></pre>\n<p><em>How can we specify that the <code>setUp</code> function should be called before the data is used?</em></p>\n<p>I tried wrapping <code>test</code> in <code>group</code> - same error.</p>\n",
        "codigo": [
            "void main() {\n  late List<int> data;\n\n  setUp(() async {\n    data = [11, 22, 33];\n  });\n  \n  int counter = 0;\n  for (final d in data) { // error\n    test('data', () {\n      expect(d, data[counter++]);\n    });\n  }\n}\n",
            "Local 'data' has not been initialized.\n",
            "setUp",
            "test",
            "group"
        ]
    },
    {
        "titulo": "How to catch exception with WidgetTester if &#39;EXCEPTION CAUGHT BY WIDGETS LIBRARY&#39; in Flutter?",
        "score": 0,
        "views": 106,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/77147165/how-to-catch-exception-with-widgettester-if-exception-caught-by-widgets-library",
        "conteudo_html": "<p>I want to verify that the widget can throw an exception.</p>\n<p>I tried this code:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>  testWidgets('it fails other widgets if', (WidgetTester tester) async {\n    // expect(() async {\n    //   await tester.pumpWidget(WidgetThatThrowUnimplementedError());\n    // }, throwsA(isA&lt;UnimplementedError&gt;()));\n\n      try {\n        await tester.pumpWidget(WidgetThatThrowUnimplementedError());\n        fail('Exception was not thrown');\n      } catch (e) {\n        expect(e, isA&lt;UnimplementedError&gt;());\n        return;\n      }\n  });\n</code></pre>\n<p>But got: &quot;<code>EXCEPTION CAUGHT BY WIDGETS LIBRARY</code>&quot; and</p>\n<pre><code>  Actual: TestFailure:&lt;Exception was not thrown&gt;\n   Which: is not an instance of 'UnimplementedError'\n</code></pre>\n<p>How to catch <code>UnimplementedError</code>?</p>\n",
        "codigo": [
            "  testWidgets('it fails other widgets if', (WidgetTester tester) async {\n    // expect(() async {\n    //   await tester.pumpWidget(WidgetThatThrowUnimplementedError());\n    // }, throwsA(isA<UnimplementedError>()));\n\n      try {\n        await tester.pumpWidget(WidgetThatThrowUnimplementedError());\n        fail('Exception was not thrown');\n      } catch (e) {\n        expect(e, isA<UnimplementedError>());\n        return;\n      }\n  });\n",
            "EXCEPTION CAUGHT BY WIDGETS LIBRARY",
            "  Actual: TestFailure:<Exception was not thrown>\n   Which: is not an instance of 'UnimplementedError'\n",
            "UnimplementedError"
        ]
    },
    {
        "titulo": "Simple Dart test script reports a fail on async request",
        "score": 0,
        "views": 20,
        "respostas": 0,
        "tags": [
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/77086090/simple-dart-test-script-reports-a-fail-on-async-request",
        "conteudo_html": "<p>I have some code that works but I want to write some test scripts. The tests aren't completing and I'm not sure why.</p>\n<p>The Test Script</p>\n<pre><code>import 'package:members_info/models/digital_card_model.dart';\nimport 'package:members_info/network/network_digital_card.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n  DigitalCardModel testAndrew = DigitalCardModel.fromJson({\n&quot;name&quot;:&quot;Andrew&quot;,\n    &quot;phone&quot;: &quot;&quot;,\n    &quot;expired&quot;: &quot;Y&quot;,\n    &quot;lapsing&quot;: &quot;Y&quot;,\n    &quot;externalid&quot;: &quot;29033&quot;\n  });\n\n  DigitalCardModel testSarah = DigitalCardModel.fromJson({\n&quot;name&quot;:&quot;Sarah&quot;,\n    &quot;phone&quot;: &quot;&quot;,\n    &quot;expired&quot;: &quot;N&quot;,\n    &quot;lapsing&quot;: &quot;N&quot;,\n    &quot;externalid&quot;: &quot;13&quot;\n  });\n\n  group(&quot;Test DigitalCardModel request&quot;, () {\n    test('Andrew', () async {\n      DigitalCardModel digitalCard =\n          await NetworkDigitalCard().getDigitalCard('andrew@acme.com');\n\n      expect(digitalCard, testAndrew);\n    });\n    test('Sarah', () async {\n      DigitalCardModel digitalCard =\n          await NetworkDigitalCard().getDigitalCard('sarah@acme.com');\n\n      expect(digitalCard, testSarah);\n    });\n  });\n}\n</code></pre>\n<p>When I run the test in vs code I get this error and it never progresses to the second test:</p>\n<blockquote>\n<p>Exception has occurred.\nTestFailure (Expected: &lt;Instance of 'DigitalCardModel'&gt;\nActual: &lt;Instance of 'DigitalCardModel'&gt;\n)</p>\n</blockquote>\n<p>If I mouseover the expect statement I see an empty DigitalCardModel for the result - as if it hasn't waited for the network request to finish.</p>\n<p>When I call it in the app it looks like this:</p>\n<pre><code>late Future&lt;DigitalCardModel&gt; digitalCard =\n      NetworkDigitalCard().getDigitalCard(_email);\n</code></pre>\n<p>The network call is</p>\n<pre><code>import 'package:dio/dio.dart';\nimport 'package:members_info/extensions/string.dart';\nimport 'package:members_info/models/digital_card_model.dart';\nimport 'package:sentry_flutter/sentry_flutter.dart';\n\nclass NetworkDigitalCard {\n  String getUrl(email) =&gt;\n      'https://acme.com/jsonCardDetails?email=$email';\n\n// this gets called by the screen\n  Future&lt;DigitalCardModel&gt; getDigitalCard(String email) async {\n    if (!email.isValidEmail) {\n      return DigitalCardModel(\n          \n          name: &quot;Invalid Email&quot;,\n          phone: &quot;&quot;,\n          expired: &quot;&quot;,\n          lapsing: &quot;&quot;,\n          externalid: 0);\n    }\n    try {\n      Response&lt;dynamic&gt; response = await Dio().get(getUrl(email));\n      if (response.data['unknown'] == true) {\n        return DigitalCardModel(externalid: response.data['externalid']);\n      }\n\n      // good data\n      return DigitalCardModel.fromJson(response.data);\n    } catch (exception, stackTrace) {\n      await Sentry.captureException(\n        exception,\n        stackTrace: stackTrace,\n      );\n    }\n    return DigitalCardModel();\n  }\n\n  Future&lt;DigitalCardModel&gt; refreshContent(String email) async {\n    return getDigitalCard(email);\n  }\n}\n\n</code></pre>\n<p>Flutter Dr...</p>\n<pre><code>Flutter (Channel stable, 3.10.6, on macOS 13.5 22G74 darwin-x64, locale en-AU)\n    • Flutter version 3.10.6 on channel stable at /Users/sarah/development/flutter\n    • Upstream repository https://github.com/flutter/flutter.git\n    • Framework revision f468f3366c (9 weeks ago), 2023-07-12 15:19:05 -0700\n    • Engine revision cdbeda788a\n    • Dart version 3.0.6\n    • DevTools version 2.23.1\n</code></pre>\n",
        "codigo": [
            "import 'package:members_info/models/digital_card_model.dart';\nimport 'package:members_info/network/network_digital_card.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n  DigitalCardModel testAndrew = DigitalCardModel.fromJson({\n\"name\":\"Andrew\",\n    \"phone\": \"\",\n    \"expired\": \"Y\",\n    \"lapsing\": \"Y\",\n    \"externalid\": \"29033\"\n  });\n\n  DigitalCardModel testSarah = DigitalCardModel.fromJson({\n\"name\":\"Sarah\",\n    \"phone\": \"\",\n    \"expired\": \"N\",\n    \"lapsing\": \"N\",\n    \"externalid\": \"13\"\n  });\n\n  group(\"Test DigitalCardModel request\", () {\n    test('Andrew', () async {\n      DigitalCardModel digitalCard =\n          await NetworkDigitalCard().getDigitalCard('andrew@acme.com');\n\n      expect(digitalCard, testAndrew);\n    });\n    test('Sarah', () async {\n      DigitalCardModel digitalCard =\n          await NetworkDigitalCard().getDigitalCard('sarah@acme.com');\n\n      expect(digitalCard, testSarah);\n    });\n  });\n}\n",
            "late Future<DigitalCardModel> digitalCard =\n      NetworkDigitalCard().getDigitalCard(_email);\n",
            "import 'package:dio/dio.dart';\nimport 'package:members_info/extensions/string.dart';\nimport 'package:members_info/models/digital_card_model.dart';\nimport 'package:sentry_flutter/sentry_flutter.dart';\n\nclass NetworkDigitalCard {\n  String getUrl(email) =>\n      'https://acme.com/jsonCardDetails?email=$email';\n\n// this gets called by the screen\n  Future<DigitalCardModel> getDigitalCard(String email) async {\n    if (!email.isValidEmail) {\n      return DigitalCardModel(\n          \n          name: \"Invalid Email\",\n          phone: \"\",\n          expired: \"\",\n          lapsing: \"\",\n          externalid: 0);\n    }\n    try {\n      Response<dynamic> response = await Dio().get(getUrl(email));\n      if (response.data['unknown'] == true) {\n        return DigitalCardModel(externalid: response.data['externalid']);\n      }\n\n      // good data\n      return DigitalCardModel.fromJson(response.data);\n    } catch (exception, stackTrace) {\n      await Sentry.captureException(\n        exception,\n        stackTrace: stackTrace,\n      );\n    }\n    return DigitalCardModel();\n  }\n\n  Future<DigitalCardModel> refreshContent(String email) async {\n    return getDigitalCard(email);\n  }\n}\n\n",
            "Flutter (Channel stable, 3.10.6, on macOS 13.5 22G74 darwin-x64, locale en-AU)\n    • Flutter version 3.10.6 on channel stable at /Users/sarah/development/flutter\n    • Upstream repository https://github.com/flutter/flutter.git\n    • Framework revision f468f3366c (9 weeks ago), 2023-07-12 15:19:05 -0700\n    • Engine revision cdbeda788a\n    • Dart version 3.0.6\n    • DevTools version 2.23.1\n"
        ]
    },
    {
        "titulo": "A Timer is still pending even after the widget tree was disposed in flutter web test",
        "score": 4,
        "views": 1712,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/77084659/a-timer-is-still-pending-even-after-the-widget-tree-was-disposed-in-flutter-web",
        "conteudo_html": "<p>I get error when running widget test case in <strong>flutter web</strong></p>\n<p>A Timer is still pending even after the widget tree was disposed.\n'package:flutter_test/src/binding.dart':\nFailed assertion: line 1485 pos 12: '!timersPending'</p>\n<pre><code> testWidgets('OnBoardingPage renders correctly', (WidgetTester tester) async {\n    tester.view.physicalSize = const Size(1000, 800);\n\n    await tester.pumpWidget(\n      MaterialApp(\n        home: OnBoardingPage(),\n      ),\n    );\n    await tester.tap(find.byIcon(Icons.menu));\n    await tester.pump(); // Wait for animations and async tasks to complete.\n\n    expect(find.byType(SideBar), findsOneWidget);\n  });\n</code></pre>\n<hr />\n<p>EDITED\n<strong>Found the culprit:</strong> Onboarding has this section which has duration of 10minutes how can I overlook this timer while testing</p>\n<pre><code>class CommunitySection extends StatelessWidget {\n  const CommunitySection({Key? key}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        const SectionHeader(heading: &quot;Community&quot;),\n        _buildResponsiveCommunityWidget(context),\n      ],\n    );\n  }\n\n  Widget _buildResponsiveCommunityWidget(BuildContext context) {\n    return SizedBox(\n      width: MediaQuery.of(context).size.width,\n      child: const ScrollLoopAutoScroll(\n        gap: 0,\n        delayAfterScrollInput: Duration(seconds: 8),\n        delay: Duration(seconds: 0),\n        duration: Duration(minutes: 10),\n        scrollDirection: Axis.horizontal,\n        child: _LogoWidget(),\n      ),\n    );\n  }\n}\n</code></pre>\n",
        "codigo": [
            " testWidgets('OnBoardingPage renders correctly', (WidgetTester tester) async {\n    tester.view.physicalSize = const Size(1000, 800);\n\n    await tester.pumpWidget(\n      MaterialApp(\n        home: OnBoardingPage(),\n      ),\n    );\n    await tester.tap(find.byIcon(Icons.menu));\n    await tester.pump(); // Wait for animations and async tasks to complete.\n\n    expect(find.byType(SideBar), findsOneWidget);\n  });\n",
            "class CommunitySection extends StatelessWidget {\n  const CommunitySection({Key? key}) : super(key: key);\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        const SectionHeader(heading: \"Community\"),\n        _buildResponsiveCommunityWidget(context),\n      ],\n    );\n  }\n\n  Widget _buildResponsiveCommunityWidget(BuildContext context) {\n    return SizedBox(\n      width: MediaQuery.of(context).size.width,\n      child: const ScrollLoopAutoScroll(\n        gap: 0,\n        delayAfterScrollInput: Duration(seconds: 8),\n        delay: Duration(seconds: 0),\n        duration: Duration(minutes: 10),\n        scrollDirection: Axis.horizontal,\n        child: _LogoWidget(),\n      ),\n    );\n  }\n}\n"
        ]
    },
    {
        "titulo": "How to test Random method of dart library in Flutter?",
        "score": 2,
        "views": 411,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "manual-testing"
        ],
        "link": "https://stackoverflow.com/questions/76599576/how-to-test-random-method-of-dart-library-in-flutter",
        "conteudo_html": "<p>I am trying to test the Random method from the dart library in Flutter. I got to know about seeding for the Random method to test it but it doesn't make the method purely random as it would behave without seeding because the seeded method always gives the same sequence of numbers. Is it any way to mock the method I tried mocking it and the mocked method never gets called as the method does not have the dependency passed as a parameter. The code I tried.</p>\n<p><em>bacground_color.dart</em></p>\n<pre><code> ///Method responsible for change of colour of background.\n  Color? colorChanger() {\n    const parameterRandom = 100;\n    const parameterNextInt = 256;\n    int parameterARGB = 0;\n    final parameterARGB2 = Random().nextInt(parameterNextInt);\n    final parameterARGB3 = Random().nextInt(parameterNextInt);\n    final parameterARGB4 = Random().nextInt(parameterNextInt);\n\n    if (background ==\n        Color.fromARGB(\n          parameterARGB,\n          parameterARGB,\n          parameterARGB,\n          parameterARGB,\n        ))\n    //Case created done for the widget testing so that 1st time the color is,\n    // what is specified in widget test and the second time it is all random\n    {\n      background = Color.fromARGB(\n        Random(parameterRandom).nextInt(parameterNextInt),\n        Random(parameterRandom).nextInt(parameterNextInt),\n        Random(parameterRandom).nextInt(parameterNextInt),\n        Random(parameterRandom).nextInt(parameterNextInt),\n      );\n    } else {\n      parameterARGB = Random().nextInt(parameterNextInt);\n      background = Color.fromARGB(\n        parameterARGB,\n        parameterARGB2,\n        parameterARGB3,\n        parameterARGB4,\n      );\n    }\n\n    return background;\n  }\n</code></pre>\n<p><em>main_file_unit_test.dart</em></p>\n<pre><code>import 'dart:math';\nimport 'dart:ui';\n\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:solid_software/Model/background_color.dart';\n\nclass MockRandom extends Mock implements Random {}\n\nvoid main() {\n  late MockRandom mockRandom;\n  setUp(() {\n    mockRandom = MockRandom();\n  });\n  test(&quot;Unit test of main method&quot;, () {\n    const int nextIntParameter = 256;\n    const int aRGBParameter = 74;\n    when(() =&gt; mockRandom.nextInt(nextIntParameter)).thenReturn(aRGBParameter);\n// final _MyHomePageState testOfColorChanger =const MyHomePage();\n// testOfColorChanger\n    final BackgroundColor backgroundColor = BackgroundColor();\n    expect(backgroundColor.background, const Color.fromARGB(0, 0, 0, 0));\n    backgroundColor.colorChanger();\n    expect(\n      backgroundColor.background,\n      const Color.fromARGB(\n          aRGBParameter, aRGBParameter, aRGBParameter, aRGBParameter),\n    );\n  });\n}\n</code></pre>\n<p>I got some help asking around about seeding but not able to understand exactly how we can do this.\nThe whole code is from the repository <a href=\"https://github.com/theashggl/solid_software\" rel=\"nofollow noreferrer\">https://github.com/theashggl/solid_software</a></p>\n",
        "codigo": [
            " ///Method responsible for change of colour of background.\n  Color? colorChanger() {\n    const parameterRandom = 100;\n    const parameterNextInt = 256;\n    int parameterARGB = 0;\n    final parameterARGB2 = Random().nextInt(parameterNextInt);\n    final parameterARGB3 = Random().nextInt(parameterNextInt);\n    final parameterARGB4 = Random().nextInt(parameterNextInt);\n\n    if (background ==\n        Color.fromARGB(\n          parameterARGB,\n          parameterARGB,\n          parameterARGB,\n          parameterARGB,\n        ))\n    //Case created done for the widget testing so that 1st time the color is,\n    // what is specified in widget test and the second time it is all random\n    {\n      background = Color.fromARGB(\n        Random(parameterRandom).nextInt(parameterNextInt),\n        Random(parameterRandom).nextInt(parameterNextInt),\n        Random(parameterRandom).nextInt(parameterNextInt),\n        Random(parameterRandom).nextInt(parameterNextInt),\n      );\n    } else {\n      parameterARGB = Random().nextInt(parameterNextInt);\n      background = Color.fromARGB(\n        parameterARGB,\n        parameterARGB2,\n        parameterARGB3,\n        parameterARGB4,\n      );\n    }\n\n    return background;\n  }\n",
            "import 'dart:math';\nimport 'dart:ui';\n\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mocktail/mocktail.dart';\nimport 'package:solid_software/Model/background_color.dart';\n\nclass MockRandom extends Mock implements Random {}\n\nvoid main() {\n  late MockRandom mockRandom;\n  setUp(() {\n    mockRandom = MockRandom();\n  });\n  test(\"Unit test of main method\", () {\n    const int nextIntParameter = 256;\n    const int aRGBParameter = 74;\n    when(() => mockRandom.nextInt(nextIntParameter)).thenReturn(aRGBParameter);\n// final _MyHomePageState testOfColorChanger =const MyHomePage();\n// testOfColorChanger\n    final BackgroundColor backgroundColor = BackgroundColor();\n    expect(backgroundColor.background, const Color.fromARGB(0, 0, 0, 0));\n    backgroundColor.colorChanger();\n    expect(\n      backgroundColor.background,\n      const Color.fromARGB(\n          aRGBParameter, aRGBParameter, aRGBParameter, aRGBParameter),\n    );\n  });\n}\n"
        ]
    },
    {
        "titulo": "Flutter - How to select any one item in ListView Builder during integration testing?",
        "score": 1,
        "views": 701,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "integration-testing"
        ],
        "link": "https://stackoverflow.com/questions/76482418/flutter-how-to-select-any-one-item-in-listview-builder-during-integration-test",
        "conteudo_html": "<p>I'm testing my application using the &quot;integration testing&quot; method.</p>\n<p>Currently, I'm testing the order history page. That page contains a list of containers wrapped with a gesture detector using the <strong>ListView Builder widget</strong>.</p>\n<p>For testing, I set the condition to find the order history page. But I'm not sure how to give a condition to select one gesture detector.</p>\n<p>For example, when testing the code it redirects to the order history page. That page has several containers. To redirect to the next page it has to click first or second or any one container. How to achieve this?</p>\n<p>Doubt line:</p>\n<pre><code>await tester.tap(find.byKey(const Key(&quot;OrderInfo&quot;)));\n\nOr\n\nawait tester.tap(find.byType(GestureDetector));\n\n</code></pre>\n<p>Full test code:</p>\n<pre><code>import 'package:flutter_test/flutter_test.dart';\nimport 'package:integration_test/integration_test.dart';\nimport 'package:toyzania_app/main.dart' as app;\n\nvoid main() {\n  IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n\n  group('end-to-end test', () {\n\n testWidgets('verify settings screen',\n        (tester) async {\n      app.main();\n\n      await tester.pumpAndSettle();\n      await Future.delayed(const Duration(seconds: 2));\n      await tester.tap(find.byKey(const Key('settingspage')));\n\n      await tester.pumpAndSettle();\n      await Future.delayed(const Duration(seconds: 2));\n      expect(find.byType(OrderHistory), findsOneWidget);\n      await Future.delayed(const Duration(seconds: 2));\n\n      await tester.tap(find.byType(GestureDetector));\n\n      await Future.delayed(const Duration(seconds: 2));\n      await tester.pumpAndSettle();\n      await Future.delayed(const Duration(seconds: 2));\n      expect(find.byType(OrderInfo), findsOneWidget);\n\n    });\n   \n  });\n}\n\n</code></pre>\n<p>Order page code:</p>\n<pre><code>ListView.builder(\n                        itemCount: productController\n                            .orders.value.data!.customer!.orders!.edges!.length,\n                        itemBuilder: (context, index) {\n                          return GestureDetector(\n                            key: const ValueKey(&quot;OrderInfo&quot;),\n                            onTap: () {\n                              Get.to(OrderInfo(productController.orders.value\n                                  .data!.customer!.orders!.edges![index]));\n                            },\n                            child: Padding(\n                              padding: const EdgeInsets.only(\n                                top: 25,\n                                left: 15,\n                                right: 15,\n                              ),\n                              child: Container(\n                                decoration: BoxDecoration(\n                                    border: Border.all(\n                                      width: 0.5,\n                                      color: Color.fromARGB(255, 212, 212, 212),\n                                    ),\n                                    borderRadius:\n                                        BorderRadius.all(Radius.circular(5))),\n                                child: Column(\n                                  mainAxisAlignment: MainAxisAlignment.start,\n                                  crossAxisAlignment: CrossAxisAlignment.start,\n                                  children: [\n                                    Row(\n                                      children: [\n                                        Padding(\n                                          padding: const EdgeInsets.only(\n                                              top: 10, left: 15, right: 15),\n                                          child: SizedBox(\n                                            width: 80.0,\n                                            height: 80.0,\n                                            child: Row(\n                                              mainAxisAlignment:\n                                                  MainAxisAlignment.center,\n                                              crossAxisAlignment:\n                                                  CrossAxisAlignment.center,\n                                              children: [\n                                                if (productController\n                                                        .orders\n                                                        .value\n                                                        .data!\n                                                        .customer!\n                                                        .orders!\n                                                        .edges![index]\n                                                        .node!\n                                                        .lineItems!\n                                                        .edges![0]\n                                                        .node1!\n                                                        .variant !=\n                                                    null)\n                                                  if (productController\n                                                          .orders\n                                                          .value\n                                                          .data!\n                                                          .customer!\n                                                          .orders!\n                                                          .edges![index]\n                                                          .node!\n                                                          .lineItems!\n                                                          .edges![0]\n                                                          .node1!\n                                                          .variant!\n                                                          .image !=\n                                                      null)\n                                                    Container(\n                                                      width: 80.0,\n                                                      height: 70.0,\n                                                      decoration: BoxDecoration(\n                                                          image: DecorationImage(\n                                                              image: CachedNetworkImageProvider(\n                                                                  productController\n                                                                      .orders\n                                                                      .value\n                                                                      .data!\n                                                                      .customer!\n                                                                      .orders!\n                                                                      .edges![\n                                                                          index]\n                                                                      .node!\n                                                                      .lineItems!\n                                                                      .edges![0]\n                                                                      .node1!\n                                                                      .variant!\n                                                                      .image!\n                                                                      .url\n                                                                      .toString()),\n                                                              fit:\n                                                                  BoxFit.cover),\n                                                          border: Border.all(\n                                                            width: 0.5,\n                                                            color: Color(\n                                                                0xffe3e3e3),\n                                                          ),\n                                                          borderRadius:\n                                                              BorderRadius.all(\n                                                                  Radius\n                                                                      .circular(\n                                                                          5))),\n                                                    )\n                                                  else\n                                                    Container(\n                                                      width: 80.0,\n                                                      height: 110.0,\n                                                      decoration: BoxDecoration(\n                                                          border: Border.all(\n                                                            width: 0.5,\n                                                            color: Color(\n                                                                0xffe3e3e3),\n                                                          ),\n                                                          borderRadius:\n                                                              BorderRadius.all(\n                                                                  Radius\n                                                                      .circular(\n                                                                          5))),\n                                                      child: Center(\n                                                        child: Image.asset(\n                                                          'assets/images/logo.png',\n                                                        ),\n                                                      ),\n                                                    ),\n                                              ],\n                                            ),\n                                          ),\n                                        ),\n                                        Padding(\n                                          padding: const EdgeInsets.only(\n                                              top: 0, left: 15, right: 15),\n                                          child: Container(\n                                            width: Get.width / 2,\n                                            child: Text(\n                                              productController\n                                                  .orders\n                                                  .value\n                                                  .data!\n                                                  .customer!\n                                                  .orders!\n                                                  .edges![index]\n                                                  .node!\n                                                  .lineItems!\n                                                  .edges![0]\n                                                  .node1!\n                                                  .title\n                                                  .toString(),\n                                              overflow: TextOverflow.clip,\n                                              style: GoogleFonts.poppins(\n                                                  fontSize: 14,\n                                                  fontWeight: FontWeight.w500,\n                                                  letterSpacing: 0.2),\n                                            ),\n                                          ),\n                                        ),\n                                      ],\n                                    ),\n                                    Padding(\n                                      padding: const EdgeInsets.only(\n                                          top: 20, left: 15, right: 15),\n                                      child: Row(\n                                        mainAxisAlignment:\n                                            MainAxisAlignment.spaceBetween,\n                                        children: [\n                                          Text(\n                                              '${'createdon'.tr}: ${productController.orders.value.data!.customer!.orders!.edges![index].node!.displayProcessedAt.toString()}',\n                                              style: GoogleFonts.poppins(\n                                                  color:\n                                                      const Color(0xff6e8498),\n                                                  fontSize: 12,\n                                                  fontWeight: FontWeight.w500,\n                                                  letterSpacing: 0.2)),\n                                          Padding(\n                                            padding: const EdgeInsets.only(\n                                                top: 0, left: 0),\n                                            child: Container(\n                                              width: 100,\n                                              child: Text(\n                                                  &quot;${&quot;orderno&quot;.tr}: ${productController.orders.value.data!.customer!.orders!.edges![index].node!.orderNumber.toString()}&quot;,\n                                                  overflow: TextOverflow.clip,\n                                                  style: GoogleFonts.poppins(\n                                                      color: const Color(\n                                                          0xff6e8498),\n                                                      fontSize: 12,\n                                                      fontWeight:\n                                                          FontWeight.w500,\n                                                      letterSpacing: 0.2)),\n                                            ),\n                                          ),\n                                        ],\n                                      ),\n                                    ),\n                                    Padding(\n                                      padding: const EdgeInsets.only(\n                                          top: 10, left: 10, right: 10),\n                                      child: SizedBox(\n                                        width: 350.0,\n                                        height: 70.0,\n                                        child: Card(\n                                          color: Color(0xffF0EAFF),\n                                          child: Padding(\n                                            padding: const EdgeInsets.only(\n                                                top: 8, left: 5),\n                                            child: Row(\n                                              mainAxisAlignment:\n                                                  MainAxisAlignment.spaceAround,\n                                              children: [\n                                                Padding(\n                                                  padding:\n                                                      const EdgeInsets.only(\n                                                          top: 5, left: 0),\n                                                  child: Column(\n                                                    children: [\n                                                      Text('totalamount'.tr,\n                                                          style: GoogleFonts\n                                                              .poppins(\n                                                            color: Color(\n                                                                0xff6e8498),\n                                                            fontSize: 12,\n                                                            fontWeight:\n                                                                FontWeight.w500,\n                                                            letterSpacing: 0.3,\n                                                          )),\n                                                      Text(\n                                                          'BHD${&quot; ${productController.orders.value.data!.customer!.orders!.edges![index].node!.lineItems!.edges![0].node1!.originalTotalPrice!.amount}&quot;}',\n                                                          overflow:\n                                                              TextOverflow.clip,\n                                                          style: GoogleFonts\n                                                              .poppins(\n                                                            color: Color(\n                                                                0xff000000),\n                                                            fontSize: 14,\n                                                            fontWeight:\n                                                                FontWeight.w500,\n                                                            letterSpacing: 0.3,\n                                                          )),\n                                                    ],\n                                                  ),\n                                                ),\n}),\n\n</code></pre>\n",
        "codigo": [
            "await tester.tap(find.byKey(const Key(\"OrderInfo\")));\n\nOr\n\nawait tester.tap(find.byType(GestureDetector));\n\n",
            "import 'package:flutter_test/flutter_test.dart';\nimport 'package:integration_test/integration_test.dart';\nimport 'package:toyzania_app/main.dart' as app;\n\nvoid main() {\n  IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n\n  group('end-to-end test', () {\n\n testWidgets('verify settings screen',\n        (tester) async {\n      app.main();\n\n      await tester.pumpAndSettle();\n      await Future.delayed(const Duration(seconds: 2));\n      await tester.tap(find.byKey(const Key('settingspage')));\n\n      await tester.pumpAndSettle();\n      await Future.delayed(const Duration(seconds: 2));\n      expect(find.byType(OrderHistory), findsOneWidget);\n      await Future.delayed(const Duration(seconds: 2));\n\n      await tester.tap(find.byType(GestureDetector));\n\n      await Future.delayed(const Duration(seconds: 2));\n      await tester.pumpAndSettle();\n      await Future.delayed(const Duration(seconds: 2));\n      expect(find.byType(OrderInfo), findsOneWidget);\n\n    });\n   \n  });\n}\n\n",
            "ListView.builder(\n                        itemCount: productController\n                            .orders.value.data!.customer!.orders!.edges!.length,\n                        itemBuilder: (context, index) {\n                          return GestureDetector(\n                            key: const ValueKey(\"OrderInfo\"),\n                            onTap: () {\n                              Get.to(OrderInfo(productController.orders.value\n                                  .data!.customer!.orders!.edges![index]));\n                            },\n                            child: Padding(\n                              padding: const EdgeInsets.only(\n                                top: 25,\n                                left: 15,\n                                right: 15,\n                              ),\n                              child: Container(\n                                decoration: BoxDecoration(\n                                    border: Border.all(\n                                      width: 0.5,\n                                      color: Color.fromARGB(255, 212, 212, 212),\n                                    ),\n                                    borderRadius:\n                                        BorderRadius.all(Radius.circular(5))),\n                                child: Column(\n                                  mainAxisAlignment: MainAxisAlignment.start,\n                                  crossAxisAlignment: CrossAxisAlignment.start,\n                                  children: [\n                                    Row(\n                                      children: [\n                                        Padding(\n                                          padding: const EdgeInsets.only(\n                                              top: 10, left: 15, right: 15),\n                                          child: SizedBox(\n                                            width: 80.0,\n                                            height: 80.0,\n                                            child: Row(\n                                              mainAxisAlignment:\n                                                  MainAxisAlignment.center,\n                                              crossAxisAlignment:\n                                                  CrossAxisAlignment.center,\n                                              children: [\n                                                if (productController\n                                                        .orders\n                                                        .value\n                                                        .data!\n                                                        .customer!\n                                                        .orders!\n                                                        .edges![index]\n                                                        .node!\n                                                        .lineItems!\n                                                        .edges![0]\n                                                        .node1!\n                                                        .variant !=\n                                                    null)\n                                                  if (productController\n                                                          .orders\n                                                          .value\n                                                          .data!\n                                                          .customer!\n                                                          .orders!\n                                                          .edges![index]\n                                                          .node!\n                                                          .lineItems!\n                                                          .edges![0]\n                                                          .node1!\n                                                          .variant!\n                                                          .image !=\n                                                      null)\n                                                    Container(\n                                                      width: 80.0,\n                                                      height: 70.0,\n                                                      decoration: BoxDecoration(\n                                                          image: DecorationImage(\n                                                              image: CachedNetworkImageProvider(\n                                                                  productController\n                                                                      .orders\n                                                                      .value\n                                                                      .data!\n                                                                      .customer!\n                                                                      .orders!\n                                                                      .edges![\n                                                                          index]\n                                                                      .node!\n                                                                      .lineItems!\n                                                                      .edges![0]\n                                                                      .node1!\n                                                                      .variant!\n                                                                      .image!\n                                                                      .url\n                                                                      .toString()),\n                                                              fit:\n                                                                  BoxFit.cover),\n                                                          border: Border.all(\n                                                            width: 0.5,\n                                                            color: Color(\n                                                                0xffe3e3e3),\n                                                          ),\n                                                          borderRadius:\n                                                              BorderRadius.all(\n                                                                  Radius\n                                                                      .circular(\n                                                                          5))),\n                                                    )\n                                                  else\n                                                    Container(\n                                                      width: 80.0,\n                                                      height: 110.0,\n                                                      decoration: BoxDecoration(\n                                                          border: Border.all(\n                                                            width: 0.5,\n                                                            color: Color(\n                                                                0xffe3e3e3),\n                                                          ),\n                                                          borderRadius:\n                                                              BorderRadius.all(\n                                                                  Radius\n                                                                      .circular(\n                                                                          5))),\n                                                      child: Center(\n                                                        child: Image.asset(\n                                                          'assets/images/logo.png',\n                                                        ),\n                                                      ),\n                                                    ),\n                                              ],\n                                            ),\n                                          ),\n                                        ),\n                                        Padding(\n                                          padding: const EdgeInsets.only(\n                                              top: 0, left: 15, right: 15),\n                                          child: Container(\n                                            width: Get.width / 2,\n                                            child: Text(\n                                              productController\n                                                  .orders\n                                                  .value\n                                                  .data!\n                                                  .customer!\n                                                  .orders!\n                                                  .edges![index]\n                                                  .node!\n                                                  .lineItems!\n                                                  .edges![0]\n                                                  .node1!\n                                                  .title\n                                                  .toString(),\n                                              overflow: TextOverflow.clip,\n                                              style: GoogleFonts.poppins(\n                                                  fontSize: 14,\n                                                  fontWeight: FontWeight.w500,\n                                                  letterSpacing: 0.2),\n                                            ),\n                                          ),\n                                        ),\n                                      ],\n                                    ),\n                                    Padding(\n                                      padding: const EdgeInsets.only(\n                                          top: 20, left: 15, right: 15),\n                                      child: Row(\n                                        mainAxisAlignment:\n                                            MainAxisAlignment.spaceBetween,\n                                        children: [\n                                          Text(\n                                              '${'createdon'.tr}: ${productController.orders.value.data!.customer!.orders!.edges![index].node!.displayProcessedAt.toString()}',\n                                              style: GoogleFonts.poppins(\n                                                  color:\n                                                      const Color(0xff6e8498),\n                                                  fontSize: 12,\n                                                  fontWeight: FontWeight.w500,\n                                                  letterSpacing: 0.2)),\n                                          Padding(\n                                            padding: const EdgeInsets.only(\n                                                top: 0, left: 0),\n                                            child: Container(\n                                              width: 100,\n                                              child: Text(\n                                                  \"${\"orderno\".tr}: ${productController.orders.value.data!.customer!.orders!.edges![index].node!.orderNumber.toString()}\",\n                                                  overflow: TextOverflow.clip,\n                                                  style: GoogleFonts.poppins(\n                                                      color: const Color(\n                                                          0xff6e8498),\n                                                      fontSize: 12,\n                                                      fontWeight:\n                                                          FontWeight.w500,\n                                                      letterSpacing: 0.2)),\n                                            ),\n                                          ),\n                                        ],\n                                      ),\n                                    ),\n                                    Padding(\n                                      padding: const EdgeInsets.only(\n                                          top: 10, left: 10, right: 10),\n                                      child: SizedBox(\n                                        width: 350.0,\n                                        height: 70.0,\n                                        child: Card(\n                                          color: Color(0xffF0EAFF),\n                                          child: Padding(\n                                            padding: const EdgeInsets.only(\n                                                top: 8, left: 5),\n                                            child: Row(\n                                              mainAxisAlignment:\n                                                  MainAxisAlignment.spaceAround,\n                                              children: [\n                                                Padding(\n                                                  padding:\n                                                      const EdgeInsets.only(\n                                                          top: 5, left: 0),\n                                                  child: Column(\n                                                    children: [\n                                                      Text('totalamount'.tr,\n                                                          style: GoogleFonts\n                                                              .poppins(\n                                                            color: Color(\n                                                                0xff6e8498),\n                                                            fontSize: 12,\n                                                            fontWeight:\n                                                                FontWeight.w500,\n                                                            letterSpacing: 0.3,\n                                                          )),\n                                                      Text(\n                                                          'BHD${\" ${productController.orders.value.data!.customer!.orders!.edges![index].node!.lineItems!.edges![0].node1!.originalTotalPrice!.amount}\"}',\n                                                          overflow:\n                                                              TextOverflow.clip,\n                                                          style: GoogleFonts\n                                                              .poppins(\n                                                            color: Color(\n                                                                0xff000000),\n                                                            fontSize: 14,\n                                                            fontWeight:\n                                                                FontWeight.w500,\n                                                            letterSpacing: 0.3,\n                                                          )),\n                                                    ],\n                                                  ),\n                                                ),\n}),\n\n"
        ]
    },
    {
        "titulo": "Flutter Integration Testing - The non-nullable local variable &#39;driver&#39; must be assigned before it can be used",
        "score": 0,
        "views": 75,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "integration-testing"
        ],
        "link": "https://stackoverflow.com/questions/76471855/flutter-integration-testing-the-non-nullable-local-variable-driver-must-be-a",
        "conteudo_html": "<p>I'm a flutter beginner. I'm testing my application in 'integration testing' mode. I have added the required packages. I'm getting the below error in the test code. Can anyone help me solve this?</p>\n<p>Error:</p>\n<p>The non-nullable local variable '<strong>driver</strong>' must be assigned before it can be used.\nTry giving it an initializer expression, or ensure that it's assigned on every execution</p>\n<p>Error lines:</p>\n<pre><code>FlutterDriver driver;\n    Future&lt;bool&gt; isPresent(SerializableFinder byValueKey,\n    {Duration timeout = const Duration(seconds: 1)}) async {\n      try {\n        await driver .waitFor(byValueKey, timeout: timeout);\n        return true;\n      } catch (exception){\n        return false;\n      }\n\ntearDownAll(() async {\n      if (driver != null) {\n        driver.close();\n      }\n    });\n\n</code></pre>\n<p>app test code:</p>\n<pre><code>import 'package:flutter_driver/flutter_driver.dart';\nimport 'package:test/test.dart';\n\n\nvoid main() {\n\n  group('Toyzania App', () {\n    \n    //login screen\n    final emailField = find.byValueKey('Email');\n    final passwordField = find.byValueKey('Password');\n    final loginButton = find.byValueKey('Login');\n    final CreateAccountButton = find.byValueKey('CreateAccount');\n    final logoutButton = find.byValueKey('Logout');\n\n\n\n    FlutterDriver driver;\n    Future&lt;bool&gt; isPresent(SerializableFinder byValueKey,\n    {Duration timeout = const Duration(seconds: 1)}) async {\n      try {\n        await driver .waitFor(byValueKey, timeout: timeout);\n        return true;\n      } catch (exception){\n        return false;\n      }\n    }\n\n    setUpAll(() async {\n      driver = await FlutterDriver.connect();\n    });\n\n    tearDownAll(() async {\n      if (driver != null) {\n        driver.close();\n      }\n    });\n\n    test('login', () async{\n      if(await isPresent(logoutButton)){\n        await driver.tap(logoutButton);\n      }\n\n      await driver.tap(emailField);\n      await driver.enterText('test11@gmail.com');\n\n      await driver.tap(passwordField);\n      await driver.enterText('123456');\n\n      await driver.tap(loginButton);\n      await driver.waitFor(find.text(&quot;My Account&quot;));\n    });\n\n  });\n}\n</code></pre>\n",
        "codigo": [
            "FlutterDriver driver;\n    Future<bool> isPresent(SerializableFinder byValueKey,\n    {Duration timeout = const Duration(seconds: 1)}) async {\n      try {\n        await driver .waitFor(byValueKey, timeout: timeout);\n        return true;\n      } catch (exception){\n        return false;\n      }\n\ntearDownAll(() async {\n      if (driver != null) {\n        driver.close();\n      }\n    });\n\n",
            "import 'package:flutter_driver/flutter_driver.dart';\nimport 'package:test/test.dart';\n\n\nvoid main() {\n\n  group('Toyzania App', () {\n    \n    //login screen\n    final emailField = find.byValueKey('Email');\n    final passwordField = find.byValueKey('Password');\n    final loginButton = find.byValueKey('Login');\n    final CreateAccountButton = find.byValueKey('CreateAccount');\n    final logoutButton = find.byValueKey('Logout');\n\n\n\n    FlutterDriver driver;\n    Future<bool> isPresent(SerializableFinder byValueKey,\n    {Duration timeout = const Duration(seconds: 1)}) async {\n      try {\n        await driver .waitFor(byValueKey, timeout: timeout);\n        return true;\n      } catch (exception){\n        return false;\n      }\n    }\n\n    setUpAll(() async {\n      driver = await FlutterDriver.connect();\n    });\n\n    tearDownAll(() async {\n      if (driver != null) {\n        driver.close();\n      }\n    });\n\n    test('login', () async{\n      if(await isPresent(logoutButton)){\n        await driver.tap(logoutButton);\n      }\n\n      await driver.tap(emailField);\n      await driver.enterText('test11@gmail.com');\n\n      await driver.tap(passwordField);\n      await driver.enterText('123456');\n\n      await driver.tap(loginButton);\n      await driver.waitFor(find.text(\"My Account\"));\n    });\n\n  });\n}\n"
        ]
    },
    {
        "titulo": "Bad state: GetIt: Object/factory with type &lt;&gt; is not registered inside GetIt",
        "score": 4,
        "views": 14965,
        "respostas": 2,
        "tags": [
            "dart",
            "testing",
            "dependency-injection",
            "get-it"
        ],
        "link": "https://stackoverflow.com/questions/76462865/bad-state-getit-object-factory-with-type-is-not-registered-inside-getit",
        "conteudo_html": "<p>I am trying to use dependency injection with <code>get_it</code> package, in order to make unit tests.</p>\n<p>I am using these dependencies :</p>\n<pre class=\"lang-yaml prettyprint-override\"><code>get_it: ^7.6.0\ninjectable_generator: ^2.1.6\n</code></pre>\n<p>My <code>main</code> function looks like this :</p>\n<pre class=\"lang-dart prettyprint-override\"><code>void main(List&lt;String&gt; args) async {\n  // Configure injection\n  await setup(Env.test);\n  await getIt.allReady();\n\n  // [...]\n}\n</code></pre>\n<p>I wait for the setup with the <code>test</code> environment, and I wait for it to be <code>allReady</code>.</p>\n<p>The file uses <code>injection.dart</code>, which contains the <code>setup()</code> function :</p>\n<pre class=\"lang-dart prettyprint-override\"><code>GetIt getIt = GetIt.instance;\n\n@InjectableInit(preferRelativeImports: false)\nsetup(String env) {\n  getIt.init();\n  if (env == Env.test) {\n    getIt.registerLazySingleton&lt;IAuthRepository&gt;(() =&gt; TestAuthRepository());\n  } else {\n    getIt.registerLazySingleton&lt;IAuthRepository&gt;(() =&gt; AuthRepository());\n  }\n}\n\nabstract class Env {\n  // static const dev = 'dev';\n  static const prod = 'prod';\n  static const test = 'test';\n}\n\n</code></pre>\n<p>As you can see, I want to use <code>AuthRepository</code> for production (will call a database), or <code>TestAuthRepository</code> for unit tests (will not call the database).</p>\n<p>I declared theses class here, in a file <code>auth_repository.dart</code> :</p>\n<pre class=\"lang-dart prettyprint-override\"><code>abstract class IAuthRepository {\n  Future&lt;int&gt; createNewUser({\n    required String login,\n    required String email,\n    required String password,\n  });\n}\n\n@Injectable(as: IAuthRepository, env: [Env.prod])\nclass AuthRepository extends BaseRepository implements IAuthRepository {\n\n  @override\n  Future&lt;int&gt; createNewUser({\n    required String login,\n    required String email,\n    required String password,\n  }) async {\n    try {\n      final connection = await getDatabaseConnection();\n\n      // ... (make the database call) ...\n\n      return 1;\n    } catch (exception) {\n      print(exception);\n      return -1;\n    }\n  }\n}\n\n@Injectable(as: IAuthRepository, env: [Env.test])\nclass TestAuthRepository extends BaseRepository implements IAuthRepository {\n\n  @override\n  Future&lt;int&gt; createNewUser({required String login, required String email, required String password}) {\n    return Future.value(2);\n  }\n}\n</code></pre>\n<p>For now, the testing function <code>createNewUser</code> will only return 2.</p>\n<p>I am launching my test here :</p>\n<pre class=\"lang-dart prettyprint-override\"><code>void main() {\n\n  AuthController authController = AuthController();\n\n  test('Registration success', () async {\n\n    int response = await authController.register(\n      login: 'test',\n      email: 'email@mail.com',\n      password: 'Testing193!',\n      passwordConfirmation: 'Testing193!',\n    );\n    expect(response, 1);\n  });\n  \n  // ...\n}\n</code></pre>\n<p>This test calls for <code>authController.register()</code>, which is here :</p>\n<pre class=\"lang-dart prettyprint-override\"><code>  Future&lt;int&gt; register({\n    required String login,\n    required String email,\n    required String password,\n    required String passwordConfirmation,\n  }) async {\n\n    // [...]\n\n    // IAuthRepository authRepository = getIt&lt;IAuthRepository&gt;();\n    IAuthRepository authRepository = getIt.get&lt;IAuthRepository&gt;();\n    return await authRepository.createNewUser(\n      login: login,\n      email: email,\n      password: password,\n    );\n  }\n</code></pre>\n<p>I try to retrieve an <code>IAuthRepository</code> instance with <code>getIt</code>.</p>\n<p>However, when I am launching my tests, I get this error :</p>\n<pre><code>00:00 +0 -1: Registration success [E]                                                                                                                     \n  Bad state: GetIt: Object/factory with type IAuthRepository is not registered inside GetIt. \n  (Did you accidentally do GetIt sl=GetIt.instance(); instead of GetIt sl=GetIt.instance;\n  Did you forget to register it?)\n  package:get_it/get_it_impl.dart 12:19                 throwIfNot\n  package:get_it/get_it_impl.dart 395:5                 _GetItImplementation._findFactoryByNameAndType\n  package:get_it/get_it_impl.dart 423:29                _GetItImplementation.get\n  package:toast/controllers/auth_controller.dart 31:44  AuthController.register\n  test/controllers/auth_controller_test.dart 23:41      main.&lt;fn&gt;\n</code></pre>\n<p>I thought I registered my <code>IAuthRepository</code> class, however it does not work. How can I register it ?</p>\n",
        "codigo": [
            "get_it",
            "get_it: ^7.6.0\ninjectable_generator: ^2.1.6\n",
            "main",
            "void main(List<String> args) async {\n  // Configure injection\n  await setup(Env.test);\n  await getIt.allReady();\n\n  // [...]\n}\n",
            "test",
            "allReady",
            "injection.dart",
            "setup()",
            "GetIt getIt = GetIt.instance;\n\n@InjectableInit(preferRelativeImports: false)\nsetup(String env) {\n  getIt.init();\n  if (env == Env.test) {\n    getIt.registerLazySingleton<IAuthRepository>(() => TestAuthRepository());\n  } else {\n    getIt.registerLazySingleton<IAuthRepository>(() => AuthRepository());\n  }\n}\n\nabstract class Env {\n  // static const dev = 'dev';\n  static const prod = 'prod';\n  static const test = 'test';\n}\n\n",
            "AuthRepository",
            "TestAuthRepository",
            "auth_repository.dart",
            "abstract class IAuthRepository {\n  Future<int> createNewUser({\n    required String login,\n    required String email,\n    required String password,\n  });\n}\n\n@Injectable(as: IAuthRepository, env: [Env.prod])\nclass AuthRepository extends BaseRepository implements IAuthRepository {\n\n  @override\n  Future<int> createNewUser({\n    required String login,\n    required String email,\n    required String password,\n  }) async {\n    try {\n      final connection = await getDatabaseConnection();\n\n      // ... (make the database call) ...\n\n      return 1;\n    } catch (exception) {\n      print(exception);\n      return -1;\n    }\n  }\n}\n\n@Injectable(as: IAuthRepository, env: [Env.test])\nclass TestAuthRepository extends BaseRepository implements IAuthRepository {\n\n  @override\n  Future<int> createNewUser({required String login, required String email, required String password}) {\n    return Future.value(2);\n  }\n}\n",
            "createNewUser",
            "void main() {\n\n  AuthController authController = AuthController();\n\n  test('Registration success', () async {\n\n    int response = await authController.register(\n      login: 'test',\n      email: 'email@mail.com',\n      password: 'Testing193!',\n      passwordConfirmation: 'Testing193!',\n    );\n    expect(response, 1);\n  });\n  \n  // ...\n}\n",
            "authController.register()",
            "  Future<int> register({\n    required String login,\n    required String email,\n    required String password,\n    required String passwordConfirmation,\n  }) async {\n\n    // [...]\n\n    // IAuthRepository authRepository = getIt<IAuthRepository>();\n    IAuthRepository authRepository = getIt.get<IAuthRepository>();\n    return await authRepository.createNewUser(\n      login: login,\n      email: email,\n      password: password,\n    );\n  }\n",
            "IAuthRepository",
            "getIt",
            "00:00 +0 -1: Registration success [E]                                                                                                                     \n  Bad state: GetIt: Object/factory with type IAuthRepository is not registered inside GetIt. \n  (Did you accidentally do GetIt sl=GetIt.instance(); instead of GetIt sl=GetIt.instance;\n  Did you forget to register it?)\n  package:get_it/get_it_impl.dart 12:19                 throwIfNot\n  package:get_it/get_it_impl.dart 395:5                 _GetItImplementation._findFactoryByNameAndType\n  package:get_it/get_it_impl.dart 423:29                _GetItImplementation.get\n  package:toast/controllers/auth_controller.dart 31:44  AuthController.register\n  test/controllers/auth_controller_test.dart 23:41      main.<fn>\n",
            "IAuthRepository"
        ]
    },
    {
        "titulo": "Issue with Mocktail and Dart Frog",
        "score": 0,
        "views": 209,
        "respostas": 1,
        "tags": [
            "dart",
            "testing",
            "dart-frog"
        ],
        "link": "https://stackoverflow.com/questions/76205182/issue-with-mocktail-and-dart-frog",
        "conteudo_html": "<p>I'm new to testing with anything other than Postman and having a problem with tests on my Dart Frog API. Tests on basic endpoints that return a static value work but this one fails with the error &quot;<strong>type 'Null' is not a subtype of type 'Request'</strong>&quot;:</p>\n<pre><code>class _MockRequestContext extends Mock implements RequestContext {}\n\nvoid main() {\n  group('GET /api/node_status', () {\n    test(&quot;responds with a 403 if verb isn't GET&quot;, () async {\n      const method = 'POST';\n      final context = _MockRequestContext();\n      when(() =&gt; context.read&lt;String&gt;()).thenReturn(method);\n      final response = await route.onRequest(context);\n      expect(response.statusCode, equals(HttpStatus.forbidden));\n    });\n    test('responds with a 200 and {&quot;status&quot;:&quot;open&quot;}.', () async {\n      const method = 'GET';\n      final context = _MockRequestContext();\n      when(() =&gt; context.request.method.value).thenReturn(method);\n      final response = await route.onRequest(context);\n      expect(response.statusCode, equals(HttpStatus.ok));\n      expect(\n        response.body(),\n        completion(equals('{&quot;status&quot;:&quot;open&quot;}')),\n      );\n    });\n  });\n}\n</code></pre>\n<p>And my endpoint code is:</p>\n<pre><code>Future&lt;Response&gt; onRequest(RequestContext context) async {\n  // Reject any method other than GET requests\n  if (context.request.method.value != 'GET') {\n    return Response(statusCode: 403);\n  }\n  // Return the node status set in main.dart from config.yaml\n  final nodeStatus = &lt;String, dynamic&gt;{'status': globals.nodeStatus};\n  return Response(body: jsonEncode(nodeStatus));\n}\n\n</code></pre>\n<p>I've tried setting the value of <code>nodeStatus</code> to a static value with no luck. I'm sure it's something pretty simple, but I can't find much documentation on using Mocktail with Dart Frog aside from some basic examples on the Dart Frog site that I based my tests on.</p>\n<p><strong>Edit</strong></p>\n<p>It was suggested to mock up the request first and I did so:</p>\n<pre><code>class _MockRequestContext extends Mock implements RequestContext {}\n\nclass _MockRequestObject extends Mock implements Request {}\n\nvoid main() {\n  group('node_status', () {\n    test('responds with a 403 if method is not GET&quot;.', () async {\n      final context = _MockRequestContext();\n      final mockRequest = _MockRequestObject();\n      when(() =&gt; context.request).thenReturn(mockRequest);\n      when(() =&gt; mockRequest.method.value).thenReturn('POST');\n      final response = await route.onRequest(context);\n      expect(response.statusCode, equals(HttpStatus.forbidden));\n    });\n  });\n}\n</code></pre>\n<p>Now my error is:</p>\n<p><code>type 'String' is not a subtype of type 'HttpMethod' test/routes/api/node_status_test.dart 11:7   _MockRequestObject.method routes/api/node_status.dart 8:23             onRequest test/routes/api/node_status_test.dart 20:36  main.&lt;fn&gt;.&lt;fn&gt;</code></p>\n",
        "codigo": [
            "class _MockRequestContext extends Mock implements RequestContext {}\n\nvoid main() {\n  group('GET /api/node_status', () {\n    test(\"responds with a 403 if verb isn't GET\", () async {\n      const method = 'POST';\n      final context = _MockRequestContext();\n      when(() => context.read<String>()).thenReturn(method);\n      final response = await route.onRequest(context);\n      expect(response.statusCode, equals(HttpStatus.forbidden));\n    });\n    test('responds with a 200 and {\"status\":\"open\"}.', () async {\n      const method = 'GET';\n      final context = _MockRequestContext();\n      when(() => context.request.method.value).thenReturn(method);\n      final response = await route.onRequest(context);\n      expect(response.statusCode, equals(HttpStatus.ok));\n      expect(\n        response.body(),\n        completion(equals('{\"status\":\"open\"}')),\n      );\n    });\n  });\n}\n",
            "Future<Response> onRequest(RequestContext context) async {\n  // Reject any method other than GET requests\n  if (context.request.method.value != 'GET') {\n    return Response(statusCode: 403);\n  }\n  // Return the node status set in main.dart from config.yaml\n  final nodeStatus = <String, dynamic>{'status': globals.nodeStatus};\n  return Response(body: jsonEncode(nodeStatus));\n}\n\n",
            "nodeStatus",
            "class _MockRequestContext extends Mock implements RequestContext {}\n\nclass _MockRequestObject extends Mock implements Request {}\n\nvoid main() {\n  group('node_status', () {\n    test('responds with a 403 if method is not GET\".', () async {\n      final context = _MockRequestContext();\n      final mockRequest = _MockRequestObject();\n      when(() => context.request).thenReturn(mockRequest);\n      when(() => mockRequest.method.value).thenReturn('POST');\n      final response = await route.onRequest(context);\n      expect(response.statusCode, equals(HttpStatus.forbidden));\n    });\n  });\n}\n",
            "type 'String' is not a subtype of type 'HttpMethod' test/routes/api/node_status_test.dart 11:7   _MockRequestObject.method routes/api/node_status.dart 8:23             onRequest test/routes/api/node_status_test.dart 20:36  main.<fn>.<fn>"
        ]
    },
    {
        "titulo": "Dart Test using type check on Exception is returning wrong result",
        "score": 0,
        "views": 239,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "dart-test"
        ],
        "link": "https://stackoverflow.com/questions/76103116/dart-test-using-type-check-on-exception-is-returning-wrong-result",
        "conteudo_html": "<p>I have this test that does fail when run. I am not sure why though since the <code>a</code> should be true. Can somebody explain me why?</p>\n<pre class=\"lang-dart prettyprint-override\"><code>  test('test error', () async {\n    const error = Exception;\n    const a = error is Exception;\n    expect(a, true);\n  });\n</code></pre>\n",
        "codigo": [
            "a",
            "  test('test error', () async {\n    const error = Exception;\n    const a = error is Exception;\n    expect(a, true);\n  });\n"
        ]
    },
    {
        "titulo": "Flutter Shared Preferences are not initializing in tests",
        "score": 1,
        "views": 485,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "unit-testing",
            "testing",
            "sharedpreferences"
        ],
        "link": "https://stackoverflow.com/questions/76019531/flutter-shared-preferences-are-not-initializing-in-tests",
        "conteudo_html": "<p>I am trying to write a test to check my ThreadService. It uses prefs and works okay in the app, but when I run a test I get a <code>LateInitializationError: Field prefs has not been initialized.</code> Here is the code of the test:</p>\n<pre><code>late SharedPreferences prefs;\nvoid main() async {\n  setUp(() async {\n    WidgetsFlutterBinding.ensureInitialized();\n    SharedPreferences.setMockInitialValues({\n        (...)\n    });\n    prefs = await SharedPreferences.getInstance();\n  });\n  test('test', () async {\n    final threadService = ThreadService(boardTag: 'pr', threadId: 1008826);\n\n    await threadService.getRoots();\n    (...)\n  });\n}\n</code></pre>\n<p>I have tried to move <code>prefs = await SharedPreferences.getInstance();</code> in test body, but it did not work.</p>\n",
        "codigo": [
            "LateInitializationError: Field prefs has not been initialized.",
            "late SharedPreferences prefs;\nvoid main() async {\n  setUp(() async {\n    WidgetsFlutterBinding.ensureInitialized();\n    SharedPreferences.setMockInitialValues({\n        (...)\n    });\n    prefs = await SharedPreferences.getInstance();\n  });\n  test('test', () async {\n    final threadService = ThreadService(boardTag: 'pr', threadId: 1008826);\n\n    await threadService.getRoots();\n    (...)\n  });\n}\n",
            "prefs = await SharedPreferences.getInstance();"
        ]
    },
    {
        "titulo": "How can I fix the error of &quot;unassigned variable&quot; even tho the variable has been initialized?",
        "score": 0,
        "views": 151,
        "respostas": 2,
        "tags": [
            "flutter",
            "dart",
            "unit-testing",
            "asynchronous",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/76005611/how-can-i-fix-the-error-of-unassigned-variable-even-tho-the-variable-has-been",
        "conteudo_html": "<p>I have this code :</p>\n<pre class=\"lang-dart prettyprint-override\"><code>void main() {\n  RethinkDb r = RethinkDb();\n  Connection connection;\n  UserService sut;\n\n  setUp(() async {\n    connection = await r.connect(host: &quot;127.0.0.1&quot;, port: 28015);\n    await createDb(r, connection);\n    sut = UserService(r, connection); // second line\n  });\n\n  test('creates a new user documenet in database', () async {\n    final user = User(\n      userName: 'test',\n      photoUrl: 'url',\n      active: true,\n      lastSeen: DateTime.now(),\n    );\n    final userWithId = await sut.connect(user); // first line\n    expect(userWithId.id, isNotEmpty);\n  });\n}\n</code></pre>\n<p>I'm having an error on &quot;first line&quot; that says that the <code>sut</code> variable must be initialized, but when you look at &quot;second line&quot;, you can see that the <code>sut</code> is indeed initialized, and the <code>setUp()</code> function is called before the <code>test()</code>.</p>\n",
        "codigo": [
            "void main() {\n  RethinkDb r = RethinkDb();\n  Connection connection;\n  UserService sut;\n\n  setUp(() async {\n    connection = await r.connect(host: \"127.0.0.1\", port: 28015);\n    await createDb(r, connection);\n    sut = UserService(r, connection); // second line\n  });\n\n  test('creates a new user documenet in database', () async {\n    final user = User(\n      userName: 'test',\n      photoUrl: 'url',\n      active: true,\n      lastSeen: DateTime.now(),\n    );\n    final userWithId = await sut.connect(user); // first line\n    expect(userWithId.id, isNotEmpty);\n  });\n}\n",
            "sut",
            "sut",
            "setUp()",
            "test()"
        ]
    },
    {
        "titulo": "open hive exception error in drawer test , flutter app",
        "score": 0,
        "views": 75,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/75862414/open-hive-exception-error-in-drawer-test-flutter-app",
        "conteudo_html": "<pre><code>import 'package:flutter/material.dart';\nimport 'package:flutter_localizations/flutter_localizations.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\nimport 'package:talawa/constants/custom_theme.dart';\nimport 'package:talawa/models/mainscreen_navigation_args.dart';\nimport 'package:talawa/services/graphql_config.dart';\nimport 'package:talawa/services/navigation_service.dart';\nimport 'package:talawa/services/size_config.dart';\nimport 'package:talawa/utils/app_localization.dart';\nimport 'package:talawa/view_model/main_screen_view_model.dart';\nimport 'package:talawa/views/main_screen.dart';\nimport 'package:talawa/widgets/custom_alert_dialog.dart';\nimport '../../helpers/test_helpers.dart';\nimport '../../helpers/test_helpers.mocks.dart';\nimport '../../helpers/test_locator.dart';\n\nclass MockBuildContext extends Mock implements BuildContext {}\n\nWidget createHomePageScreen() {\n  return MaterialApp(\n    locale: const Locale('en'),\n    localizationsDelegates: [\n      const AppLocalizationsDelegate(isTest: true),\n      GlobalMaterialLocalizations.delegate,\n      GlobalWidgetsLocalizations.delegate,\n    ],\n    themeMode: ThemeMode.light,\n    theme: TalawaTheme.lightTheme,\n    home: MainScreen(\n      key: const Key('MainScreen'),\n      mainScreenArgs: MainScreenArgs(mainScreenIndex: 0),\n    ),\n  );\n}\n\nvoid main() {\n  testSetupLocator();\n\n  setUp(() {\n    registerServices();\n    locator&lt;SizeConfig&gt;().test();\n    locator&lt;GraphqlConfig&gt;().test();\n  });\n\n  group('Exit Button', () {\n     testWidgets(&quot;Tapping Tests for Exit&quot;, (tester) async {\n      await tester.pumpWidget(createHomePageScreen());\n      await tester.pumpAndSettle();\n      tester.binding.window.physicalSizeTestValue = const Size(4000, 4000);\n      MainScreenViewModel.scaffoldKey.currentState?.openDrawer();\n      await tester.pumpAndSettle();\n      final leaveOrg = find.byKey(MainScreenViewModel.keyDrawerLeaveCurrentOrg);\n      await tester.tap(leaveOrg);\n      await tester.pumpAndSettle();\n      final dialogPopUP = verify(\n              (locator&lt;NavigationService&gt;() as MockNavigationService)\n                  .pushDialog(captureAny),)\n          .captured;\n      expect(dialogPopUP[0], isA&lt;CustomAlertDialog&gt;());\n      // calling success() to have complete code coverage.\n      dialogPopUP[0].success();\n    });\n  });\n  group('Custom Drawer Test', () {\n    testWidgets(&quot;Widget Testing&quot;, (tester) async {\n      // pumping the Widget\n      await tester.pumpWidget(createHomePageScreen());\n      await tester.pumpAndSettle();\n      // Opening the Drawer so that it can be loaded in the widget tree and built() is called\n      await tester.dragFrom(\n          tester.getTopLeft(find.byType(MaterialApp)), const Offset(300, 0));\n      await tester.pumpAndSettle();\n      // getting the Finders for Code Coverage\n      expect(find.byKey(const ValueKey(&quot;Drawer&quot;)), findsOneWidget);\n      expect(find.byKey(const ValueKey(&quot;Custom Drawer&quot;)), findsOneWidget);\n      expect(find.text(&quot;Selected Organization&quot;), findsOneWidget);\n      expect(find.text(&quot;Switch Organization&quot;), findsOneWidget);\n      final listOfOrgs = find.byKey(const ValueKey(&quot;Switching Org&quot;));\n      expect(listOfOrgs, findsOneWidget);\n      expect(find.byKey(MainScreenViewModel.keyDrawerCurOrg), findsOneWidget);\n      expect(find.byKey(MainScreenViewModel.keyDrawerSwitchableOrg),\n          findsOneWidget);\n      expect(find.byType(UserAccountsDrawerHeader), findsOneWidget);\n      expect(find.text(&quot;Join new Organization&quot;), findsOneWidget);\n      expect(find.text(&quot;Leave Current Organization&quot;), findsOneWidget);\n      final fromPalisadoes = find.byKey(const ValueKey(&quot;From Palisadoes&quot;));\n      expect(fromPalisadoes, findsOneWidget);\n    });\n    testWidgets(&quot;Tapping Tests for Org&quot;, (tester) async {\n      await tester.pumpWidget(createHomePageScreen());\n      await tester.pumpAndSettle();\n      // Opening the Drawer so that it can be loaded in the widget tree and built() is called\n      await tester.dragFrom(\n          tester.getTopLeft(find.byType(MaterialApp)), const Offset(300, 0));\n      await tester.pumpAndSettle();\n      final orgs = find.byKey(const ValueKey(&quot;Org&quot;));\n      // Atleast One Org should be there\n      // ignore: invalid_use_of_protected_member\n      expect(orgs.allCandidates.isEmpty, false);\n      await tester.tap(orgs.first);\n      // Was not required but done for code Coverage\n      // Sized\n      final sizedbox = find.byKey(const ValueKey(&quot;Sized Box Drawer&quot;));\n      // ignore: invalid_use_of_protected_member\n      expect(sizedbox.allCandidates.isEmpty, false);\n    });\n    testWidgets(&quot;Tapping Tests for Join&quot;, (tester) async {\n      await tester.pumpWidget(createHomePageScreen());\n      await tester.pumpAndSettle();\n      tester.binding.window.physicalSizeTestValue = const Size(800, 4000);\n      MainScreenViewModel.scaffoldKey.currentState?.openDrawer();\n      await tester.pumpAndSettle();\n      final joinOrg = find.byKey(MainScreenViewModel.keyDrawerJoinOrg);\n      await tester.tap(joinOrg);\n      // await tester.pumpAndSettle();\n    });\n  });\n\n  tearDown(() {\n    unregisterServices();\n  });\n}\n</code></pre>\n<p>I am trying to write test for custom drawer and exit button but facing issues\nit is giving exceptions</p>\n<p>it is giving many exceptions like open hive Box exception can anyone please tell me what's wrong I am not using hive in this .</p>\n<p>jhbdhilshblhsdbchlsbdchulsb hdsbcildhs vlhusdbcshd hsbdcushbc iusjb  ishb dsjbchjsbhjschjsdb chsdbcsh c sbchjdnbh c</p>\n",
        "codigo": [
            "import 'package:flutter/material.dart';\nimport 'package:flutter_localizations/flutter_localizations.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\nimport 'package:talawa/constants/custom_theme.dart';\nimport 'package:talawa/models/mainscreen_navigation_args.dart';\nimport 'package:talawa/services/graphql_config.dart';\nimport 'package:talawa/services/navigation_service.dart';\nimport 'package:talawa/services/size_config.dart';\nimport 'package:talawa/utils/app_localization.dart';\nimport 'package:talawa/view_model/main_screen_view_model.dart';\nimport 'package:talawa/views/main_screen.dart';\nimport 'package:talawa/widgets/custom_alert_dialog.dart';\nimport '../../helpers/test_helpers.dart';\nimport '../../helpers/test_helpers.mocks.dart';\nimport '../../helpers/test_locator.dart';\n\nclass MockBuildContext extends Mock implements BuildContext {}\n\nWidget createHomePageScreen() {\n  return MaterialApp(\n    locale: const Locale('en'),\n    localizationsDelegates: [\n      const AppLocalizationsDelegate(isTest: true),\n      GlobalMaterialLocalizations.delegate,\n      GlobalWidgetsLocalizations.delegate,\n    ],\n    themeMode: ThemeMode.light,\n    theme: TalawaTheme.lightTheme,\n    home: MainScreen(\n      key: const Key('MainScreen'),\n      mainScreenArgs: MainScreenArgs(mainScreenIndex: 0),\n    ),\n  );\n}\n\nvoid main() {\n  testSetupLocator();\n\n  setUp(() {\n    registerServices();\n    locator<SizeConfig>().test();\n    locator<GraphqlConfig>().test();\n  });\n\n  group('Exit Button', () {\n     testWidgets(\"Tapping Tests for Exit\", (tester) async {\n      await tester.pumpWidget(createHomePageScreen());\n      await tester.pumpAndSettle();\n      tester.binding.window.physicalSizeTestValue = const Size(4000, 4000);\n      MainScreenViewModel.scaffoldKey.currentState?.openDrawer();\n      await tester.pumpAndSettle();\n      final leaveOrg = find.byKey(MainScreenViewModel.keyDrawerLeaveCurrentOrg);\n      await tester.tap(leaveOrg);\n      await tester.pumpAndSettle();\n      final dialogPopUP = verify(\n              (locator<NavigationService>() as MockNavigationService)\n                  .pushDialog(captureAny),)\n          .captured;\n      expect(dialogPopUP[0], isA<CustomAlertDialog>());\n      // calling success() to have complete code coverage.\n      dialogPopUP[0].success();\n    });\n  });\n  group('Custom Drawer Test', () {\n    testWidgets(\"Widget Testing\", (tester) async {\n      // pumping the Widget\n      await tester.pumpWidget(createHomePageScreen());\n      await tester.pumpAndSettle();\n      // Opening the Drawer so that it can be loaded in the widget tree and built() is called\n      await tester.dragFrom(\n          tester.getTopLeft(find.byType(MaterialApp)), const Offset(300, 0));\n      await tester.pumpAndSettle();\n      // getting the Finders for Code Coverage\n      expect(find.byKey(const ValueKey(\"Drawer\")), findsOneWidget);\n      expect(find.byKey(const ValueKey(\"Custom Drawer\")), findsOneWidget);\n      expect(find.text(\"Selected Organization\"), findsOneWidget);\n      expect(find.text(\"Switch Organization\"), findsOneWidget);\n      final listOfOrgs = find.byKey(const ValueKey(\"Switching Org\"));\n      expect(listOfOrgs, findsOneWidget);\n      expect(find.byKey(MainScreenViewModel.keyDrawerCurOrg), findsOneWidget);\n      expect(find.byKey(MainScreenViewModel.keyDrawerSwitchableOrg),\n          findsOneWidget);\n      expect(find.byType(UserAccountsDrawerHeader), findsOneWidget);\n      expect(find.text(\"Join new Organization\"), findsOneWidget);\n      expect(find.text(\"Leave Current Organization\"), findsOneWidget);\n      final fromPalisadoes = find.byKey(const ValueKey(\"From Palisadoes\"));\n      expect(fromPalisadoes, findsOneWidget);\n    });\n    testWidgets(\"Tapping Tests for Org\", (tester) async {\n      await tester.pumpWidget(createHomePageScreen());\n      await tester.pumpAndSettle();\n      // Opening the Drawer so that it can be loaded in the widget tree and built() is called\n      await tester.dragFrom(\n          tester.getTopLeft(find.byType(MaterialApp)), const Offset(300, 0));\n      await tester.pumpAndSettle();\n      final orgs = find.byKey(const ValueKey(\"Org\"));\n      // Atleast One Org should be there\n      // ignore: invalid_use_of_protected_member\n      expect(orgs.allCandidates.isEmpty, false);\n      await tester.tap(orgs.first);\n      // Was not required but done for code Coverage\n      // Sized\n      final sizedbox = find.byKey(const ValueKey(\"Sized Box Drawer\"));\n      // ignore: invalid_use_of_protected_member\n      expect(sizedbox.allCandidates.isEmpty, false);\n    });\n    testWidgets(\"Tapping Tests for Join\", (tester) async {\n      await tester.pumpWidget(createHomePageScreen());\n      await tester.pumpAndSettle();\n      tester.binding.window.physicalSizeTestValue = const Size(800, 4000);\n      MainScreenViewModel.scaffoldKey.currentState?.openDrawer();\n      await tester.pumpAndSettle();\n      final joinOrg = find.byKey(MainScreenViewModel.keyDrawerJoinOrg);\n      await tester.tap(joinOrg);\n      // await tester.pumpAndSettle();\n    });\n  });\n\n  tearDown(() {\n    unregisterServices();\n  });\n}\n"
        ]
    },
    {
        "titulo": "Flutter test using Mockito - when API for register stub doesn&#39;t work",
        "score": 1,
        "views": 1238,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "mockito"
        ],
        "link": "https://stackoverflow.com/questions/75630643/flutter-test-using-mockito-when-api-for-register-stub-doesnt-work",
        "conteudo_html": "<p>I'm posting this question because this behavior seems very strange to me!\nI ain't an expert on mockito, so this may be only my error.</p>\n<pre><code>@GenerateMocks([AuthProvider])\nvoid main() {\n  test('If there is not a valid session, the data are clean', () async {\n    UserDataProvider provider = UserDataProvider();\n    MockAuthProvider mock = MockAuthProvider();\n\n    when(mock.isLoggedIn).thenReturn(false);\n\n    await provider.update(MockAuthProvider());\n    expect((await provider.joinedCommunities).isEmpty, true);\n  });\n}\n</code></pre>\n<p>An exception is thrown</p>\n<pre><code>package:mockito/src/mock.dart 191:7                      Mock._noSuchMethod\npackage:mockito/src/mock.dart 185:45                     Mock.noSuchMethod\ntest/provider/user_data_provider_test.mocks.dart 59:33   MockAuthProvider.isLoggedIn\npackage:unimeet/providers/user_data_provider.dart 22:22  UserDataProvider.update\ntest/provider/user_data_provider_test.dart 17:20         main.&lt;fn&gt;\n\nMissingStubError: 'isLoggedIn'\nNo stub was found which matches the arguments of this method call:\nisLoggedIn\n\nAdd a stub for this method using Mockito's 'when' API, or generate the MockAuthProvider mock with the @GenerateNiceMocks annotation (see https://pub.dev/documentation/mockito/latest/annotations/MockSpec-class.html).\n</code></pre>\n<p>As you can see I'm trying to register a return value for a simple getter but an exception is thrown.</p>\n<p>Let me know and thank you</p>\n",
        "codigo": [
            "@GenerateMocks([AuthProvider])\nvoid main() {\n  test('If there is not a valid session, the data are clean', () async {\n    UserDataProvider provider = UserDataProvider();\n    MockAuthProvider mock = MockAuthProvider();\n\n    when(mock.isLoggedIn).thenReturn(false);\n\n    await provider.update(MockAuthProvider());\n    expect((await provider.joinedCommunities).isEmpty, true);\n  });\n}\n",
            "package:mockito/src/mock.dart 191:7                      Mock._noSuchMethod\npackage:mockito/src/mock.dart 185:45                     Mock.noSuchMethod\ntest/provider/user_data_provider_test.mocks.dart 59:33   MockAuthProvider.isLoggedIn\npackage:unimeet/providers/user_data_provider.dart 22:22  UserDataProvider.update\ntest/provider/user_data_provider_test.dart 17:20         main.<fn>\n\nMissingStubError: 'isLoggedIn'\nNo stub was found which matches the arguments of this method call:\nisLoggedIn\n\nAdd a stub for this method using Mockito's 'when' API, or generate the MockAuthProvider mock with the @GenerateNiceMocks annotation (see https://pub.dev/documentation/mockito/latest/annotations/MockSpec-class.html).\n"
        ]
    },
    {
        "titulo": "How can I test this async piece of code in Flutter using Mockito?",
        "score": 0,
        "views": 123,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/75493892/how-can-i-test-this-async-piece-of-code-in-flutter-using-mockito",
        "conteudo_html": "<p>I am trying to write some test for an app, but I can't test values stored in a provider. I am relatively new to testing, so there might be something that I am doing wrong, but anyway. What I want to test is to verify is two values are not the same, which should be the expected behavior, but I just can't make it pass.\nThis is the code that I want to test:</p>\n<pre><code>class RSAKeysProvider {\n    KeyPair? _keyPair;\n\n    KeyPair? get keyPair =&gt; _keyPair;\n    set setKeyPair(KeyPair keyPair) =&gt; _keyPair = keyPair;\n\n    Future&lt;void&gt; generate(String bits) async {\n        var keyPair = await RSA.generate(int.parse(bits));\n        _keyPair = keyPair;\n        notifyListeners();\n    }\n}\n</code></pre>\n<p>I need to first call the generate() function, which will set the keyPair to actual values, and then check if keyPair.publicKey is different than keyPair.privateKey, but it gives me an error when I try to call generate() with await inside a test.</p>\n<p>This is what I have for now, but it doesn't work. The test breaks when it cames to the line &quot;await rsaKeys.generate('2048'). What can I do to make it work? I know the condition is not checking if both are different, but it is just a placeholder, I can't make the code arrive there!</p>\n<pre><code>test('Public and private key should be different', () async {\n      final MockRSAKeysProvider rsaKeys = MockRSAKeysProvider();\n\n      when(rsaKeys.generate(any)).thenAnswer((value) async {\n        KeyPair keyPair = await RSA.generate(2048);\n        rsaKeys.setKeyPair = keyPair;\n      });\n\n      await rsaKeys.generate('2048');\n\n      expect(rsaKeys.keyPair?.privateKey, isNotNull);\n      expect(rsaKeys.keyPair?.publicKey, isNotNull);\n    });\n</code></pre>\n<p>When it arrives at &quot;await rsaKeys.generate('2048'), it gives me this error:</p>\n<pre><code>Invalid argument(s): Failed to load dynamic library 'librsa_bridge.dylib': dlopen(librsa_bridge.dylib, 0x0001): tried: 'librsa_bridge.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OSlibrsa_bridge.dylib' (no such file), '/opt/homebrew/Caskroom/flutter/3.7.3/flutter/bin/cache/artifacts/engine/darwin-x64/./librsa_bridge.dylib' (no such file), '/opt/homebrew/Caskroom/flutter/3.7.3/flutter/bin/cache/artifacts/engine/darwin-x64/../../../librsa_bridge.dylib' (no such file), '/opt/homebrew/Caskroom/flutter/3.7.3/flutter/bin/cache/artifacts/engine/darwin-x64/Frameworks/librsa_bridge.dylib' (no such file), '/opt/homebrew/Caskroom/flutter/3.7.3/flutter/bin/cache/artifacts/engine/darwin-x64/./librsa_bridge.dylib' (no such file), '/opt/homebrew/Caskroom/flutter/3.7.3/flutter/bin/cache/artifacts/engine/darwin-x64/../../../librsa_bridge.dylib' (no such file), '/opt/homebrew/Caskroom/flutter/3.7.3/flutter/bin/cache/artifacts/engine/darwin-x64/Frameworks/librsa_bridge.dylib' (no such file), '/usr/lib/librsa_bridge.dylib' (no such file, not in dyld cache), 'librsa_bridge.dylib' (no such file), '/usr/lib/librsa_bridge.dylib' (no such file, not in dyld cache)\n  dart:ffi                                     new DynamicLibrary.open\n  package:fast_rsa/bridge/binding.dart 117:33  Binding.openLib\n  package:fast_rsa/bridge/binding.dart 26:16   new Binding._internal\n  package:fast_rsa/bridge/binding.dart 17:45   Binding._singleton\n  package:fast_rsa/bridge/binding.dart         Binding._singleton\n  package:fast_rsa/bridge/binding.dart 22:12   new Binding\n  package:fast_rsa/fast_rsa.dart 40:32         RSA.bindingEnabled\n  package:fast_rsa/fast_rsa.dart               RSA.bindingEnabled\n  package:fast_rsa/fast_rsa.dart 43:9          RSA._call\n  package:fast_rsa/fast_rsa.dart 79:22         RSA._keyPairResponse\n  package:fast_rsa/fast_rsa.dart 437:18        RSA.generate\n  test/rsa_keys.test.dart 32:37                main.&lt;fn&gt;.&lt;fn&gt;.&lt;fn&gt;\n  package:mockito/src/mock.dart 185:45         Mock.noSuchMethod\n  test/rsa_keys.test.mocks.dart 75:53          MockRSAKeysProvider.generate\n  test/rsa_keys.test.dart 36:21                main.&lt;fn&gt;.&lt;fn&gt;\n</code></pre>\n",
        "codigo": [
            "class RSAKeysProvider {\n    KeyPair? _keyPair;\n\n    KeyPair? get keyPair => _keyPair;\n    set setKeyPair(KeyPair keyPair) => _keyPair = keyPair;\n\n    Future<void> generate(String bits) async {\n        var keyPair = await RSA.generate(int.parse(bits));\n        _keyPair = keyPair;\n        notifyListeners();\n    }\n}\n",
            "test('Public and private key should be different', () async {\n      final MockRSAKeysProvider rsaKeys = MockRSAKeysProvider();\n\n      when(rsaKeys.generate(any)).thenAnswer((value) async {\n        KeyPair keyPair = await RSA.generate(2048);\n        rsaKeys.setKeyPair = keyPair;\n      });\n\n      await rsaKeys.generate('2048');\n\n      expect(rsaKeys.keyPair?.privateKey, isNotNull);\n      expect(rsaKeys.keyPair?.publicKey, isNotNull);\n    });\n",
            "Invalid argument(s): Failed to load dynamic library 'librsa_bridge.dylib': dlopen(librsa_bridge.dylib, 0x0001): tried: 'librsa_bridge.dylib' (no such file), '/System/Volumes/Preboot/Cryptexes/OSlibrsa_bridge.dylib' (no such file), '/opt/homebrew/Caskroom/flutter/3.7.3/flutter/bin/cache/artifacts/engine/darwin-x64/./librsa_bridge.dylib' (no such file), '/opt/homebrew/Caskroom/flutter/3.7.3/flutter/bin/cache/artifacts/engine/darwin-x64/../../../librsa_bridge.dylib' (no such file), '/opt/homebrew/Caskroom/flutter/3.7.3/flutter/bin/cache/artifacts/engine/darwin-x64/Frameworks/librsa_bridge.dylib' (no such file), '/opt/homebrew/Caskroom/flutter/3.7.3/flutter/bin/cache/artifacts/engine/darwin-x64/./librsa_bridge.dylib' (no such file), '/opt/homebrew/Caskroom/flutter/3.7.3/flutter/bin/cache/artifacts/engine/darwin-x64/../../../librsa_bridge.dylib' (no such file), '/opt/homebrew/Caskroom/flutter/3.7.3/flutter/bin/cache/artifacts/engine/darwin-x64/Frameworks/librsa_bridge.dylib' (no such file), '/usr/lib/librsa_bridge.dylib' (no such file, not in dyld cache), 'librsa_bridge.dylib' (no such file), '/usr/lib/librsa_bridge.dylib' (no such file, not in dyld cache)\n  dart:ffi                                     new DynamicLibrary.open\n  package:fast_rsa/bridge/binding.dart 117:33  Binding.openLib\n  package:fast_rsa/bridge/binding.dart 26:16   new Binding._internal\n  package:fast_rsa/bridge/binding.dart 17:45   Binding._singleton\n  package:fast_rsa/bridge/binding.dart         Binding._singleton\n  package:fast_rsa/bridge/binding.dart 22:12   new Binding\n  package:fast_rsa/fast_rsa.dart 40:32         RSA.bindingEnabled\n  package:fast_rsa/fast_rsa.dart               RSA.bindingEnabled\n  package:fast_rsa/fast_rsa.dart 43:9          RSA._call\n  package:fast_rsa/fast_rsa.dart 79:22         RSA._keyPairResponse\n  package:fast_rsa/fast_rsa.dart 437:18        RSA.generate\n  test/rsa_keys.test.dart 32:37                main.<fn>.<fn>.<fn>\n  package:mockito/src/mock.dart 185:45         Mock.noSuchMethod\n  test/rsa_keys.test.mocks.dart 75:53          MockRSAKeysProvider.generate\n  test/rsa_keys.test.dart 36:21                main.<fn>.<fn>\n"
        ]
    },
    {
        "titulo": "Log in Firebase auth and get Id token in flutter tests",
        "score": 0,
        "views": 297,
        "respostas": 1,
        "tags": [
            "flutter",
            "firebase",
            "dart",
            "testing",
            "flutter-test"
        ],
        "link": "https://stackoverflow.com/questions/75213873/log-in-firebase-auth-and-get-id-token-in-flutter-tests",
        "conteudo_html": "<p>I would like to write some integration tests for an app that I am creating in flutter.</p>\n<p>I would like to check the integration between frontend and backend, and in order to do so, I need to generate a valid JWT Id Token from Firebase (from tests credentials, that will be managed as secrets, but this is out of scope of this question).</p>\n<p><em>Note</em>: I know that all my libraries are up to date (the same error message is sometimes raised when some dependencies are out of date), because my login / JWT generation and retrieval do work well in the actual app when I launch it in a simulator.</p>\n<p>I encounter an issue when trying to run the canonical way of login in and getting the id token in test.</p>\n<p>So far, I have written my tests as follow, but they do raise an error when I try to run them:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>import 'package:firebase_core/firebase_core.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nimport 'package:firebase_auth/firebase_auth.dart' as firebase_auth;\n\n// + some custom imports for type SingleRecipientMessageHeader, etc...\n\nvoid main() {\n  TestWidgetsFlutterBinding.ensureInitialized();\n  \n  group('messageRepository', () {\n    late final String? jwt;\n    \n    setUp(() async {\n      await Firebase.initializeApp(\n        options: DefaultFirebaseOptions.android,\n      );  // &lt;= this command raises the error!\n      final instance = firebase_auth.FirebaseAuth.instance;\n\n      await instance.signInWithEmailAndPassword(\n          email: &quot;&lt;REDACTED&gt;&quot;, password: &quot;&lt;REDACTED&gt;&quot;);\n      jwt = await instance.currentUser?.getIdToken();\n    });\n\n    tearDown(() {});\n\n    test('message repository dummy test', () async {\n      List&lt;SingleRecipientMessageHeader&gt; messages =\n          await MessageRepository().fetchMessages(jwt!);\n      ...  // the actual integration tests follow...\n    });\n  });\n}\n</code></pre>\n<p>However, when I try to run those tests, the command flagged above raises the following error:</p>\n<pre><code>PlatformException(channel-error, Unable to establish connection on channel., null, null)\npackage:firebase_core_platform_interface/src/pigeon/messages.pigeon.dart 203:7  FirebaseCoreHostApi.initializeCore\n</code></pre>\n<p>From what I understand, when running tests, no actual platform exist, hence the connection error.</p>\n<p>Does anyone know how I could achieve login in and getting the JWT Id token from Firebase in my test suite ?</p>\n<p>Thanks a lot!</p>\n",
        "codigo": [
            "import 'package:firebase_core/firebase_core.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nimport 'package:firebase_auth/firebase_auth.dart' as firebase_auth;\n\n// + some custom imports for type SingleRecipientMessageHeader, etc...\n\nvoid main() {\n  TestWidgetsFlutterBinding.ensureInitialized();\n  \n  group('messageRepository', () {\n    late final String? jwt;\n    \n    setUp(() async {\n      await Firebase.initializeApp(\n        options: DefaultFirebaseOptions.android,\n      );  // <= this command raises the error!\n      final instance = firebase_auth.FirebaseAuth.instance;\n\n      await instance.signInWithEmailAndPassword(\n          email: \"<REDACTED>\", password: \"<REDACTED>\");\n      jwt = await instance.currentUser?.getIdToken();\n    });\n\n    tearDown(() {});\n\n    test('message repository dummy test', () async {\n      List<SingleRecipientMessageHeader> messages =\n          await MessageRepository().fetchMessages(jwt!);\n      ...  // the actual integration tests follow...\n    });\n  });\n}\n",
            "PlatformException(channel-error, Unable to establish connection on channel., null, null)\npackage:firebase_core_platform_interface/src/pigeon/messages.pigeon.dart 203:7  FirebaseCoreHostApi.initializeCore\n"
        ]
    },
    {
        "titulo": "Flutter/Dart unit tests with app localization",
        "score": 1,
        "views": 560,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "unit-testing",
            "testing",
            "localization"
        ],
        "link": "https://stackoverflow.com/questions/75159396/flutter-dart-unit-tests-with-app-localization",
        "conteudo_html": "<p>I am trying to write unit tests in Dart/Flutter for my TextField validations. However, I have a little problem here because the tests are working, but I want to return the value with localization now.</p>\n<p>How exactly do I implement this into the tests now?</p>\n<pre><code>import 'package:flutter/material.dart';\nimport 'package:flutter_gen/gen_l10n/app_localizations.dart';\n\nclass ValidationConstants {\n  static String? notEmpty(String? value, BuildContext context) {\n    if (value == null || value.isEmpty) {\n      return AppLocalizations.of(context)!.text_field_can_not_be_empty;\n    }\n    return null;\n  }\n}\n\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n\n\n  group('text field validations', () {\n    test('no empty text validation', () {\n      const emptyText = '';\n      const noEmptyText = 'Hello, World!';\n\n      // BuildContext is needed here\n      expect(ValidationConstants.notEmpty(emptyText, [...]).runtimeType, String);\n      expect(ValidationConstants.notEmpty(noEmptyText, [...]) == null, true);\n    });\n  });\n}\n</code></pre>\n",
        "codigo": [
            "import 'package:flutter/material.dart';\nimport 'package:flutter_gen/gen_l10n/app_localizations.dart';\n\nclass ValidationConstants {\n  static String? notEmpty(String? value, BuildContext context) {\n    if (value == null || value.isEmpty) {\n      return AppLocalizations.of(context)!.text_field_can_not_be_empty;\n    }\n    return null;\n  }\n}\n\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nvoid main() {\n\n\n  group('text field validations', () {\n    test('no empty text validation', () {\n      const emptyText = '';\n      const noEmptyText = 'Hello, World!';\n\n      // BuildContext is needed here\n      expect(ValidationConstants.notEmpty(emptyText, [...]).runtimeType, String);\n      expect(ValidationConstants.notEmpty(noEmptyText, [...]) == null, true);\n    });\n  });\n}\n"
        ]
    },
    {
        "titulo": "Flutter Firebase: testing gets hung up on initalizeApp()",
        "score": 1,
        "views": 149,
        "respostas": 1,
        "tags": [
            "flutter",
            "firebase",
            "dart",
            "testing",
            "google-cloud-firestore"
        ],
        "link": "https://stackoverflow.com/questions/75089865/flutter-firebase-testing-gets-hung-up-on-initalizeapp",
        "conteudo_html": "<p>I have a widget that I am trying to test which relies on a Firestore Repository. The code is as follows:</p>\n<pre><code>void main() {\n  group('AdminVerificationScreen', () {\n    testWidgets('renders correctly', (WidgetTester tester) async {\n      WidgetsFlutterBinding.ensureInitialized();\n\n      //pump the widget using a bloc provider and a multirepository provider\n      await Firebase.initializeApp(\n        options: DefaultFirebaseOptions.currentPlatform,\n      );\n\n      await tester.pumpWidget(\n        MultiRepositoryProvider(\n          providers: [\n            RepositoryProvider(\n              create: (_) =&gt; FirestoreRepository(),\n            ),\n            RepositoryProvider(\n              create: (context) =&gt; TypesenseRepository(),\n            ),\n          ],\n          child: MultiBlocProvider(\n            providers: [\n              BlocProvider&lt;AdminVerificationBloc&gt;(\n                create: (context) =&gt; AdminVerificationBloc(\n                    databaseRepository: context.read&lt;FirestoreRepository&gt;(),\n                    typesenseRepository: context.read&lt;TypesenseRepository&gt;()),\n              ),\n            ],\n            child: MaterialApp(\n              home: AdminVerificationScreen(),\n            ),\n          ),\n        ),\n      );\n\n      //expect the widget to be found\n      expect(find.byType(AdminVerificationScreen), findsOneWidget);\n    });\n  });\n}\n</code></pre>\n<p>The issue is at the intialize app. It gets hung up and will not proceed, but removing it gives the error:</p>\n<pre><code>[core/no-app] No Firebase App '[DEFAULT]' has been created - call Firebase.initializeApp()\n</code></pre>\n<p>Anyone see what im doing wrong?</p>\n<p>Thanks!</p>\n",
        "codigo": [
            "void main() {\n  group('AdminVerificationScreen', () {\n    testWidgets('renders correctly', (WidgetTester tester) async {\n      WidgetsFlutterBinding.ensureInitialized();\n\n      //pump the widget using a bloc provider and a multirepository provider\n      await Firebase.initializeApp(\n        options: DefaultFirebaseOptions.currentPlatform,\n      );\n\n      await tester.pumpWidget(\n        MultiRepositoryProvider(\n          providers: [\n            RepositoryProvider(\n              create: (_) => FirestoreRepository(),\n            ),\n            RepositoryProvider(\n              create: (context) => TypesenseRepository(),\n            ),\n          ],\n          child: MultiBlocProvider(\n            providers: [\n              BlocProvider<AdminVerificationBloc>(\n                create: (context) => AdminVerificationBloc(\n                    databaseRepository: context.read<FirestoreRepository>(),\n                    typesenseRepository: context.read<TypesenseRepository>()),\n              ),\n            ],\n            child: MaterialApp(\n              home: AdminVerificationScreen(),\n            ),\n          ),\n        ),\n      );\n\n      //expect the widget to be found\n      expect(find.byType(AdminVerificationScreen), findsOneWidget);\n    });\n  });\n}\n",
            "[core/no-app] No Firebase App '[DEFAULT]' has been created - call Firebase.initializeApp()\n"
        ]
    },
    {
        "titulo": "The following message was thrown: Multiple exceptions (2) were detected during the running of the current test, and at least one was unexpected",
        "score": 1,
        "views": 3154,
        "respostas": 2,
        "tags": [
            "android",
            "flutter",
            "dart",
            "testing",
            "widget"
        ],
        "link": "https://stackoverflow.com/questions/74852954/the-following-message-was-thrown-multiple-exceptions-2-were-detected-during-t",
        "conteudo_html": "<p>In the widget tesitng in flutter . Every time I face this issue</p>\n<p>I have doubt in method to dirrect the widget\nawait tester.pumpWidget(  UserDetails();</p>\n<pre><code>void main() {\n  var emailField = find.byKey(Key(&quot;fname-field&quot;));\n  var passwordField = find.byKey(Key(&quot;lname-field&quot;));\n  var passwordField1 = find.byKey(Key(&quot;enumber-field&quot;));\n  var signInButton = find.text(&quot;SUBMIT&quot;);\n  group(&quot;UserDetails  Screen test&quot;, () {\n    testWidgets(&quot;Check the buttons in User screen&quot;,\n        (WidgetTester tester) async {\n      await tester.pumpWidget(  UserDetails()\n      );\n      await tester.pump();\n      expect(emailField, findsOneWidget);\n      expect(passwordField, findsOneWidget);\n      expect(signInButton, findsOneWidget);\n      expect(passwordField1, findsOneWidget);\n    });\n  });\n}\n</code></pre>\n<p>here I got error like this</p>\n<blockquote>\n<p>══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK\n╞════════════════════════════════════════════════════ The following\nmessage was thrown: Multiple exceptions (2) were detected during the\nrunning of the current test, and at least one was unexpected.</p>\n<p>The following FirebaseException was thrown attaching to the render\ntree: [core/no-app] No Firebase App '[DEFAULT]' has been created -\ncall Firebase.initializeApp()</p>\n</blockquote>\n",
        "codigo": [
            "void main() {\n  var emailField = find.byKey(Key(\"fname-field\"));\n  var passwordField = find.byKey(Key(\"lname-field\"));\n  var passwordField1 = find.byKey(Key(\"enumber-field\"));\n  var signInButton = find.text(\"SUBMIT\");\n  group(\"UserDetails  Screen test\", () {\n    testWidgets(\"Check the buttons in User screen\",\n        (WidgetTester tester) async {\n      await tester.pumpWidget(  UserDetails()\n      );\n      await tester.pump();\n      expect(emailField, findsOneWidget);\n      expect(passwordField, findsOneWidget);\n      expect(signInButton, findsOneWidget);\n      expect(passwordField1, findsOneWidget);\n    });\n  });\n}\n"
        ]
    },
    {
        "titulo": "Getting type &#39;Null&#39; is not a subtype of type &#39;Future&lt;Response&gt;&#39; in Flutter",
        "score": 0,
        "views": 624,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "mockito",
            "client"
        ],
        "link": "https://stackoverflow.com/questions/74851724/getting-type-null-is-not-a-subtype-of-type-futureresponse-in-flutter",
        "conteudo_html": "<p>I'm trying to run a text in flutter using mockito but I have been getting a error of</p>\n<pre><code>type 'Null' is not a subtype of type 'Future&lt;Response&gt;'\n</code></pre>\n<p>Below is the code</p>\n<pre><code>class MockClient extends Mock implements http.Client {}\n\nvoid main() {\n  var client = MockClient();\n  var sut = AuthApi('http:baseUrl', client);\n\n  setUp(() {\n    client;\n    sut;\n  });\n  group('signin', () {\n    var credential = Credential(\n      type: AuthType.email,\n      email: 'email@email',\n      password: 'pass',\n    );\n    test('should return error when status is not 200', () async {\n      when(client.post(Uri(), body: anyNamed('body')))\n          .thenAnswer((_) async =&gt; http.Response('{}', 404));\n\n      var result = await sut.signIn(credential);\n\n     expect(result, isA&lt;ErrorResult&gt;());\n    });\n  });\n}\n\n</code></pre>\n<p>I have tried to pass</p>\n<pre><code>when(client.post(any, body: anyNamed('body')))\n</code></pre>\n<p>but I got any error of: The argument type 'Null' can't be assigned to the parameter type 'Uri'</p>\n",
        "codigo": [
            "type 'Null' is not a subtype of type 'Future<Response>'\n",
            "class MockClient extends Mock implements http.Client {}\n\nvoid main() {\n  var client = MockClient();\n  var sut = AuthApi('http:baseUrl', client);\n\n  setUp(() {\n    client;\n    sut;\n  });\n  group('signin', () {\n    var credential = Credential(\n      type: AuthType.email,\n      email: 'email@email',\n      password: 'pass',\n    );\n    test('should return error when status is not 200', () async {\n      when(client.post(Uri(), body: anyNamed('body')))\n          .thenAnswer((_) async => http.Response('{}', 404));\n\n      var result = await sut.signIn(credential);\n\n     expect(result, isA<ErrorResult>());\n    });\n  });\n}\n\n",
            "when(client.post(any, body: anyNamed('body')))\n"
        ]
    },
    {
        "titulo": "How I get a TypeObject Error in dart test",
        "score": 0,
        "views": 298,
        "respostas": 1,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing",
            "exception"
        ],
        "link": "https://stackoverflow.com/questions/74561980/how-i-get-a-typeobject-error-in-dart-test",
        "conteudo_html": "<p>Im trying to create a test for get a error in type convertion</p>\n<pre><code>  modelTest = VersionModel(\n        forceUpdate: true,//bool\n        buildNumber: 1222,//int\n        versionNumber: &quot;2&quot;,//String\n      );\n</code></pre>\n<p>My json that has a wrong type in the object</p>\n<pre><code> final jsonError = {\n      &quot;force_update&quot;: &quot;false&quot;,\n      &quot;build_number&quot;: 31003.,\n      &quot;version_number&quot;: &quot;3.1.0&quot;\n    };\n</code></pre>\n<p>My test</p>\n<pre><code> test(&quot;Should be return instance of VersionModel from json&quot;, () {\n      final json = modelTest!.toJson();\n      expect(VersionModel.fromJson(json),\n         Exception());\n    });\n</code></pre>\n<p>message: type 'String' is not a subtype of type 'bool?' in type cast</p>\n<p>What I tryed</p>\n<pre><code> test(&quot;Should be return an error of a instance VersionModel to json&quot;,\n        () {\n      try {\n        VersionModel.fromJson(jsonError);\n      } catch (e) {\n        expect(e, isInstanceOf&lt;TypeError&gt;());\n      }\n</code></pre>\n",
        "codigo": [
            "  modelTest = VersionModel(\n        forceUpdate: true,//bool\n        buildNumber: 1222,//int\n        versionNumber: \"2\",//String\n      );\n",
            " final jsonError = {\n      \"force_update\": \"false\",\n      \"build_number\": 31003.,\n      \"version_number\": \"3.1.0\"\n    };\n",
            " test(\"Should be return instance of VersionModel from json\", () {\n      final json = modelTest!.toJson();\n      expect(VersionModel.fromJson(json),\n         Exception());\n    });\n",
            " test(\"Should be return an error of a instance VersionModel to json\",\n        () {\n      try {\n        VersionModel.fromJson(jsonError);\n      } catch (e) {\n        expect(e, isInstanceOf<TypeError>());\n      }\n"
        ]
    },
    {
        "titulo": "Flutter Widget Test: cannot find widget using find.byWidget()",
        "score": 2,
        "views": 1818,
        "respostas": 2,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "widget",
            "find"
        ],
        "link": "https://stackoverflow.com/questions/74523912/flutter-widget-test-cannot-find-widget-using-find-bywidget",
        "conteudo_html": "<p>I was following <a href=\"https://docs.flutter.dev/cookbook/testing/widget/finders#3-find-a-specific-widget-instance\" rel=\"nofollow noreferrer\">this example</a> to test if a <strong><code>CircularProgressIndicator</code></strong> is present in my view, but even though the Flutter build tree shows the widget is present, I keep getting the following exception:</p>\n<pre class=\"lang-none prettyprint-override\"><code>══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nThe following TestFailure was thrown running a test:\nExpected: exactly one matching node in the widget tree\n  Actual: _WidgetFinder:&lt;zero widgets with the given widget\n(CircularProgressIndicator(&lt;indeterminate&gt;)) (ignoring offstage widgets)&gt;\n   Which: means none were found but one was expected\n\nWhen the exception was thrown, this was the stack:\n#4      main.&lt;anonymous closure&gt; (file:///D:/xxxx/xxxx/xxxx/test/widget_test/widget_test.dart:173:5)\n&lt;asynchronous suspension&gt;\n&lt;asynchronous suspension&gt;\n(elided one frame from package:stack_trace)\n\nThis was caught by the test expectation on the following line:\n  file:///D:/xxxx/xxxx/xxxx/test/widget_test/widget_test.dart line 173\nThe test description was:\n  ViewRequest: Waiting Types List\n════════════════════════════════════════════════════════════════════════════════════════════════════\n</code></pre>\n<hr />\n<h1>Edit</h1>\n<p>I've made a method that builds a <strong><code>MaterialApp</code></strong> with just a <strong><code>CircularProgressIndicator</code></strong> Widget as its &quot;child&quot;:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>Widget createMockViewRequest() {\n  return MaterialApp(\n      title: 'SmartDevice Simulator',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const CircularProgressIndicator());\n}\n</code></pre>\n<p>And the following test still keeps failing with the same exception:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>testWidgets('ViewRequest: Waiting Types List', (WidgetTester tester) async {\n  const childWidget = CircularProgressIndicator();\n\n  // Build our app and trigger a frame.\n  await tester.pumpWidget(createMockViewRequest());\n\n  // Verify that the page is loading until we receive the types.\n  expect(find.byWidget(childWidget), findsOneWidget);\n\n  await tester.pumpAndSettle();\n});\n</code></pre>\n<p>Am I doing something wrong? Maybe the <strong><code>MaterialApp</code></strong> doesn't count as a container? But in that case I fail to understand why it should not.</p>\n",
        "codigo": [
            "CircularProgressIndicator",
            "══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nThe following TestFailure was thrown running a test:\nExpected: exactly one matching node in the widget tree\n  Actual: _WidgetFinder:<zero widgets with the given widget\n(CircularProgressIndicator(<indeterminate>)) (ignoring offstage widgets)>\n   Which: means none were found but one was expected\n\nWhen the exception was thrown, this was the stack:\n#4      main.<anonymous closure> (file:///D:/xxxx/xxxx/xxxx/test/widget_test/widget_test.dart:173:5)\n<asynchronous suspension>\n<asynchronous suspension>\n(elided one frame from package:stack_trace)\n\nThis was caught by the test expectation on the following line:\n  file:///D:/xxxx/xxxx/xxxx/test/widget_test/widget_test.dart line 173\nThe test description was:\n  ViewRequest: Waiting Types List\n════════════════════════════════════════════════════════════════════════════════════════════════════\n",
            "MaterialApp",
            "CircularProgressIndicator",
            "Widget createMockViewRequest() {\n  return MaterialApp(\n      title: 'SmartDevice Simulator',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const CircularProgressIndicator());\n}\n",
            "testWidgets('ViewRequest: Waiting Types List', (WidgetTester tester) async {\n  const childWidget = CircularProgressIndicator();\n\n  // Build our app and trigger a frame.\n  await tester.pumpWidget(createMockViewRequest());\n\n  // Verify that the page is loading until we receive the types.\n  expect(find.byWidget(childWidget), findsOneWidget);\n\n  await tester.pumpAndSettle();\n});\n",
            "MaterialApp"
        ]
    },
    {
        "titulo": "How to compare 2 Either objects in unit test (objects extend Equatable)",
        "score": 0,
        "views": 27,
        "respostas": 0,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/74420244/how-to-compare-2-either-objects-in-unit-test-objects-extend-equatable",
        "conteudo_html": "<p>I am passing <code>Either&lt;Failure, List&lt;CleaningJob&gt;&gt;</code> from the repository. In my unit test, I receive an error that Expected  does not match Actual.</p>\n<p><code>CleaningJob</code> extends <code>Equatable</code> and both strings, expected and actual, are identical (compared both with Excel...).</p>\n<p>I would assume that <code>Either</code> (or <code>Right</code>) do not have own instances and that therefore I should be able to compare both <code>Equatable</code> objects. But it doesn't work for some reason.</p>\n<p>And since there is no real message why the test fails, only Expected and Actual are shown, I have no idea how to fix this.</p>\n<p>The error looks like this:\n<code>Expected: Right&lt;Failure, List&lt;CleaningJob&gt;&gt;:&lt;Right([CleaningJob(testJobId, ...</code></p>\n<p>The test statement is\n<code>expect(result, tCleaningJobsModelResponse);</code></p>\n<p>And I build my expected result with\n<code>final Either&lt;Failure, List&lt;CleaningJob&gt;&gt; tCleaningJobsModelResponse = Right(tCleaningJobsModel);</code></p>\n",
        "codigo": [
            "Either<Failure, List<CleaningJob>>",
            "CleaningJob",
            "Equatable",
            "Either",
            "Right",
            "Equatable",
            "Expected: Right<Failure, List<CleaningJob>>:<Right([CleaningJob(testJobId, ...",
            "expect(result, tCleaningJobsModelResponse);",
            "final Either<Failure, List<CleaningJob>> tCleaningJobsModelResponse = Right(tCleaningJobsModel);"
        ]
    },
    {
        "titulo": "Flutter Testing api Using MockClient",
        "score": 1,
        "views": 42,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/74412471/flutter-testing-api-using-mockclient",
        "conteudo_html": "<p>Im trying to test a function using MockClient in in flutter the function should return Json this the code that I write for testing</p>\n<pre><code>    final newsApi = NewsApiProvider();\n    newsApi.client = MockClient((request) async {\n      return Response(json.encode({&quot;id&quot;: 123}), 200);\n    });\n    final item = await newsApi.fetchItem(123);\n    expect(item.id, 123);\n  });\n</code></pre>\n<p>and this is the error I got\n[1]: <a href=\"https://i.sstatic.net/y6WRd.png\" rel=\"nofollow noreferrer\">https://i.sstatic.net/y6WRd.png</a></p>\n<p>this is the model class look like</p>\n<pre><code>class ItemModel {\n  final int id;\n  final bool deleted;\n  final String type;\n  final String by;\n  final int time;\n  final String text;\n  final bool dead;\n  final int parent;\n  final List&lt;dynamic&gt; kids;\n  final String url;\n  final int score;\n  final String title;\n  final int descendants;\n\n  ItemModel.fromJson(Map&lt;String, dynamic&gt; json)\n      : id = json['id'],\n        deleted = json['deleted'],\n        type = json['type'],\n        by = json['by'],\n        time = json['time'],\n        text = json['text'],\n        dead = json['dead'],\n        parent = json['parent'],\n        kids = json['kids'],\n        url = json['url'],\n        score = json['score'],\n        title = json['title'],\n        descendants = json['descendants'];\n}\n</code></pre>\n<p>and this the function I need to test</p>\n<pre><code>\n    fetchItem(int id) async {\n        final res = await client.get(Uri.parse(&quot;$_root_url/item/$id.json?&quot;));\n        final res_json = json.decode(res.body);\n        return ItemModel.fromJson(res_json);\n      }\n</code></pre>\n<p>I can't understand why this happening do I need to write the whole Json response in order to test if thats the case why need to use mock client</p>\n",
        "codigo": [
            "    final newsApi = NewsApiProvider();\n    newsApi.client = MockClient((request) async {\n      return Response(json.encode({\"id\": 123}), 200);\n    });\n    final item = await newsApi.fetchItem(123);\n    expect(item.id, 123);\n  });\n",
            "class ItemModel {\n  final int id;\n  final bool deleted;\n  final String type;\n  final String by;\n  final int time;\n  final String text;\n  final bool dead;\n  final int parent;\n  final List<dynamic> kids;\n  final String url;\n  final int score;\n  final String title;\n  final int descendants;\n\n  ItemModel.fromJson(Map<String, dynamic> json)\n      : id = json['id'],\n        deleted = json['deleted'],\n        type = json['type'],\n        by = json['by'],\n        time = json['time'],\n        text = json['text'],\n        dead = json['dead'],\n        parent = json['parent'],\n        kids = json['kids'],\n        url = json['url'],\n        score = json['score'],\n        title = json['title'],\n        descendants = json['descendants'];\n}\n",
            "\n    fetchItem(int id) async {\n        final res = await client.get(Uri.parse(\"$_root_url/item/$id.json?\"));\n        final res_json = json.decode(res.body);\n        return ItemModel.fromJson(res_json);\n      }\n"
        ]
    },
    {
        "titulo": "The argument type &#39;Future&lt;User&gt; Function(Invocation)&#39; can&#39;t be assigned to the parameter type &#39;Future&lt;User&gt; Function() Function(Invocation)&#39;",
        "score": 0,
        "views": 529,
        "respostas": 1,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/74092562/the-argument-type-futureuser-functioninvocation-cant-be-assigned-to-the-p",
        "conteudo_html": "<p>Hello im writing a test using mockito but when i try to use the example in mockito documentation it throws an error for me,</p>\n<p>Im asking what is the right syntax for the function inside the thenAsnswer?</p>\n<p>ERROR: The argument type 'Future Function(Invocation)' can't be assigned to the parameter type 'Future Function() Function(Invocation)'</p>\n<pre><code>   test(\n  &quot;GIVEN success call WHEN login called THEN return User&quot;,\n  () async {\n    //arrange\n    when(\n      () =&gt; service.login(credentials: credential),\n    ).thenAnswer(\n      (_) async =&gt; Future.value(user),\n    );\n\n    //act\n    final futureUser =   await service.login(\n      credentials: credential,\n    );\n\n    //assert\n    expect( futureUser, user);\n  },\n);\n</code></pre>\n",
        "codigo": [
            "   test(\n  \"GIVEN success call WHEN login called THEN return User\",\n  () async {\n    //arrange\n    when(\n      () => service.login(credentials: credential),\n    ).thenAnswer(\n      (_) async => Future.value(user),\n    );\n\n    //act\n    final futureUser =   await service.login(\n      credentials: credential,\n    );\n\n    //assert\n    expect( futureUser, user);\n  },\n);\n"
        ]
    },
    {
        "titulo": "How can flutter test frame work be used to test Clipboard?",
        "score": 2,
        "views": 503,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "flutter-test",
            "dart-test"
        ],
        "link": "https://stackoverflow.com/questions/73902422/how-can-flutter-test-frame-work-be-used-to-test-clipboard",
        "conteudo_html": "<p>How can I test code that uses <code>Clipboard</code> in Dart.  It will not work from the test framework.</p>\n<p>The code works well when run from a main programme (after <code>runApp(..)</code>).  But the following test fails</p>\n<p>This is the code I want to test:</p>\n<pre><code>  Future setText(String input) async {\n    ClipboardData data = ClipboardData(text: input);\n    await Clipboard.setData(data);\n    if (!await Clipboard.hasStrings()) {\n      if (kDebugMode) {\n        print(&quot;Added string, no strings!&quot;);  // \n      }\n    }\n  }\nFuture&lt;String?&gt; getText() async {\n    if (await Clipboard.hasStrings()) {\n      ClipboardData? result = await Clipboard.getData(Clipboard.kTextPlain);\n      if (result == null) {\n        return null;\n      }\n      return result.text;\n    }\n    return null;\n  }\n</code></pre>\n<p>I have test code...</p>\n<pre><code>void main() async {\n  test(&quot;Test copying data to and from the clipboard&quot;, () async {\n    TestWidgetsFlutterBinding.ensureInitialized();\n    String testStringPut = &quot;ABC def 123 &quot;;\n    await setText(testStringPut);\n    String? testStringGet = await getText();\n    expect(testStringGet, testStringPut);\n });\n}\n</code></pre>\n<p>The line: <code>TestWidgetsFlutterBinding.ensureInitialized();</code> is some sort of magic incantation as far as I know, and is probably where my problem lies.</p>\n<p>Without it I get the error:</p>\n<pre><code>Exception has occurred.\nFlutterError (Binding has not yet been initialized.\nThe &quot;instance&quot; getter on the ServicesBinding binding mixin is only available once that binding has been initialized.\nTypically, this is done by calling &quot;WidgetsFlutterBinding.ensureInitialized()&quot; or &quot;runApp()&quot; (the latter calls the former). Typically this call is done in the &quot;void main()&quot; method. The &quot;ensureInitialized&quot; method is idempotent; calling it multiple times is not harmful. After calling that method, the &quot;instance&quot; getter will return the binding.\nIn a test, one can call &quot;TestWidgetsFlutterBinding.ensureInitialized()&quot; as the first line in the test's &quot;main()&quot; method to initialize the binding.\nIf ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the &quot;instance&quot; getter.)\n</code></pre>\n",
        "codigo": [
            "Clipboard",
            "runApp(..)",
            "  Future setText(String input) async {\n    ClipboardData data = ClipboardData(text: input);\n    await Clipboard.setData(data);\n    if (!await Clipboard.hasStrings()) {\n      if (kDebugMode) {\n        print(\"Added string, no strings!\");  // \n      }\n    }\n  }\nFuture<String?> getText() async {\n    if (await Clipboard.hasStrings()) {\n      ClipboardData? result = await Clipboard.getData(Clipboard.kTextPlain);\n      if (result == null) {\n        return null;\n      }\n      return result.text;\n    }\n    return null;\n  }\n",
            "void main() async {\n  test(\"Test copying data to and from the clipboard\", () async {\n    TestWidgetsFlutterBinding.ensureInitialized();\n    String testStringPut = \"ABC def 123 \";\n    await setText(testStringPut);\n    String? testStringGet = await getText();\n    expect(testStringGet, testStringPut);\n });\n}\n",
            "TestWidgetsFlutterBinding.ensureInitialized();",
            "Exception has occurred.\nFlutterError (Binding has not yet been initialized.\nThe \"instance\" getter on the ServicesBinding binding mixin is only available once that binding has been initialized.\nTypically, this is done by calling \"WidgetsFlutterBinding.ensureInitialized()\" or \"runApp()\" (the latter calls the former). Typically this call is done in the \"void main()\" method. The \"ensureInitialized\" method is idempotent; calling it multiple times is not harmful. After calling that method, the \"instance\" getter will return the binding.\nIn a test, one can call \"TestWidgetsFlutterBinding.ensureInitialized()\" as the first line in the test's \"main()\" method to initialize the binding.\nIf ServicesBinding is a custom binding mixin, there must also be a custom binding class, like WidgetsFlutterBinding, but that mixes in the selected binding, and that is the class that must be constructed before using the \"instance\" getter.)\n"
        ]
    },
    {
        "titulo": "build_runner does not generate filename.g.dart Flutter",
        "score": 0,
        "views": 1578,
        "respostas": 3,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing",
            "build"
        ],
        "link": "https://stackoverflow.com/questions/73801332/build-runner-does-not-generate-filename-g-dart-flutter",
        "conteudo_html": "<p>I want to unit test api and I followed <a href=\"https://blog.auguron.com/flutter-testing-with-riverpod-and-mockito-85d10fc6c367\" rel=\"nofollow noreferrer\">this tutorial</a> to achieve it but I got a ridiculous error.</p>\n<p>I have been struggling with this issue whole day!</p>\n<p>Here is explanation: I need to have <code>mokito</code> and also <code>api_client.g</code> file in my project.</p>\n<p>Whenever I try to generate mokito file with this command <code>flutter packages pub run build_runner build --delete-conflicting-outputs</code> the mokito class is generated but my <code>api_client.g.dart</code> disappears and is not regenerated.</p>\n<p>I used to be able to generate <code>api_client.g.dart</code> file using this command:</p>\n<pre><code>flutter pub run build_runner build\n</code></pre>\n<p>My pubspec.yaml</p>\n<pre><code>name: app_store\ndescription: A new Flutter project.\n\npublish_to: 'none' # Remove this line if you wish to publish to pub.dev\nversion: 1.0.0+1\n\nenvironment:\nsdk: &quot;&gt;=2.15.1 &lt;3.0.0&quot;\n\ndependencies:\nflutter:\nsdk: flutter\n\n flutter_localizations:\nsdk: flutter\nflutter_riverpod: ^1.0.3\ncupertino_icons: ^1.0.2\nshared_preferences: ^2.0.13\nbuilt_value: ^8.1.4\njson_annotation: ^4.4.0\ndio: ^4.0.4\npackage_info_plus: ^1.4.2\ncached_network_image: ^3.2.0\nurl_launcher: ^6.0.18\nintl: ^0.17.0\nflutter_svg: ^1.0.3\nlottie: ^1.2.1\npin_code_fields: ^7.3.0\nimage_cropper: ^2.0.3\nimage_picker: ^0.8.5+3\nfile_picker: ^4.6.1\ndevice_info_plus: ^4.0.0\ndisk_space: ^0.2.1\nflutter_rating_bar: ^4.0.1\ndevice_apps: ^2.2.0\npath_provider: 2.0.9\nspeech_to_text: ^5.6.0\napp_installer: ^1.1.0\ndownloads_path_provider_28: ^0.1.2\npermission_handler: ^8.3.0\nmockito: ^5.3.1\nbuild_runner: ^2.2.1\n# freezed: ^2.0.3\nhttp: ^0.13.4\n\n\nflutter_lints: ^1.0.0\n\njson_serializable: ^6.1.4\nuni_links: ^0.5.1\n\ndev_dependencies:\nintegration_test: \nsdk: flutter\nflutter_test:\nsdk: flutter\nflutter:\nuses-material-design: true\ngenerate: true\nassets:\n- assets/icons/\n- assets/images/\n- assets/animations/\n\nfonts:\n- family: iran_sans_x\n  fonts:\n    - asset: assets/fonts/iran_sans_x_ultra_light.otf\n      weight: 100\n    - asset: assets/fonts/iran_sans_x_thin.otf\n      weight: 200\n    - asset: assets/fonts/iran_sans_x_light.otf\n      weight: 300\n    - asset: assets/fonts/iran_sans_x_regular.otf\n      weight: 400\n    - asset: assets/fonts/iran_sans_x_medium.otf\n      weight: 500\n    - asset: assets/fonts/iran_sans_x_semi_bold.otf\n      weight: 600\n    - asset: assets/fonts/iran_sans_x_bold.otf\n      weight: 700\n    - asset: assets/fonts/iran_sans_x_extra_bold.otf\n      weight: 800\n    - asset: assets/fonts/iran_sans_x_black.otf\n      weight: 900\n- family: DanaFaNum\n  fonts:\n    - asset: assets/fonts/DanaFaNum-UltraLight.ttf\n      weight: 100\n    - asset: assets/fonts/DanaFaNum-Thin.ttf\n      weight: 200\n    - asset: assets/fonts/DanaFaNum-Light.ttf\n      weight: 300\n    - asset: assets/fonts/DanaFaNum-Regular.ttf\n      weight: 400\n    - asset: assets/fonts/DanaFaNum-Medium.ttf\n      weight: 500\n    - asset: assets/fonts/DanaFaNum-Bold.ttf\n      weight: 600\n    - asset: assets/fonts/DanaFaNum-DemiBold.ttf\n      weight: 700\n    - asset: assets/fonts/DanaFaNum-ExtraBold.ttf\n      weight: 800\n    - asset: assets/fonts/DanaFaNum-Black.ttf\n      weight: 900\n</code></pre>\n<p>My Mokito class:</p>\n<pre><code>import 'package:app_store/data/model/responseModel/login_with_mobile_rm.dart';\nimport 'package:app_store/main.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:mockito/annotations.dart';\nimport 'package:mockito/mockito.dart';\nimport 'api_test.mocks.dart';\n\nfinal httpProvider = Provider&lt;http.Client&gt;((ref) {\nreturn http.Client();\n});\n@GenerateMocks([http.Client])\nvoid main() {\n testWidgets('200 response increments', (WidgetTester tester) async {\n final client = MockClient();\n when(client.get(Uri.parse('https://httpstat.us/200'))).thenAnswer(\n  (value) async {\n    return http.Response(LoginWithMobileRm().toJson().toString(), 200);\n  },\n);\nawait tester.pumpWidget(\n  ProviderScope(\n    overrides: [\n      httpProvider.overrideWithValue(client),\n    ],\n    child: const MyApp(),\n  ),\n);\nexpect(1, 1);\n});\n}\n</code></pre>\n<p>My api_client:</p>\n<pre><code>part 'api_client.g.dart';\n\nabstract class ApiClient {\nfactory ApiClient(Dio dio, AppPreferencesHelper appPreferencesHelper,\n{required String baseUrl}) = _ApiClient;\n\nFuture&lt;BaseResponseModel&lt;LoginWithMobileRm&gt;&gt; mobileLogin(\nMap&lt;String, String&gt; map,\nBuildContext context,\n);\n</code></pre>\n",
        "codigo": [
            "mokito",
            "api_client.g",
            "flutter packages pub run build_runner build --delete-conflicting-outputs",
            "api_client.g.dart",
            "api_client.g.dart",
            "flutter pub run build_runner build\n",
            "name: app_store\ndescription: A new Flutter project.\n\npublish_to: 'none' # Remove this line if you wish to publish to pub.dev\nversion: 1.0.0+1\n\nenvironment:\nsdk: \">=2.15.1 <3.0.0\"\n\ndependencies:\nflutter:\nsdk: flutter\n\n flutter_localizations:\nsdk: flutter\nflutter_riverpod: ^1.0.3\ncupertino_icons: ^1.0.2\nshared_preferences: ^2.0.13\nbuilt_value: ^8.1.4\njson_annotation: ^4.4.0\ndio: ^4.0.4\npackage_info_plus: ^1.4.2\ncached_network_image: ^3.2.0\nurl_launcher: ^6.0.18\nintl: ^0.17.0\nflutter_svg: ^1.0.3\nlottie: ^1.2.1\npin_code_fields: ^7.3.0\nimage_cropper: ^2.0.3\nimage_picker: ^0.8.5+3\nfile_picker: ^4.6.1\ndevice_info_plus: ^4.0.0\ndisk_space: ^0.2.1\nflutter_rating_bar: ^4.0.1\ndevice_apps: ^2.2.0\npath_provider: 2.0.9\nspeech_to_text: ^5.6.0\napp_installer: ^1.1.0\ndownloads_path_provider_28: ^0.1.2\npermission_handler: ^8.3.0\nmockito: ^5.3.1\nbuild_runner: ^2.2.1\n# freezed: ^2.0.3\nhttp: ^0.13.4\n\n\nflutter_lints: ^1.0.0\n\njson_serializable: ^6.1.4\nuni_links: ^0.5.1\n\ndev_dependencies:\nintegration_test: \nsdk: flutter\nflutter_test:\nsdk: flutter\nflutter:\nuses-material-design: true\ngenerate: true\nassets:\n- assets/icons/\n- assets/images/\n- assets/animations/\n\nfonts:\n- family: iran_sans_x\n  fonts:\n    - asset: assets/fonts/iran_sans_x_ultra_light.otf\n      weight: 100\n    - asset: assets/fonts/iran_sans_x_thin.otf\n      weight: 200\n    - asset: assets/fonts/iran_sans_x_light.otf\n      weight: 300\n    - asset: assets/fonts/iran_sans_x_regular.otf\n      weight: 400\n    - asset: assets/fonts/iran_sans_x_medium.otf\n      weight: 500\n    - asset: assets/fonts/iran_sans_x_semi_bold.otf\n      weight: 600\n    - asset: assets/fonts/iran_sans_x_bold.otf\n      weight: 700\n    - asset: assets/fonts/iran_sans_x_extra_bold.otf\n      weight: 800\n    - asset: assets/fonts/iran_sans_x_black.otf\n      weight: 900\n- family: DanaFaNum\n  fonts:\n    - asset: assets/fonts/DanaFaNum-UltraLight.ttf\n      weight: 100\n    - asset: assets/fonts/DanaFaNum-Thin.ttf\n      weight: 200\n    - asset: assets/fonts/DanaFaNum-Light.ttf\n      weight: 300\n    - asset: assets/fonts/DanaFaNum-Regular.ttf\n      weight: 400\n    - asset: assets/fonts/DanaFaNum-Medium.ttf\n      weight: 500\n    - asset: assets/fonts/DanaFaNum-Bold.ttf\n      weight: 600\n    - asset: assets/fonts/DanaFaNum-DemiBold.ttf\n      weight: 700\n    - asset: assets/fonts/DanaFaNum-ExtraBold.ttf\n      weight: 800\n    - asset: assets/fonts/DanaFaNum-Black.ttf\n      weight: 900\n",
            "import 'package:app_store/data/model/responseModel/login_with_mobile_rm.dart';\nimport 'package:app_store/main.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:http/http.dart' as http;\nimport 'package:mockito/annotations.dart';\nimport 'package:mockito/mockito.dart';\nimport 'api_test.mocks.dart';\n\nfinal httpProvider = Provider<http.Client>((ref) {\nreturn http.Client();\n});\n@GenerateMocks([http.Client])\nvoid main() {\n testWidgets('200 response increments', (WidgetTester tester) async {\n final client = MockClient();\n when(client.get(Uri.parse('https://httpstat.us/200'))).thenAnswer(\n  (value) async {\n    return http.Response(LoginWithMobileRm().toJson().toString(), 200);\n  },\n);\nawait tester.pumpWidget(\n  ProviderScope(\n    overrides: [\n      httpProvider.overrideWithValue(client),\n    ],\n    child: const MyApp(),\n  ),\n);\nexpect(1, 1);\n});\n}\n",
            "part 'api_client.g.dart';\n\nabstract class ApiClient {\nfactory ApiClient(Dio dio, AppPreferencesHelper appPreferencesHelper,\n{required String baseUrl}) = _ApiClient;\n\nFuture<BaseResponseModel<LoginWithMobileRm>> mobileLogin(\nMap<String, String> map,\nBuildContext context,\n);\n"
        ]
    },
    {
        "titulo": "How to test use of toLocal in Dart",
        "score": 2,
        "views": 694,
        "respostas": 2,
        "tags": [
            "unit-testing",
            "dart",
            "testing",
            "timezone-offset"
        ],
        "link": "https://stackoverflow.com/questions/73786269/how-to-test-use-of-tolocal-in-dart",
        "conteudo_html": "<p>I would like to write a testcase to ensure use of the <code>toLocal</code> function in a Flutter app I am working on as forgetting that has been a reoccuring issue. <strong>Note:</strong> I am <em>not</em> asking how to test the function, I am sure the Dart developers are doing a great job on that. I want to write a testcase that ensures the function is called.</p>\n<p>Figures, it should be as easy as something like this:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>// Function I want to test\nint getLocalHour(DateTime dateTime) =&gt; dateTime.toLocal().hour;\n\nvoid main() {\n  test('getLocalHour uses local time', () {\n    final testedTime = DateTime.utc(2022, 9, 20, 12);\n\n    expect(getLocalHour(testedTime), 14);\n  });\n}\n</code></pre>\n<p>Now you might say &quot;Hold up, 12 o'clock utc isn't 2pm in my timezone&quot; and you may be right! That's the problem I have; I couldn't find a reliable way of setting the timezone to use for <code>toLocal</code> to get reproducible results. In CEST, this test will run fine on my laptop, during winter, it will fail. And in the CI, it will fail all year around because it's running on a server configured to use UTC time.</p>\n<p>Is there a way to have <code>toLocal</code> produce a predetermined output so I can ensure it's called in the places I need it to be called?</p>\n",
        "codigo": [
            "toLocal",
            "// Function I want to test\nint getLocalHour(DateTime dateTime) => dateTime.toLocal().hour;\n\nvoid main() {\n  test('getLocalHour uses local time', () {\n    final testedTime = DateTime.utc(2022, 9, 20, 12);\n\n    expect(getLocalHour(testedTime), 14);\n  });\n}\n",
            "toLocal",
            "toLocal"
        ]
    },
    {
        "titulo": "Why is there no spy functionality in Mockito Dart?",
        "score": 2,
        "views": 901,
        "respostas": 1,
        "tags": [
            "dart",
            "testing",
            "mockito"
        ],
        "link": "https://stackoverflow.com/questions/73705343/why-is-there-no-spy-functionality-in-mockito-dart",
        "conteudo_html": "<p>The following code is a simplified example from my code. I have class A which is dependent on class B. I want to test class A, so I mock class B. Then I'm writing a test for a method of class A and inside of that test I write a stub for whenever a method from my mocked class B is called:</p>\n<pre><code>fetchData() async {\ntry {\n  await b.getData();\n}  on DioError catch (e) {\n  switch (e.response!.statusCode) {\n    case 401:\n      logout();\n      throw UnauthorizedException();\n    default:\n      throw UnspecifiedDioException(error: e);\n  }\n}\n</code></pre>\n<p>Test written for fetchData() method:</p>\n<pre><code>test('check if fetchData calls logout when 401 is returned', () {\n\n     when(mockB.getData())\n         .thenAnswer((_) async =&gt;\n         throw DioError(\n             requestOptions: RequestOptions(path: &quot;&quot;),\n             response: Response(requestOptions: RequestOptions(path: &quot;&quot;), statusCode: 401)));\n\n     verify(a.logout()); // doesn't work because A isn't mocked\n});\n</code></pre>\n<p>I've read that you can do this very easily with spies but to my surprise spies are available for every language which uses mockito except for dart. It's apparently deprecated but then again how can something be deprecated if there isn't even a newer version to replace it with.</p>\n<p>I'd really appreciate it if someone could tell me if there is a convenient workaround for what I'm trying to achieve. Thanks in advance.</p>\n<p>Edit: I've changed the question because the former one wasn't making much sense. I just wanna know if there is something like spies in dart or not.</p>\n",
        "codigo": [
            "fetchData() async {\ntry {\n  await b.getData();\n}  on DioError catch (e) {\n  switch (e.response!.statusCode) {\n    case 401:\n      logout();\n      throw UnauthorizedException();\n    default:\n      throw UnspecifiedDioException(error: e);\n  }\n}\n",
            "test('check if fetchData calls logout when 401 is returned', () {\n\n     when(mockB.getData())\n         .thenAnswer((_) async =>\n         throw DioError(\n             requestOptions: RequestOptions(path: \"\"),\n             response: Response(requestOptions: RequestOptions(path: \"\"), statusCode: 401)));\n\n     verify(a.logout()); // doesn't work because A isn't mocked\n});\n"
        ]
    },
    {
        "titulo": "Flutter BlocTest with KeyEvents",
        "score": 0,
        "views": 204,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "flutter-bloc",
            "flutter-cubit"
        ],
        "link": "https://stackoverflow.com/questions/73368311/flutter-bloctest-with-keyevents",
        "conteudo_html": "<p>I want to simulate a key event press using <a href=\"https://pub.dev/packages/bloc_test\" rel=\"nofollow noreferrer\">blocTest</a> for a Cubit function I'm testing. So far it doesn't seem like I can call <code>simulateKeyDownEvent</code> within BlocTest because it focuses on the Bloc/Cubit and not the widget. But when I mock a RawKeyDownEvent() event, <code>isKeyPressed</code> is returning false even if it's the correct mocked key?</p>\n<p><strong>Anyone know why this happens and how to get it to show true?</strong></p>\n<p>My cubit function uses this syntax:</p>\n<pre><code>void handleKeyPress(RawKeyEvent event) {\n   if (event.isKeyPressed(LogicalKeyboardKey.keyU)) { ... }\n...\n</code></pre>\n<p>Event mock and test:</p>\n<pre><code>blocTest&lt;Cubit, State&gt;('Handle key press, increase layer',\n    build: () =&gt; cubit, // defined in setup\n    act: (cubit) async {\n      RawKeyEvent mockEnterKey = const RawKeyDownEventMock(\n          data: RawKeyEventDataWindows(keyCode: 13, scanCode: 28, characterCodePoint: 0, modifiers: 0), character: 'enter')\n        ..physicalKey = PhysicalKeyboardKey.enter\n        ..logicalKey = LogicalKeyboardKey.enter;\n      cubit.handleKeyPress(mockEnterKey);\n    },\n    expect: () =&gt; [isA&lt;State&gt;().having((state) =&gt; state.currentLayer, 'curent layer', initState + 1)]);\n</code></pre>\n<p>Event Mock defintion:</p>\n<pre><code>class RawKeyDownEventMock extends RawKeyEvent {\n  const RawKeyDownEventMock({required data, String? character, bool repeat = false}) : super(data: data, character: character, repeat: repeat);\n  set physicalKey(PhysicalKeyboardKey key) =&gt; key;\n  set logicalKey(LogicalKeyboardKey key) =&gt; key;\n  @override\n  bool isKeyPressed(LogicalKeyboardKey key) {\n    // Showing as false in tests even when simulating key\n    // logical key id - name - physical key id\n    // 4294967309 - enter - 458792\n    // 117 - U - 458776\n    // 97 - A - 458756\n    // if (key.keyId == 4294967309 || key.keyId == 117 || key.keyId == 97) return true;\n    return super.isKeyPressed(key);\n  }\n}\n</code></pre>\n",
        "codigo": [
            "simulateKeyDownEvent",
            "isKeyPressed",
            "void handleKeyPress(RawKeyEvent event) {\n   if (event.isKeyPressed(LogicalKeyboardKey.keyU)) { ... }\n...\n",
            "blocTest<Cubit, State>('Handle key press, increase layer',\n    build: () => cubit, // defined in setup\n    act: (cubit) async {\n      RawKeyEvent mockEnterKey = const RawKeyDownEventMock(\n          data: RawKeyEventDataWindows(keyCode: 13, scanCode: 28, characterCodePoint: 0, modifiers: 0), character: 'enter')\n        ..physicalKey = PhysicalKeyboardKey.enter\n        ..logicalKey = LogicalKeyboardKey.enter;\n      cubit.handleKeyPress(mockEnterKey);\n    },\n    expect: () => [isA<State>().having((state) => state.currentLayer, 'curent layer', initState + 1)]);\n",
            "class RawKeyDownEventMock extends RawKeyEvent {\n  const RawKeyDownEventMock({required data, String? character, bool repeat = false}) : super(data: data, character: character, repeat: repeat);\n  set physicalKey(PhysicalKeyboardKey key) => key;\n  set logicalKey(LogicalKeyboardKey key) => key;\n  @override\n  bool isKeyPressed(LogicalKeyboardKey key) {\n    // Showing as false in tests even when simulating key\n    // logical key id - name - physical key id\n    // 4294967309 - enter - 458792\n    // 117 - U - 458776\n    // 97 - A - 458756\n    // if (key.keyId == 4294967309 || key.keyId == 117 || key.keyId == 97) return true;\n    return super.isKeyPressed(key);\n  }\n}\n"
        ]
    },
    {
        "titulo": "How to mock Navigator.push result in an onchange callback",
        "score": 1,
        "views": 132,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "mockito"
        ],
        "link": "https://stackoverflow.com/questions/73303272/how-to-mock-navigator-push-result-in-an-onchange-callback",
        "conteudo_html": "<p>I have this widget inside a Page :</p>\n<pre><code>FormSelectedWidget(\n  onChanged: () async {\n    Location? result = await Navigator.pushNamed(\n      context,\n      RouteName.searchLocationScreen,\n    ) as Location?;\n\n    if (result != null) {\n      context.read&lt;MyActionCubit&gt;().updateForm();\n    }\n  }\n)        \n\n</code></pre>\n<p>how do i verify updateForm() is called once ?</p>\n<pre><code>verify(\n  () =&gt; MyActionCubit.updateForm(),\n).called(1);\n</code></pre>\n<p>is there any way to mock <code>Location? result</code> using mocktail ?</p>\n",
        "codigo": [
            "FormSelectedWidget(\n  onChanged: () async {\n    Location? result = await Navigator.pushNamed(\n      context,\n      RouteName.searchLocationScreen,\n    ) as Location?;\n\n    if (result != null) {\n      context.read<MyActionCubit>().updateForm();\n    }\n  }\n)        \n\n",
            "verify(\n  () => MyActionCubit.updateForm(),\n).called(1);\n",
            "Location? result"
        ]
    },
    {
        "titulo": "Testing enhanced enums in flutter/dart",
        "score": 2,
        "views": 458,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "enums"
        ],
        "link": "https://stackoverflow.com/questions/72967738/testing-enhanced-enums-in-flutter-dart",
        "conteudo_html": "<p>I was wondering how would we test any of the new enhanced enums, because based on the lcov report it appears as untested</p>\n<p>Example:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>// NORMAL ENUMS\nenum AppRoutes { myRoute1, myRoute2 } // Does not need testing\n\n// ENHANCED ENUMS\nenum EnhancedAppRoutes { // This line does need testing according to lcov report\n  myRoute1('route1'),\n  myRoute2('route2');\n\n  const EnhancedAppRoutes(this.route); // This one is ok\n\n  final String route;\n}\n</code></pre>\n<p>Test file:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>void main() {\n  group('Enum example', () {\n    test('Test enum', () {\n      const Enum e1 = EnhancedAppRoutes.myRoute1,\n          e2 = EnhancedAppRoutes.myRoute2;\n\n      expect(e1.runtimeType != e2.runtimeType, false);\n      expect(Enum.compareByIndex(e1, e2), -1);\n    });\n  });\n}\n</code></pre>\n<p>Lcov.info:</p>\n<pre><code>SF:lib/example_enum.dart\nDA:2,1\nDA:5,0\nDA:9,1\nLF:3\nLH:2\nend_of_record\n</code></pre>\n<p><a href=\"https://i.sstatic.net/1jdlN.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/1jdlN.png\" alt=\"Image\" /></a></p>\n<p>Thanks</p>\n",
        "codigo": [
            "// NORMAL ENUMS\nenum AppRoutes { myRoute1, myRoute2 } // Does not need testing\n\n// ENHANCED ENUMS\nenum EnhancedAppRoutes { // This line does need testing according to lcov report\n  myRoute1('route1'),\n  myRoute2('route2');\n\n  const EnhancedAppRoutes(this.route); // This one is ok\n\n  final String route;\n}\n",
            "void main() {\n  group('Enum example', () {\n    test('Test enum', () {\n      const Enum e1 = EnhancedAppRoutes.myRoute1,\n          e2 = EnhancedAppRoutes.myRoute2;\n\n      expect(e1.runtimeType != e2.runtimeType, false);\n      expect(Enum.compareByIndex(e1, e2), -1);\n    });\n  });\n}\n",
            "SF:lib/example_enum.dart\nDA:2,1\nDA:5,0\nDA:9,1\nLF:3\nLH:2\nend_of_record\n"
        ]
    },
    {
        "titulo": "How to change expect text in dart test",
        "score": 1,
        "views": 313,
        "respostas": 1,
        "tags": [
            "dart",
            "testing",
            "dart-test"
        ],
        "link": "https://stackoverflow.com/questions/72573898/how-to-change-expect-text-in-dart-test",
        "conteudo_html": "<p>Is there a possibility to change the text that is printed if a dart <code>expect</code> fails?</p>\n<p>It works fine with primitives but working with lists of objects makes it really hard to find the difference.</p>\n<p><strong>UPDATE</strong></p>\n<p>Testing library uses <code>toString()</code> method to display the value diffs in the test result. I am using freezed so by default this will just dump all the object properties.<br/>\nA solution is to implement a custom <code>toString</code> in your class to alter how objects are displayed in test result.</p>\n",
        "codigo": [
            "expect",
            "toString()",
            "toString"
        ]
    },
    {
        "titulo": "Could not load source &#39;dart:core-patch/errors_patch.dart&#39;: &lt;source not available&gt;",
        "score": 10,
        "views": 3669,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/72385991/could-not-load-source-dartcore-patch-errors-patch-dart-source-not-available",
        "conteudo_html": "<p>When you run testWidgets in flutter_test.dart</p>\n<p>errors_patch.dart is automatically opened and\nCould not load <code>source 'dart:core-patch/errors_patch.dart': &lt;source not available&gt;. </code>\nand the test fails with the statement.</p>\n<p>widget_test.dart</p>\n<pre><code>import 'dart:async';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:jintonic/data/subscription.dart';\n\nimport 'package:xxxxxxx/main.dart';\nimport 'package:xxxxxxx/view_pages/assets.dart';\nimport 'package:xxxxxxx/view_pages/config.dart';\nimport 'package:xxxxxxx/view_pages/title.dart';\n\nvoid main() {\n    testWidgets('Route title page', (tester) async {\n      await tester.pumpWidget(const ProviderScope(child: MyApp()));\n      expect(find.byWidgetPredicate((widget) =&gt; widget is TitlePage),\n          findsOneWidget);\n    });\n    testWidgets('Tick action test', (tester) async {\n      await tester.pumpWidget(const ProviderScope(\n          child: MyApp()));\n      final BuildContext context = tester\n          .element(find.byWidgetPredicate((widget) =&gt; widget is TitlePage));\n\n      context.go('/assets');\n      await tester.pumpAndSettle();\n\n      expect(find.text('0'), findsOneWidget);\n      expect(find.text('10'), findsNothing);\n\n      await tester\n          .tap(find.byWidgetPredicate((widget) =&gt; widget is IconButton));\n      await tester.pump(const Duration(seconds: 10));\n\n      expect(find.text('10'), findsOneWidget);\n      expect(find.text('0'), findsNothing);\n  });\n}\n</code></pre>\n<p>After examining the cases where errors occur and do not occur in the test, it was found that commenting out the following section would not result in an error.</p>\n<pre><code>import 'dart:async';\n\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'subscription.freezed.dart';\n\nfinal subscriptionProvider =\n    StateNotifierProvider&lt;SubscriptionStateNotifier, SubscriptionState&gt;((ref) {\n  return SubscriptionStateNotifier()\n    ..init(tickerSubscriptionValue: DateTime.now());\n});\n\nfinal tickerSubscriptionValueProvider =\n    Provider((ref) =&gt; ref.watch(subscriptionProvider).tickerSubscriptionValue);\n\nclass SubscriptionStateNotifier extends StateNotifier&lt;SubscriptionState&gt; {\n  SubscriptionStateNotifier()\n      : super(SubscriptionState(tickerSubscriptionValue: DateTime.now()));\n\n  // final Ticker ticker = Ticker();\n  StreamSubscription&lt;int&gt;? tickerSubscription;    \n\n  void init({required DateTime tickerSubscriptionValue}) =&gt;\n      state = state.copyWith(tickerSubscriptionValue: tickerSubscriptionValue);\n\n  void tickerStart() {\n    tickerSubscription?.cancel();\n\n    // tickerSubscription = ticker.tick().listen((duration) {\n    //   state = state.copyWith(tickerSubscriptionValue: DateTime.now());\n    // });\n  }\n}\n\n// class Ticker {\n//   Stream&lt;int&gt; tick() {\n//     return Stream.periodic(\n//       const Duration(seconds: 1),\n//       (x) =&gt; x,\n//     );\n//   }\n// }\n\n@freezed\nabstract class SubscriptionState with _$SubscriptionState {\n  const factory SubscriptionState({required DateTime tickerSubscriptionValue}) =\n      _SubscriptionState;\n}\n</code></pre>\n<h3>Checked.</h3>\n<p>・Q&amp;A about <code>Could not load source 'dart:core-patch/errors_patch.dart': &lt;source not available&gt;.  </code>\n-&gt; Not found. Q&amp;A about another file was found, but not helpful.\n<a href=\"https://stackoverflow.com/questions/54390922/could-not-load-source-dartcore-runtime-libobject-patch-dart-source-not-avai\">Could not load source &#39;dart:core/runtime/libobject_patch.dart&#39;: &lt;source not available&gt;</a></p>\n<h4>Reference Information</h4>\n<p>flutter doctor -v</p>\n<pre><code>[√] Flutter (Channel stable, 3.1.0-0.0.pre.745, on Microsoft Windows [Version 10.0.19044.1706], locale ja-JP)\n    • Flutter version 3.1.0-0.0.pre.745 at C:\\Users\\xxxxx\\flutter\n    • Upstream repository https://github.com/flutter/flutter.git\n    • Framework revision c248854d17 (5 days ago), 2022-05-16 23:57:08 -0400\n    • Engine revision fce741dd83\n    • Dart version 2.18.0 (build 2.18.0-120.0.dev)\n    • DevTools version 2.13.1\n\n[√] Android toolchain - develop for Android devices (Android SDK version 30.0.3)\n    • Android SDK at C:\\Users\\xxxxx\\AppData\\Local\\Android\\Sdk\n    • Platform android-31, build-tools 30.0.3\n    • Java binary at: C:\\Program Files\\Android\\Android Studio\\jre\\bin\\java\n    • Java version OpenJDK Runtime Environment (build 1.8.0_242-release-1644-b01)\n    • All Android licenses accepted.\n\n[√] Android Studio (version 4.1)\n    • Android Studio at C:\\Program Files\\Android\\Android Studio\n    • Flutter plugin can be installed from:\n       https://plugins.jetbrains.com/plugin/9212-flutter\n    • Dart plugin can be installed from:\n       https://plugins.jetbrains.com/plugin/6351-dart\n    • Java version OpenJDK Runtime Environment (build 1.8.0_242-release-1644-b01)\n\n[√] VS Code (version 1.67.2)\n    • VS Code at C:\\Users\\xxxxxx\\AppData\\Local\\Programs\\Microsoft VS Code\n    • Flutter extension version 3.40.0\n\n[√] Connected device (1 available)\n    • AOSP on IA Emulator (mobile) • emulator-5554 • android-x86 • Android 9 (API 28) (emulator)\n\n[√] HTTP Host Availability\n    • All required HTTP hosts are available\n\n• No issues found!\n</code></pre>\n<p>Best regards, please!</p>\n",
        "codigo": [
            "source 'dart:core-patch/errors_patch.dart': <source not available>. ",
            "import 'dart:async';\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:go_router/go_router.dart';\nimport 'package:jintonic/data/subscription.dart';\n\nimport 'package:xxxxxxx/main.dart';\nimport 'package:xxxxxxx/view_pages/assets.dart';\nimport 'package:xxxxxxx/view_pages/config.dart';\nimport 'package:xxxxxxx/view_pages/title.dart';\n\nvoid main() {\n    testWidgets('Route title page', (tester) async {\n      await tester.pumpWidget(const ProviderScope(child: MyApp()));\n      expect(find.byWidgetPredicate((widget) => widget is TitlePage),\n          findsOneWidget);\n    });\n    testWidgets('Tick action test', (tester) async {\n      await tester.pumpWidget(const ProviderScope(\n          child: MyApp()));\n      final BuildContext context = tester\n          .element(find.byWidgetPredicate((widget) => widget is TitlePage));\n\n      context.go('/assets');\n      await tester.pumpAndSettle();\n\n      expect(find.text('0'), findsOneWidget);\n      expect(find.text('10'), findsNothing);\n\n      await tester\n          .tap(find.byWidgetPredicate((widget) => widget is IconButton));\n      await tester.pump(const Duration(seconds: 10));\n\n      expect(find.text('10'), findsOneWidget);\n      expect(find.text('0'), findsNothing);\n  });\n}\n",
            "import 'dart:async';\n\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:freezed_annotation/freezed_annotation.dart';\n\npart 'subscription.freezed.dart';\n\nfinal subscriptionProvider =\n    StateNotifierProvider<SubscriptionStateNotifier, SubscriptionState>((ref) {\n  return SubscriptionStateNotifier()\n    ..init(tickerSubscriptionValue: DateTime.now());\n});\n\nfinal tickerSubscriptionValueProvider =\n    Provider((ref) => ref.watch(subscriptionProvider).tickerSubscriptionValue);\n\nclass SubscriptionStateNotifier extends StateNotifier<SubscriptionState> {\n  SubscriptionStateNotifier()\n      : super(SubscriptionState(tickerSubscriptionValue: DateTime.now()));\n\n  // final Ticker ticker = Ticker();\n  StreamSubscription<int>? tickerSubscription;    \n\n  void init({required DateTime tickerSubscriptionValue}) =>\n      state = state.copyWith(tickerSubscriptionValue: tickerSubscriptionValue);\n\n  void tickerStart() {\n    tickerSubscription?.cancel();\n\n    // tickerSubscription = ticker.tick().listen((duration) {\n    //   state = state.copyWith(tickerSubscriptionValue: DateTime.now());\n    // });\n  }\n}\n\n// class Ticker {\n//   Stream<int> tick() {\n//     return Stream.periodic(\n//       const Duration(seconds: 1),\n//       (x) => x,\n//     );\n//   }\n// }\n\n@freezed\nabstract class SubscriptionState with _$SubscriptionState {\n  const factory SubscriptionState({required DateTime tickerSubscriptionValue}) =\n      _SubscriptionState;\n}\n",
            "Could not load source 'dart:core-patch/errors_patch.dart': <source not available>.  ",
            "[√] Flutter (Channel stable, 3.1.0-0.0.pre.745, on Microsoft Windows [Version 10.0.19044.1706], locale ja-JP)\n    • Flutter version 3.1.0-0.0.pre.745 at C:\\Users\\xxxxx\\flutter\n    • Upstream repository https://github.com/flutter/flutter.git\n    • Framework revision c248854d17 (5 days ago), 2022-05-16 23:57:08 -0400\n    • Engine revision fce741dd83\n    • Dart version 2.18.0 (build 2.18.0-120.0.dev)\n    • DevTools version 2.13.1\n\n[√] Android toolchain - develop for Android devices (Android SDK version 30.0.3)\n    • Android SDK at C:\\Users\\xxxxx\\AppData\\Local\\Android\\Sdk\n    • Platform android-31, build-tools 30.0.3\n    • Java binary at: C:\\Program Files\\Android\\Android Studio\\jre\\bin\\java\n    • Java version OpenJDK Runtime Environment (build 1.8.0_242-release-1644-b01)\n    • All Android licenses accepted.\n\n[√] Android Studio (version 4.1)\n    • Android Studio at C:\\Program Files\\Android\\Android Studio\n    • Flutter plugin can be installed from:\n       https://plugins.jetbrains.com/plugin/9212-flutter\n    • Dart plugin can be installed from:\n       https://plugins.jetbrains.com/plugin/6351-dart\n    • Java version OpenJDK Runtime Environment (build 1.8.0_242-release-1644-b01)\n\n[√] VS Code (version 1.67.2)\n    • VS Code at C:\\Users\\xxxxxx\\AppData\\Local\\Programs\\Microsoft VS Code\n    • Flutter extension version 3.40.0\n\n[√] Connected device (1 available)\n    • AOSP on IA Emulator (mobile) • emulator-5554 • android-x86 • Android 9 (API 28) (emulator)\n\n[√] HTTP Host Availability\n    • All required HTTP hosts are available\n\n• No issues found!\n"
        ]
    },
    {
        "titulo": "Verify path.join is called with certain parameters in mocktail",
        "score": 1,
        "views": 165,
        "respostas": 0,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing",
            "path"
        ],
        "link": "https://stackoverflow.com/questions/72043836/verify-path-join-is-called-with-certain-parameters-in-mocktail",
        "conteudo_html": "<p>I have a function similar to this one below:</p>\n<pre><code>Future&lt;void&gt; saveFile ({\n  required String fileName,\n  required Uint8List bytes,\n  bool permanent = true,\n) async {\n  final directory = permanent ? 'permanentFolder' : 'tempFolder';\n  final filePath = join(directory, fileName);\n  final file = File(filePath);\n  await file.create(recursive: true);\n  await file.writeAsBytes(bytes);\n}\n</code></pre>\n<p>I want to write a test on it that verifies that the method <code>join</code> from <code>package:path/path.dart</code> is being called with the right parameters.</p>\n<pre><code>await saveFile(fileName: 'name', bytes: []);\nverify(() =&gt; join('permanentFolder', 'name')).called(1);\nawait saveFile(fileName: 'name', bytes: [], permanent: false);\nverify(() =&gt; join('tempFolder', 'name')).called(1);\n</code></pre>\n<p>I have not been successful in mocking the <code>join</code> function in order for this test to pass.</p>\n",
        "codigo": [
            "Future<void> saveFile ({\n  required String fileName,\n  required Uint8List bytes,\n  bool permanent = true,\n) async {\n  final directory = permanent ? 'permanentFolder' : 'tempFolder';\n  final filePath = join(directory, fileName);\n  final file = File(filePath);\n  await file.create(recursive: true);\n  await file.writeAsBytes(bytes);\n}\n",
            "join",
            "package:path/path.dart",
            "await saveFile(fileName: 'name', bytes: []);\nverify(() => join('permanentFolder', 'name')).called(1);\nawait saveFile(fileName: 'name', bytes: [], permanent: false);\nverify(() => join('tempFolder', 'name')).called(1);\n",
            "join"
        ]
    },
    {
        "titulo": "How to expect that an exception is thrown in flutter widgets test?",
        "score": 2,
        "views": 1901,
        "respostas": 2,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/72031386/how-to-expect-that-an-exception-is-thrown-in-flutter-widgets-test",
        "conteudo_html": "<p>I have this test:</p>\n<pre><code>testWidgets('Controller must only be used with one widget at a time',\n    (WidgetTester tester) async {\n  final CustomAnimatedWidgetController controller = CustomAnimatedWidgetController();\n\n  await tester.pumpWidget(\n    MaterialApp(\n      home: Scaffold(\n        body: Column(\n          children: [\n            CustomAnimatedWidget(\n              child: Container(),\n              controller: controller,\n            ),\n            CustomAnimatedWidget(// this declaration will throw an exception from initState of this widget\n              child: Container(),\n              controller: controller,\n            ),\n          ],\n        ),\n      ),\n    ),\n  );\n\n  expect(tester.takeException(), isInstanceOf&lt;Exception&gt;());\n});\n</code></pre>\n<p>Which is guaranteed to throw an exception of type <code>Exception</code> (due to using the controller two times), but the <code>expect</code> is not catching the exception. Instead, the test fails and I see my exception thrown in the console.</p>\n<p>But <a href=\"https://stackoverflow.com/a/54262079/9142279\">here</a> and <a href=\"https://api.flutter.dev/flutter/flutter_test/TestWidgetsFlutterBinding/takeException.html\" rel=\"nofollow noreferrer\">here</a> they say this is how it must be used. What is wrong with the test?</p>\n",
        "codigo": [
            "testWidgets('Controller must only be used with one widget at a time',\n    (WidgetTester tester) async {\n  final CustomAnimatedWidgetController controller = CustomAnimatedWidgetController();\n\n  await tester.pumpWidget(\n    MaterialApp(\n      home: Scaffold(\n        body: Column(\n          children: [\n            CustomAnimatedWidget(\n              child: Container(),\n              controller: controller,\n            ),\n            CustomAnimatedWidget(// this declaration will throw an exception from initState of this widget\n              child: Container(),\n              controller: controller,\n            ),\n          ],\n        ),\n      ),\n    ),\n  );\n\n  expect(tester.takeException(), isInstanceOf<Exception>());\n});\n",
            "Exception",
            "expect"
        ]
    },
    {
        "titulo": "Dart test fails even though it throws expected exception",
        "score": 1,
        "views": 317,
        "respostas": 1,
        "tags": [
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/71918040/dart-test-fails-even-though-it-throws-expected-exception",
        "conteudo_html": "<p>I have created the following dart test...</p>\n<pre><code>import 'package:is_a_test/is_a_test.dart';\nimport 'package:test/test.dart';\n\nclass MyException implements Exception {\n\n}\n\nvoid throws() {\n  throw MyException();\n}\n\nvoid main() {\n  test('calculate', () {\n    expect(() =&gt; throws(), throwsA(isA&lt;MyException&gt;));\n  });\n}\n</code></pre>\n<p>The expected result would be a test pass. But instead it fails with...</p>\n<pre><code>Expected: throws &lt;Closure: () =&gt; TypeMatcher&lt;MyException&gt; from Function 'isA': static.&gt;\n  Actual: &lt;Closure: () =&gt; void&gt;\n   Which: threw &lt;Instance of 'MyException'&gt;\nstack test/is_a_test_test.dart 9:3    throws\ntest/is_a_test_test.dart:9\nmain.&lt;fn&gt;.&lt;fn&gt;\n</code></pre>\n",
        "codigo": [
            "import 'package:is_a_test/is_a_test.dart';\nimport 'package:test/test.dart';\n\nclass MyException implements Exception {\n\n}\n\nvoid throws() {\n  throw MyException();\n}\n\nvoid main() {\n  test('calculate', () {\n    expect(() => throws(), throwsA(isA<MyException>));\n  });\n}\n",
            "Expected: throws <Closure: () => TypeMatcher<MyException> from Function 'isA': static.>\n  Actual: <Closure: () => void>\n   Which: threw <Instance of 'MyException'>\nstack test/is_a_test_test.dart 9:3    throws\ntest/is_a_test_test.dart:9\nmain.<fn>.<fn>\n"
        ]
    },
    {
        "titulo": "How do I compare two list in expect function of flutter unit testing?",
        "score": 3,
        "views": 4103,
        "respostas": 2,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/71578026/how-do-i-compare-two-list-in-expect-function-of-flutter-unit-testing",
        "conteudo_html": "<p><code>List&lt;int&gt; l1=[1,2,3];  List&lt;int&gt; l2=[1,2,3];  expect (l1,l2);</code></p>\n<p>This is the code I'm using in Flutter unit testing.</p>\n<p>Eventhough both of the list has the same content I'm not able to pass the test. I'm not able to find the usecase of comparing lists using Equatable in Flutter unit testing. Can someone please help? Thanks!</p>\n",
        "codigo": [
            "List<int> l1=[1,2,3];  List<int> l2=[1,2,3];  expect (l1,l2);"
        ]
    },
    {
        "titulo": "Opening deep link in integration test in Flutter",
        "score": 7,
        "views": 1523,
        "respostas": 2,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "automated-tests"
        ],
        "link": "https://stackoverflow.com/questions/71494721/opening-deep-link-in-integration-test-in-flutter",
        "conteudo_html": "<p>I'm trying to run an integration test which is highly dependent on the user clicking a magic link he got in his email. So far I failed to find a way of doing that. I came across <code>Process.run</code> but it seems like it should be run before the integration test starts and I need to do it during the test.</p>\n<p>Any help with either iOS or Android will be highly appreciated. 🙏</p>\n<p>This is the code I tried so far to work on iOS but <code>Process.run</code> ends with <code>ProcessException: No such file or directory</code>:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>void main() {\n  IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n\n  testWidgets('login test', (WidgetTester tester) async {\n    app_sandbox.main();\n    await tester.pumpAndSettle(Duration(seconds: 5));\n    expect(find.text('foo'), findsOneWidget);\n    await Process.run('xcrun', [\n      'simctl',\n      'openurl',\n      '7D6DEC47-C1E2-4F18-A38B-7B4C17558172',\n      'https://myDeepLink/sign-in',\n    ]);\n    await tester.pumpAndSettle();\n  });\n}\n</code></pre>\n",
        "codigo": [
            "Process.run",
            "Process.run",
            "ProcessException: No such file or directory",
            "void main() {\n  IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n\n  testWidgets('login test', (WidgetTester tester) async {\n    app_sandbox.main();\n    await tester.pumpAndSettle(Duration(seconds: 5));\n    expect(find.text('foo'), findsOneWidget);\n    await Process.run('xcrun', [\n      'simctl',\n      'openurl',\n      '7D6DEC47-C1E2-4F18-A38B-7B4C17558172',\n      'https://myDeepLink/sign-in',\n    ]);\n    await tester.pumpAndSettle();\n  });\n}\n"
        ]
    },
    {
        "titulo": "What are the test description conventions in Flutter and Dart?",
        "score": 3,
        "views": 1029,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "automated-tests"
        ],
        "link": "https://stackoverflow.com/questions/71163209/what-are-the-test-description-conventions-in-flutter-and-dart",
        "conteudo_html": "<p>It seems to me that developers should have resources to some basic and general principles about how to write an appropriate description to a test. Should it be long? Short? Should it include numbers? Operations? And so on...</p>\n<pre><code>void main() {\n  //The first argument is the description I mean\n  test('Counter value should be incremented', () {\n    final counter = Counter();\n\n    counter.increment();\n\n    expect(counter.value, 1);\n  });\n}\n</code></pre>\n<p>I haven't found anything about it in the docs. For reference:</p>\n<p><a href=\"https://dart.dev/guides/language/effective-dart/design\" rel=\"nofollow noreferrer\">Effective Dart: Style</a></p>\n<p><a href=\"https://dart.dev/guides/language/effective-dart/design\" rel=\"nofollow noreferrer\">Effective Dart: Design</a></p>\n<p><a href=\"https://dart.dev/guides/testing\" rel=\"nofollow noreferrer\">Dart testing</a></p>\n<p><a href=\"https://docs.flutter.dev/cookbook/testing/unit/introduction\" rel=\"nofollow noreferrer\">An introduction to unit testing</a></p>\n<p>Is this then completely open? If so, and answer confirming that this is the case would also be appreciated. Thank you in advance.</p>\n",
        "codigo": [
            "void main() {\n  //The first argument is the description I mean\n  test('Counter value should be incremented', () {\n    final counter = Counter();\n\n    counter.increment();\n\n    expect(counter.value, 1);\n  });\n}\n"
        ]
    },
    {
        "titulo": "How to test a void function in Dart?",
        "score": 2,
        "views": 8868,
        "respostas": 6,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing",
            "flutter-test"
        ],
        "link": "https://stackoverflow.com/questions/70978874/how-to-test-a-void-function-in-dart",
        "conteudo_html": "<p>I am new to unit tests in Dart/Flutter and I would like to write a test for a void function. When functions return something I am writing a test like this:</p>\n<pre><code>test('Gets user save', () async {\n      final userSave = await mockSource!.getUserSave();\n      expect(userSave!.age, equals(20));\n});\n</code></pre>\n<p>In such a scenario like above <code>expect</code> can be used since <code>getUserSave</code> function returns a user model.</p>\n<p>How about checking if  test passes of fails for a void/Future function like below? I can not use <code>expect</code> because it does not return a value.</p>\n<pre><code>Future&lt;void&gt; clearUserSave() async {\n    DatabaseClient mockDBClient = MockDatabaseClientImpl();\n    mockDBClient.clear();\n}\n</code></pre>\n<p>I use <code>flutter_test</code> and <code>mockito</code> for testing.</p>\n",
        "codigo": [
            "test('Gets user save', () async {\n      final userSave = await mockSource!.getUserSave();\n      expect(userSave!.age, equals(20));\n});\n",
            "expect",
            "getUserSave",
            "expect",
            "Future<void> clearUserSave() async {\n    DatabaseClient mockDBClient = MockDatabaseClientImpl();\n    mockDBClient.clear();\n}\n",
            "flutter_test",
            "mockito"
        ]
    },
    {
        "titulo": "Flutter / Dart : How to write tests in Flutter",
        "score": 1,
        "views": 72,
        "respostas": 0,
        "tags": [
            "android",
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/70691741/flutter-dart-how-to-write-tests-in-flutter",
        "conteudo_html": "<pre><code>//sample(A),(UI and business logic are separated.)\nimport 'package:flutter/material.dart';\nimport 'dart:math';\n\nimport 'package:provider/provider.dart';\n\n\nclass IntNotifier extends ChangeNotifier{\n  int finalContent = 0;\n  int originalContent = 0;\n\n\n  void setContent(){\n    originalContent = Random().nextInt(10);\n    finalContent = originalContent &lt;5 ? 5 : originalContent;\n    notifyListeners();\n  }\n}\n\nvoid main() {\n  runApp(\n    ChangeNotifierProvider(\n      create:(_)=&gt;IntNotifier(),\n      child: MaterialApp(\n        home: MyApp(),\n      ),\n    ),\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final intNotifier = Provider.of&lt;IntNotifier&gt;(context);\n    return Scaffold(\n      body: Container(\n        color:Colors.lightBlueAccent[100],\n        child: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Text(\n                '${intNotifier.finalContent}',\n                style: TextStyle(\n                  fontSize: 80.0,\n                ),\n              ),\n\n              Text(\n                '(${intNotifier.originalContent})',\n                style: TextStyle(\n                  fontSize: 30.0,\n                  color: Colors.grey\n                ),\n              ),\n\n            ],\n          ),\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed:intNotifier.setContent,\n      ),\n    );\n  }\n}\n</code></pre>\n<p>(1) I don't know exactly how to write tests.</p>\n<p>For example, in the above code, how should I write a test code to check that the value of &quot;finalContent&quot; is greater than or equal to 5 when setContent is called?</p>\n<p>For now, I wrote the following unit test code.\nIt seems to confirm what I want to confirm, but how is it usually written?</p>\n<p>Since this is a test about IntNotifier, I think I probably need to use IntNotifier and setContent method, but I am not sure how exactly to use it.</p>\n<pre><code>import 'package:flutter_test/flutter_test.dart';\n\nvoid main(){\n  test('more than five',(){\n\n    int finalContent = 0;\n    int originalContent = 0;\n\n    originalContent = -1;\n    finalContent = originalContent &lt;5 ? 5 : originalContent;\n    expect(finalContent&gt;=5,true);\n\n    originalContent = 0;\n    finalContent = originalContent &lt;5 ? 5 : originalContent;\n    expect(finalContent&gt;=5,true);\n\n    originalContent = 1;\n    finalContent = originalContent &lt;5 ? 5 : originalContent;\n    expect(finalContent&gt;=5,true);\n\n    originalContent = 4;\n    finalContent = originalContent &lt;5 ? 5 : originalContent;\n    expect(finalContent&gt;=5,true);\n\n    originalContent = 5;\n    finalContent = originalContent &lt;5 ? 5 : originalContent;\n    expect(finalContent&gt;=5,true);\n\n    originalContent = 8;\n    finalContent = originalContent &lt;5 ? 5 : originalContent;\n    expect(finalContent&gt;=5,true);\n\n  });\n}\n</code></pre>\n<hr />\n<p>(2)\n<a href=\"https://developer.android.com/jetpack/guide\" rel=\"nofollow noreferrer\">https://developer.android.com/jetpack/guide</a></p>\n<p>On the above page and other pages as we talk about app architecture.\n&quot;Separating the 'UI code' from the 'business logic code' will make your app easier to test.&quot;\nThis has been said a lot.\nHowever, I myself don't know how to write tests, so I don't know exactly why separating UI and business logic makes it easier to test.</p>\n<p>An example where the UI and business logic are not separated would probably be the following code using StatefulWidget.</p>\n<pre><code>//sample(B),(UI and business logic are separated.))\nimport 'package:flutter/material.dart';\nimport 'dart:math';\n\nvoid main() {\n  runApp(MaterialApp(home: MyApp(),\n      ),\n  );\n}\n\nclass MyApp extends StatefulWidget {\n  @override\n  _MyAppState createState() =&gt; _MyAppState();\n}\n\nclass _MyAppState extends State&lt;MyApp&gt; {\n  int originalContent = 0;\n  int finalContent = 0;\n\n  void setContent(){\n    setState((){\n      originalContent = Random().nextInt(10);\n      finalContent = originalContent &lt;5 ? 5 : originalContent;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        color:Colors.orangeAccent,\n        child: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Text(\n                '${finalContent}',\n                style: TextStyle(\n                  fontSize: 80.0,\n                ),\n              ),\n\n              Text(\n                '(${originalContent})',\n                style: TextStyle(\n                    fontSize: 30.0,\n                    color: Colors.grey\n                ),\n              ),\n\n            ],\n          ),\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed:setContent,\n      ),\n    );\n  }\n}\n</code></pre>\n<p>&quot;In sample(A), we can write the following test code.\nBut with sample(B), we have to write this kind of test code.\nSo sample(A) is better for us.&quot;\nPlease explain the above story using concrete test code.</p>\n",
        "codigo": [
            "//sample(A),(UI and business logic are separated.)\nimport 'package:flutter/material.dart';\nimport 'dart:math';\n\nimport 'package:provider/provider.dart';\n\n\nclass IntNotifier extends ChangeNotifier{\n  int finalContent = 0;\n  int originalContent = 0;\n\n\n  void setContent(){\n    originalContent = Random().nextInt(10);\n    finalContent = originalContent <5 ? 5 : originalContent;\n    notifyListeners();\n  }\n}\n\nvoid main() {\n  runApp(\n    ChangeNotifierProvider(\n      create:(_)=>IntNotifier(),\n      child: MaterialApp(\n        home: MyApp(),\n      ),\n    ),\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final intNotifier = Provider.of<IntNotifier>(context);\n    return Scaffold(\n      body: Container(\n        color:Colors.lightBlueAccent[100],\n        child: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Text(\n                '${intNotifier.finalContent}',\n                style: TextStyle(\n                  fontSize: 80.0,\n                ),\n              ),\n\n              Text(\n                '(${intNotifier.originalContent})',\n                style: TextStyle(\n                  fontSize: 30.0,\n                  color: Colors.grey\n                ),\n              ),\n\n            ],\n          ),\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed:intNotifier.setContent,\n      ),\n    );\n  }\n}\n",
            "import 'package:flutter_test/flutter_test.dart';\n\nvoid main(){\n  test('more than five',(){\n\n    int finalContent = 0;\n    int originalContent = 0;\n\n    originalContent = -1;\n    finalContent = originalContent <5 ? 5 : originalContent;\n    expect(finalContent>=5,true);\n\n    originalContent = 0;\n    finalContent = originalContent <5 ? 5 : originalContent;\n    expect(finalContent>=5,true);\n\n    originalContent = 1;\n    finalContent = originalContent <5 ? 5 : originalContent;\n    expect(finalContent>=5,true);\n\n    originalContent = 4;\n    finalContent = originalContent <5 ? 5 : originalContent;\n    expect(finalContent>=5,true);\n\n    originalContent = 5;\n    finalContent = originalContent <5 ? 5 : originalContent;\n    expect(finalContent>=5,true);\n\n    originalContent = 8;\n    finalContent = originalContent <5 ? 5 : originalContent;\n    expect(finalContent>=5,true);\n\n  });\n}\n",
            "//sample(B),(UI and business logic are separated.))\nimport 'package:flutter/material.dart';\nimport 'dart:math';\n\nvoid main() {\n  runApp(MaterialApp(home: MyApp(),\n      ),\n  );\n}\n\nclass MyApp extends StatefulWidget {\n  @override\n  _MyAppState createState() => _MyAppState();\n}\n\nclass _MyAppState extends State<MyApp> {\n  int originalContent = 0;\n  int finalContent = 0;\n\n  void setContent(){\n    setState((){\n      originalContent = Random().nextInt(10);\n      finalContent = originalContent <5 ? 5 : originalContent;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Container(\n        color:Colors.orangeAccent,\n        child: Center(\n          child: Column(\n            mainAxisAlignment: MainAxisAlignment.center,\n            children: [\n              Text(\n                '${finalContent}',\n                style: TextStyle(\n                  fontSize: 80.0,\n                ),\n              ),\n\n              Text(\n                '(${originalContent})',\n                style: TextStyle(\n                    fontSize: 30.0,\n                    color: Colors.grey\n                ),\n              ),\n\n            ],\n          ),\n        ),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed:setContent,\n      ),\n    );\n  }\n}\n"
        ]
    },
    {
        "titulo": "Flutter tests: `throwsA` followed by `ensureInitialized() + returnsNormally` breaks the test",
        "score": 0,
        "views": 316,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/70612129/flutter-tests-throwsa-followed-by-ensureinitialized-returnsnormally-bre",
        "conteudo_html": "<p>I'm unit testing a feature using Flutter tests and dividing tests by groups.\n<br />\nI've noticed that if I don't use <code>TestWidgetsFlutterBinding.ensureInitialized()</code> I get some error in the <code>fetchTripList</code> asynchronous method, so I wrote a test for it when FlutterBinding is not initialized (see the first group in the picture). It works fine as long as I do not initialize the FlutterBinding in the group <code>SetUp(...)</code>.\n<br />\nThen, in the next test group, I use the <code>ensureInitialized()</code> method so that <code>fetchTripList</code> returns normally. However, I get a TestFailure because it seems that FlutterBinding was not initialized... Moreover, subsequent similar tests that require FlutterBinding to be initialized succeed.</p>\n<p>The &quot;Null check operator ...&quot; refers to an Exception thrown by <code>await rootBundle.loadString(...)</code> in the <code>fetchTripList</code> method.</p>\n<p>Things I've tried:</p>\n<ul>\n<li>I've tried to comment out the first test group, and everything succeeded.</li>\n<li>I've tried to move the first test group at the end of the test suite, but that failed because FlutterBinding was already (and permanently) initialized.</li>\n<li>I've tried to remove the <code>late</code> + <code>setUp(...)</code> initialization in favor of a plain inline allocation/initialization, but nothing changed.</li>\n</ul>\n<p>At this point, I'm guessing different options:</p>\n<ol>\n<li><em>returnsNormally</em> should not be wrapped by an <code>await expectLater(...)</code></li>\n<li>there is an alternative to <code>throwsA(...)</code> I could make use of</li>\n<li>I should create a new file only for the first group (it's not something I'd like to do)</li>\n</ol>\n<p><a href=\"https://i.sstatic.net/WLUe1.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/WLUe1.png\" alt=\"Test suite screenshot\" /></a></p>\n<p>Does anyone have an idea of what could be the issue or how to solve this riddle?</p>\n",
        "codigo": [
            "TestWidgetsFlutterBinding.ensureInitialized()",
            "fetchTripList",
            "SetUp(...)",
            "ensureInitialized()",
            "fetchTripList",
            "await rootBundle.loadString(...)",
            "fetchTripList",
            "late",
            "setUp(...)",
            "await expectLater(...)",
            "throwsA(...)"
        ]
    },
    {
        "titulo": "How can I do this in Flutter Testing",
        "score": 3,
        "views": 1238,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "widget",
            "widget-test-flutter"
        ],
        "link": "https://stackoverflow.com/questions/70417275/how-can-i-do-this-in-flutter-testing",
        "conteudo_html": "<p>I'm new to Flutter testing and was hoping If you could help me. I've a class called AddShimmer that looks like this -&gt;</p>\n<pre><code>AddShimmer(\n          child: ListTile(\n            title: buildLoadingAnimation(context),\n          ),\n        ),\n</code></pre>\n<p>Now, I'm trying to write a flutter test just to check if a child widget is being passed to the AddShimmer class. To do that, I'm writing something like this -&gt;</p>\n<pre><code>testWidgets('Shimmer has a child widget', (WidgetTester tester) async {\n    const childWidget = ListTile(\n      title: Text('Loading'),\n    );\n    await tester.pumpWidget(\n     const AddShimmer(child: childWidget)\n    );\n    expect(find.byWidget(childWidget), findsOneWidget);\n  });\n</code></pre>\n<p>While I'm executing the test, I'm getting an exception which says -&gt;</p>\n<pre><code>The following assertion was thrown building ListTile(dirty):\nNo Directionality widget found.\nListTile widgets require a Directionality widget ancestor.\nThe specific widget that could not find a Directionality ancestor was:\n  ListTile\n</code></pre>\n<p>What does it mean and how to test this out ??</p>\n",
        "codigo": [
            "AddShimmer(\n          child: ListTile(\n            title: buildLoadingAnimation(context),\n          ),\n        ),\n",
            "testWidgets('Shimmer has a child widget', (WidgetTester tester) async {\n    const childWidget = ListTile(\n      title: Text('Loading'),\n    );\n    await tester.pumpWidget(\n     const AddShimmer(child: childWidget)\n    );\n    expect(find.byWidget(childWidget), findsOneWidget);\n  });\n",
            "The following assertion was thrown building ListTile(dirty):\nNo Directionality widget found.\nListTile widgets require a Directionality widget ancestor.\nThe specific widget that could not find a Directionality ancestor was:\n  ListTile\n"
        ]
    },
    {
        "titulo": "MissingStubError when add Future method in constructor dart",
        "score": 1,
        "views": 203,
        "respostas": 0,
        "tags": [
            "unit-testing",
            "dart",
            "testing",
            "stream",
            "mockito-dart"
        ],
        "link": "https://stackoverflow.com/questions/70319420/missingstuberror-when-add-future-method-in-constructor-dart",
        "conteudo_html": "<p>i tried to make a similar footsteps some youtube guideline (bloc) and run perfectly in production code. The bloc guideline shows to input an asynchonous function in constructor, but when i create a simple success test occurs the error MissingStubError.</p>\n<p>Here is the UseCase for request API (mock):</p>\n<pre><code>abstract class UseCase {\n  Future&lt;List&lt;String&gt;&gt; call();\n}\n</code></pre>\n<p>The state management classes:</p>\n<pre><code>abstract class TestState {}\n\nclass TestStateLoading extends Equatable implements TestState {\n  const TestStateLoading();\n\n  @override\n  List&lt;Object?&gt; get props =&gt; [];\n}\n\nclass TestStateLoaded extends Equatable implements TestState {\n  final List&lt;String&gt; tests;\n\n  const TestStateLoaded(this.tests);\n\n  @override\n  List&lt;Object?&gt; get props =&gt; [tests];\n}\n\nclass TestStateError extends Equatable implements TestState {\n  final String error;\n\n  const TestStateError(this.error);\n\n  @override\n  List&lt;Object?&gt; get props =&gt; [error];\n}\n</code></pre>\n<p>Here the Presenter. I use the external library Rxdart to use reactive programming (switchMap):</p>\n<pre><code>class StreamTestPresenter implements TestPresenter {\n  final UseCase _useCase;\n\n  StreamTestPresenter({required UseCase usecase}) : _useCase = usecase {\n    loadData();\n  }\n\n  final _controller = StreamController&lt;List&lt;String&gt;&gt;();\n\n  Sink&lt;List&lt;String&gt;&gt; get sink =&gt; _controller.sink;\n\n  @override\n  Stream&lt;TestState&gt; get testStream =&gt; _controller.stream.switchMap(_tests);\n\n  Stream&lt;TestState&gt; _tests(List&lt;String&gt; tests) async* {\n    yield TestStateLoading();\n    try {\n      yield TestStateLoaded(tests);\n    } catch (e) {\n      yield TestStateError(e.toString());\n    }\n  }\n\n  Future&lt;void&gt; loadData() async {\n    final tests = await _useCase.call();\n    sink.add(tests);\n  }\n}\n</code></pre>\n<p>And the test. In act section, i tried to use await sut.loadData(); and without it:</p>\n<pre><code>@GenerateMocks([UseCase])\nvoid main() {\n  late StreamTestPresenter sut;\n  late MockUseCase usecase;\n\n  setUp(() {\n    usecase = MockUseCase();\n    sut = StreamTestPresenter(usecase: usecase);\n    when(usecase.call()).thenAnswer((_) async =&gt; ['a', 'b', 'c']);\n  });\n  test('Should emit correct events on UseCase success', () async {\n    //arrange\n    final stream = sut.testStream;\n    //assert\n    expectLater(\n      stream,\n      emitsInOrder([\n        const TestStateLoading(),\n        const TestStateLoaded(['a', 'b', 'c']),\n      ]),\n    );\n    //act\n  });\n}\n</code></pre>\n<p>Here is the error:</p>\n<pre><code>MissingStubError: 'call'\nNo stub was found which matches the arguments of this method call:\ncall()\n\nAdd a stub for this method using Mockito's 'when' API, or generate the mock for MockUseCase with 'returnNullOnMissingStub: true'.\npackage:mockito/src/mock.dart 190:7                    Mock._noSuchMethod\npackage:mockito/src/mock.dart 184:45                   Mock.noSuchMethod\ntest\\stream_test_presenter_test.mocks.dart 29:14       MockUseCase.call\npackage:stub_problem/stream_test_presenter.dart 33:34  StreamTestPresenter.loadData\npackage:stub_problem/stream_test_presenter.dart 13:5   new StreamTestPresenter\ntest\\stream_test_presenter_test.dart 17:11             main.&lt;fn&gt;\n===== asynchronous gap ===========================\ndart:async                                             _completeOnAsyncError\npackage:stub_problem/stream_test_presenter.dart        StreamTestPresenter.loadData\npackage:stub_problem/stream_test_presenter.dart 13:5   new StreamTestPresenter\ntest\\stream_test_presenter_test.dart 17:11             main.&lt;fn&gt;\n</code></pre>\n<p>Obs: When i remove the function in constructor and apply the test in act section with await sut.loadData(); works perfectly.</p>\n",
        "codigo": [
            "abstract class UseCase {\n  Future<List<String>> call();\n}\n",
            "abstract class TestState {}\n\nclass TestStateLoading extends Equatable implements TestState {\n  const TestStateLoading();\n\n  @override\n  List<Object?> get props => [];\n}\n\nclass TestStateLoaded extends Equatable implements TestState {\n  final List<String> tests;\n\n  const TestStateLoaded(this.tests);\n\n  @override\n  List<Object?> get props => [tests];\n}\n\nclass TestStateError extends Equatable implements TestState {\n  final String error;\n\n  const TestStateError(this.error);\n\n  @override\n  List<Object?> get props => [error];\n}\n",
            "class StreamTestPresenter implements TestPresenter {\n  final UseCase _useCase;\n\n  StreamTestPresenter({required UseCase usecase}) : _useCase = usecase {\n    loadData();\n  }\n\n  final _controller = StreamController<List<String>>();\n\n  Sink<List<String>> get sink => _controller.sink;\n\n  @override\n  Stream<TestState> get testStream => _controller.stream.switchMap(_tests);\n\n  Stream<TestState> _tests(List<String> tests) async* {\n    yield TestStateLoading();\n    try {\n      yield TestStateLoaded(tests);\n    } catch (e) {\n      yield TestStateError(e.toString());\n    }\n  }\n\n  Future<void> loadData() async {\n    final tests = await _useCase.call();\n    sink.add(tests);\n  }\n}\n",
            "@GenerateMocks([UseCase])\nvoid main() {\n  late StreamTestPresenter sut;\n  late MockUseCase usecase;\n\n  setUp(() {\n    usecase = MockUseCase();\n    sut = StreamTestPresenter(usecase: usecase);\n    when(usecase.call()).thenAnswer((_) async => ['a', 'b', 'c']);\n  });\n  test('Should emit correct events on UseCase success', () async {\n    //arrange\n    final stream = sut.testStream;\n    //assert\n    expectLater(\n      stream,\n      emitsInOrder([\n        const TestStateLoading(),\n        const TestStateLoaded(['a', 'b', 'c']),\n      ]),\n    );\n    //act\n  });\n}\n",
            "MissingStubError: 'call'\nNo stub was found which matches the arguments of this method call:\ncall()\n\nAdd a stub for this method using Mockito's 'when' API, or generate the mock for MockUseCase with 'returnNullOnMissingStub: true'.\npackage:mockito/src/mock.dart 190:7                    Mock._noSuchMethod\npackage:mockito/src/mock.dart 184:45                   Mock.noSuchMethod\ntest\\stream_test_presenter_test.mocks.dart 29:14       MockUseCase.call\npackage:stub_problem/stream_test_presenter.dart 33:34  StreamTestPresenter.loadData\npackage:stub_problem/stream_test_presenter.dart 13:5   new StreamTestPresenter\ntest\\stream_test_presenter_test.dart 17:11             main.<fn>\n===== asynchronous gap ===========================\ndart:async                                             _completeOnAsyncError\npackage:stub_problem/stream_test_presenter.dart        StreamTestPresenter.loadData\npackage:stub_problem/stream_test_presenter.dart 13:5   new StreamTestPresenter\ntest\\stream_test_presenter_test.dart 17:11             main.<fn>\n"
        ]
    },
    {
        "titulo": "Why does an unawaited Future error make my test fail?",
        "score": 0,
        "views": 1448,
        "respostas": 1,
        "tags": [
            "dart",
            "testing",
            "async-await"
        ],
        "link": "https://stackoverflow.com/questions/70108642/why-does-an-unawaited-future-error-make-my-test-fail",
        "conteudo_html": "<p>Given this minimal test</p>\n<pre class=\"lang-dart prettyprint-override\"><code>      test('ignore failures', () {\n        Future&lt;void&gt; failingFunc() async {\n          throw Exception('BOOOOM');\n        }\n\n        failingFunc();\n      });\n</code></pre>\n<p>The test fails with this output :</p>\n<pre><code>Exception: BOOOOM\nmain.&lt;fn&gt;.&lt;fn&gt;.&lt;fn&gt;.failingFunc\ntest/…/auth/auth_action_bloc_test.dart:374\nmain.&lt;fn&gt;.&lt;fn&gt;.&lt;fn&gt;\ntest/…/auth/auth_action_bloc_test.dart:377\n===== asynchronous gap ===========================\ndart:async                                                 _AsyncAwaitCompleter.completeError\ntest/unit/features/auth/auth_action_bloc_test.dart         main.&lt;fn&gt;.&lt;fn&gt;.&lt;fn&gt;.failingFunc\ntest/…/auth/auth_action_bloc_test.dart:1\nmain.&lt;fn&gt;.&lt;fn&gt;.&lt;fn&gt;\ntest/…/auth/auth_action_bloc_test.dart:377\n</code></pre>\n<p><strong>In don't understand why that test fails.</strong></p>\n<p>My understanding is that <code>failingFunc()</code> would fail “silently” because it’s not <em>awaited</em>.  (i.e. the exception would be thrown “somewhere else”, and just ignored)\nI’m (almost) certain that such a thing in production code would work just fine.</p>\n<p>The following test does fail the way I expect it to  (i.e. adding an <code>await</code> ) :</p>\n<pre class=\"lang-dart prettyprint-override\"><code>      test('ignore failures', () async {\n        Future&lt;void&gt; failingFunc() async {\n          throw Exception('BOOOOM');\n        }\n\n        await failingFunc();\n      });\n</code></pre>\n<p>and it fails as expected with</p>\n<pre><code>Exception: BOOOOM\nmain.&lt;fn&gt;.&lt;fn&gt;.&lt;fn&gt;.failingFunc\ntest/…/auth/auth_action_bloc_test.dart:374\nmain.&lt;fn&gt;.&lt;fn&gt;.&lt;fn&gt;\ntest/…/auth/auth_action_bloc_test.dart:377\n</code></pre>\n",
        "codigo": [
            "      test('ignore failures', () {\n        Future<void> failingFunc() async {\n          throw Exception('BOOOOM');\n        }\n\n        failingFunc();\n      });\n",
            "Exception: BOOOOM\nmain.<fn>.<fn>.<fn>.failingFunc\ntest/…/auth/auth_action_bloc_test.dart:374\nmain.<fn>.<fn>.<fn>\ntest/…/auth/auth_action_bloc_test.dart:377\n===== asynchronous gap ===========================\ndart:async                                                 _AsyncAwaitCompleter.completeError\ntest/unit/features/auth/auth_action_bloc_test.dart         main.<fn>.<fn>.<fn>.failingFunc\ntest/…/auth/auth_action_bloc_test.dart:1\nmain.<fn>.<fn>.<fn>\ntest/…/auth/auth_action_bloc_test.dart:377\n",
            "failingFunc()",
            "await",
            "      test('ignore failures', () async {\n        Future<void> failingFunc() async {\n          throw Exception('BOOOOM');\n        }\n\n        await failingFunc();\n      });\n",
            "Exception: BOOOOM\nmain.<fn>.<fn>.<fn>.failingFunc\ntest/…/auth/auth_action_bloc_test.dart:374\nmain.<fn>.<fn>.<fn>\ntest/…/auth/auth_action_bloc_test.dart:377\n"
        ]
    },
    {
        "titulo": "How can I verify that a request has been made using http_mock_adapter?",
        "score": 0,
        "views": 498,
        "respostas": 1,
        "tags": [
            "unit-testing",
            "dart",
            "testing",
            "mocking"
        ],
        "link": "https://stackoverflow.com/questions/70079305/how-can-i-verify-that-a-request-has-been-made-using-http-mock-adapter",
        "conteudo_html": "<p>I'm using <a href=\"https://pub.dev/packages/http_mock_adapter\" rel=\"nofollow noreferrer\">http_mock_adaper</a> to mock Dio HTTP requests. That part works fine, but the thing I am having problems with is verifying that a request has been made using.</p>\n<p>One idea I had was to call mockito's <code>verify()</code> with <code>dio.get(any)</code> or <code>adapter.onGet(any, any)</code> as a parameter, but that obviously won't work, since those classes are not mocked using mockito.</p>\n<p>Another option I have is to mock the class that calls dio, but that means that I would have to stub every method that is called (Again, since the actual HTTP calls have already been mocked), and I would like to avoid that if possible.</p>\n<p>Is there a way to verify that a HTTP call has been made with http_mock_adaper, or is my last option the only / best solution?</p>\n",
        "codigo": [
            "verify()",
            "dio.get(any)",
            "adapter.onGet(any, any)"
        ]
    },
    {
        "titulo": "Dart: Failed to load &quot;test/xxx_test.dart&quot;: Instance of &#39;OutsideTestException&#39;",
        "score": 12,
        "views": 3416,
        "respostas": 1,
        "tags": [
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/70062248/dart-failed-to-load-test-xxx-test-dart-instance-of-outsidetestexception",
        "conteudo_html": "<p>When I try to run the following test:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>import 'package:my_project/my_file.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  group('int extensions:', () {\n    expect(1.digits(), 1);\n    expect(10.digits(), 2);\n    expect(100.digits(), 3);\n  });\n}\n</code></pre>\n<p>I get the following error message:</p>\n<blockquote>\n<p>Failed to load &quot;test/my_file_test.dart&quot;: Instance of 'OutsideTestException'</p>\n</blockquote>\n<p>The answer is probably obvious most people coming here now, but it took me a while to realize what was wrong. I'm adding my answer below for other people with the same problem.</p>\n",
        "codigo": [
            "import 'package:my_project/my_file.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  group('int extensions:', () {\n    expect(1.digits(), 1);\n    expect(10.digits(), 2);\n    expect(100.digits(), 3);\n  });\n}\n"
        ]
    },
    {
        "titulo": "mocking Dio is not working to test my app in Flutter",
        "score": 3,
        "views": 7639,
        "respostas": 2,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "mockito",
            "dio"
        ],
        "link": "https://stackoverflow.com/questions/70057680/mocking-dio-is-not-working-to-test-my-app-in-flutter",
        "conteudo_html": "<p>I am trying to write unit tests for my request with Dio but I keep getting this error:\n<strong>type 'Null' is not a subtype of type 'BaseOptions'</strong></p>\n<p>I tried adding the base options on DioMock in a lot of different ways but the test remains the same.\nHow can I fix it?</p>\n<p>Bellow are my Network class and the test class.</p>\n<pre><code>class NetworkService {\n\n  final Dio dio;\n\n  NetworkService(this.dio){\n    dio.options.baseUrl = &quot;https://food2fork.ca/api/recipe/search&quot;;\n    dio.options.headers['Authorization'] = 'Token 9c8b06d329136da358c2d00e76946b0111ce2c48';\n\n    dio.interceptors.add(InterceptorsWrapper(\n      onRequest: (options, handler){\n        print('base ${options.baseUrl}');\n        print(&quot;PATH: ${options.path}&quot;);\n        return handler.next(options);\n      },\n      onResponse: (response, handler){\n        print(&quot;RESPONSE: ${response.statusCode}  PATH: ${response.requestOptions.path}&quot;);\n    return handler.next(response);\n    },\n      onError: (DioError e, handler){\n        print(&quot;ERROR: ${e.response?.statusCode} =&gt; PATH: ${e.requestOptions.path}&quot;);\n        return handler.next(e);\n      }\n    ));\n  }\n\n  Future&lt;List&lt;Recipe&gt;&gt; getRecipe() async {\n    var response = await dio.get('/?page=1&amp;query=beef');\n    print(&quot;response ${response.data}&quot;);\n    if(response.statusCode == 200){\n      final List&lt;Recipe&gt; recipeList = [];\n      for(Map&lt;String, dynamic&gt; recipe in response.data['results']){\n        recipeList.add(Recipe.fromJson(recipe));\n      }\n      return recipeList;\n    } else {\n      throw Exception('sss');\n    }\n\n  // ONBOARDING\n  }\n}\n</code></pre>\n<pre><code>class DioMock extends Mock implements DioForNative {}\n\nclass RecipeMock extends Mock implements Recipe {}\n\nmain() {\n\n  final dio = DioMock();\n\n  final service = NetworkService(dio);\n\n  dio.options.baseUrl = &quot;https://food2fork.ca/api/recipe/search&quot;;\n  dio.options.headers =  { 'Content-type': 'application/json', 'Accept': 'application/json' };\n\n  test(&quot;should return Onboarding Model&quot;, () async {\n    final response = Response(\n        requestOptions: RequestOptions(\n            path: 'gfh',\n          baseUrl: &quot;fgh&quot;\n        ),\n        data: RecipeMock()\n\n    );\n    when(dio.get(\n        &quot;https://food2fork.ca/api/recipe/search&quot;))\n        .thenAnswer((_) async =&gt; response);\n\n    final result = await service.getRecipe();\n    expect(result, isA&lt;Recipe&gt;());\n\n  });\n}\n</code></pre>\n",
        "codigo": [
            "class NetworkService {\n\n  final Dio dio;\n\n  NetworkService(this.dio){\n    dio.options.baseUrl = \"https://food2fork.ca/api/recipe/search\";\n    dio.options.headers['Authorization'] = 'Token 9c8b06d329136da358c2d00e76946b0111ce2c48';\n\n    dio.interceptors.add(InterceptorsWrapper(\n      onRequest: (options, handler){\n        print('base ${options.baseUrl}');\n        print(\"PATH: ${options.path}\");\n        return handler.next(options);\n      },\n      onResponse: (response, handler){\n        print(\"RESPONSE: ${response.statusCode}  PATH: ${response.requestOptions.path}\");\n    return handler.next(response);\n    },\n      onError: (DioError e, handler){\n        print(\"ERROR: ${e.response?.statusCode} => PATH: ${e.requestOptions.path}\");\n        return handler.next(e);\n      }\n    ));\n  }\n\n  Future<List<Recipe>> getRecipe() async {\n    var response = await dio.get('/?page=1&query=beef');\n    print(\"response ${response.data}\");\n    if(response.statusCode == 200){\n      final List<Recipe> recipeList = [];\n      for(Map<String, dynamic> recipe in response.data['results']){\n        recipeList.add(Recipe.fromJson(recipe));\n      }\n      return recipeList;\n    } else {\n      throw Exception('sss');\n    }\n\n  // ONBOARDING\n  }\n}\n",
            "class DioMock extends Mock implements DioForNative {}\n\nclass RecipeMock extends Mock implements Recipe {}\n\nmain() {\n\n  final dio = DioMock();\n\n  final service = NetworkService(dio);\n\n  dio.options.baseUrl = \"https://food2fork.ca/api/recipe/search\";\n  dio.options.headers =  { 'Content-type': 'application/json', 'Accept': 'application/json' };\n\n  test(\"should return Onboarding Model\", () async {\n    final response = Response(\n        requestOptions: RequestOptions(\n            path: 'gfh',\n          baseUrl: \"fgh\"\n        ),\n        data: RecipeMock()\n\n    );\n    when(dio.get(\n        \"https://food2fork.ca/api/recipe/search\"))\n        .thenAnswer((_) async => response);\n\n    final result = await service.getRecipe();\n    expect(result, isA<Recipe>());\n\n  });\n}\n"
        ]
    },
    {
        "titulo": "Flutter - How to test page navigation when using a viewmodel with Provider",
        "score": 1,
        "views": 669,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "widget",
            "viewmodel"
        ],
        "link": "https://stackoverflow.com/questions/69843473/flutter-how-to-test-page-navigation-when-using-a-viewmodel-with-provider",
        "conteudo_html": "<p>I am trying to write widget tests for my Flutter application.</p>\n<p>I have a page (MainMenuScreen) as follows (I've left out the imports):</p>\n<pre><code>class MainMenuScreen extends StatefulWidget {\n@override\n   _MainMenuScreenState createState() =&gt; _MainMenuScreenState();\n}\n\nclass _MainMenuScreenState extends State&lt;MainMenuScreen&gt; {\n @override\n void initState() {\n   super.initState();\n }\n\n late MainMenuViewModel vm;\n @override\n Widget build(BuildContext context) {\n  vm = Provider.of&lt;MainMenuViewModel&gt;(context);\n\n  return Scaffold(\n  backgroundColor: Colors.white,\n  body: SafeArea(\n      child: Center(\n    child: Column(\n      children: &lt;Widget&gt;[\n        generateHeightSpacer(Dimensions().heightSpace),\n        generateLogo(Dimensions().fractionalWidth),\n        generateHeightSpacer(Dimensions().fractionalWidth),\n        generateMenuButton(\n            context,\n            Dimensions().fractionalWidth,\n            Dimensions().fractionalHeight,\n            AppLocalizations.of(context).menuPlay,\n            LevelSelectionScreen()),\n        generateHeightSpacer(Dimensions().heightSpace),\n        generateMenuButton(\n            context,\n            Dimensions().fractionalWidth,\n            Dimensions().fractionalHeight,\n            AppLocalizations.of(context).menuAbout,\n            AboutScreen()),\n      ],\n    ),\n  )),\n);\n</code></pre>\n<p>}\n}</p>\n<p>My <code>main.dart</code> file looks like this:</p>\n<pre><code>void main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MultiProvider(\n      providers: [\n        ChangeNotifierProvider(create: (context) =&gt; MainMenuViewModel()),\n        ChangeNotifierProvider(create: (context) =&gt; LevelSelectionViewModel()),\n        ChangeNotifierProvider(create: (context) =&gt; LevelViewModel()),\n      ],\n      child: MaterialApp(\n        onGenerateTitle: (context) {\n          return AppLocalizations.of(context).appTitle;\n        },\n        localizationsDelegates: [\n          AppLocalizations.delegate,\n          GlobalMaterialLocalizations.delegate,\n          GlobalWidgetsLocalizations.delegate,\n          GlobalCupertinoLocalizations.delegate,\n        ],\n        supportedLocales: [\n          Locale('en', ''), // English, no country code\n          Locale('es', ''), // Spanish, no country code\n        ],\n        theme: ThemeData(\n          primarySwatch: Colors.blue,\n        ),\n        home: ChangeNotifierProvider(\n          create: (context) =&gt; MainMenuViewModel(),\n          child: MainMenuScreen(),\n          // ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<p>I have looked into how to write a test that can identify when the About screen is displayed, i.e. after pressing the last Menu Button.</p>\n<p>So, for now I have something as follows:</p>\n<pre><code>  testWidgets(&quot;Flutter Main Menu Test Menu Button About&quot;,\n  (WidgetTester tester) async {\nawait tester.pumpWidget(MyApp());\nvar button = find.text(&quot;About&quot;);\nexpect(button, findsOneWidget);\n</code></pre>\n<p>});</p>\n<p>This allows me to identify that the <code>About</code> button is displayed. (Note: I will be changing my code and tests to do this based on a 'key' rather than text.)</p>\n<p>From what I've read the way to test is to use Mockito and a NavigationObserver but that seems to require the ability to inject into the screen. I have also been looking at other solutions which seem to suggest wrapping the provider, i.e.:</p>\n<p>I've been following this page(<a href=\"https://iiro.dev/writing-widget-tests-for-navigation-events/\" rel=\"nofollow noreferrer\">https://iiro.dev/writing-widget-tests-for-navigation-events/</a>) to try to test but I can't quite figure out how to pass the viewmodel in.</p>\n<p>This is my test at the moment:</p>\n<pre><code>class MockMainMenuViewModel extends Mock implements MainMenuViewModel {}\n\nclass MockNavigatorObserver extends Mock implements NavigatorObserver {}\n\nvoid main() {\n  group('MainMenuScreen navigation tests', () {\n    late NavigatorObserver mockObserver;\n    MockMainMenuViewModel? mockViewModel;\n\n    setUp(() {\n      mockObserver = MockNavigatorObserver();\n      mockViewModel = MockMainMenuViewModel();\n    });\n\n    Future&lt;void&gt; _buildMainPage(WidgetTester tester) {\n      return tester.pumpWidget(MaterialApp(\n        home: MainMenuScreen(mockViewModel),\n        navigatorObservers: &lt;NavigatorObserver&gt;[observer],\n      ));\n    }\n\n  });\n}\n</code></pre>\n<p>Any help is appreciated please.</p>\n",
        "codigo": [
            "class MainMenuScreen extends StatefulWidget {\n@override\n   _MainMenuScreenState createState() => _MainMenuScreenState();\n}\n\nclass _MainMenuScreenState extends State<MainMenuScreen> {\n @override\n void initState() {\n   super.initState();\n }\n\n late MainMenuViewModel vm;\n @override\n Widget build(BuildContext context) {\n  vm = Provider.of<MainMenuViewModel>(context);\n\n  return Scaffold(\n  backgroundColor: Colors.white,\n  body: SafeArea(\n      child: Center(\n    child: Column(\n      children: <Widget>[\n        generateHeightSpacer(Dimensions().heightSpace),\n        generateLogo(Dimensions().fractionalWidth),\n        generateHeightSpacer(Dimensions().fractionalWidth),\n        generateMenuButton(\n            context,\n            Dimensions().fractionalWidth,\n            Dimensions().fractionalHeight,\n            AppLocalizations.of(context).menuPlay,\n            LevelSelectionScreen()),\n        generateHeightSpacer(Dimensions().heightSpace),\n        generateMenuButton(\n            context,\n            Dimensions().fractionalWidth,\n            Dimensions().fractionalHeight,\n            AppLocalizations.of(context).menuAbout,\n            AboutScreen()),\n      ],\n    ),\n  )),\n);\n",
            "main.dart",
            "void main() {\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MultiProvider(\n      providers: [\n        ChangeNotifierProvider(create: (context) => MainMenuViewModel()),\n        ChangeNotifierProvider(create: (context) => LevelSelectionViewModel()),\n        ChangeNotifierProvider(create: (context) => LevelViewModel()),\n      ],\n      child: MaterialApp(\n        onGenerateTitle: (context) {\n          return AppLocalizations.of(context).appTitle;\n        },\n        localizationsDelegates: [\n          AppLocalizations.delegate,\n          GlobalMaterialLocalizations.delegate,\n          GlobalWidgetsLocalizations.delegate,\n          GlobalCupertinoLocalizations.delegate,\n        ],\n        supportedLocales: [\n          Locale('en', ''), // English, no country code\n          Locale('es', ''), // Spanish, no country code\n        ],\n        theme: ThemeData(\n          primarySwatch: Colors.blue,\n        ),\n        home: ChangeNotifierProvider(\n          create: (context) => MainMenuViewModel(),\n          child: MainMenuScreen(),\n          // ),\n        ),\n      ),\n    );\n  }\n}\n",
            "  testWidgets(\"Flutter Main Menu Test Menu Button About\",\n  (WidgetTester tester) async {\nawait tester.pumpWidget(MyApp());\nvar button = find.text(\"About\");\nexpect(button, findsOneWidget);\n",
            "About",
            "class MockMainMenuViewModel extends Mock implements MainMenuViewModel {}\n\nclass MockNavigatorObserver extends Mock implements NavigatorObserver {}\n\nvoid main() {\n  group('MainMenuScreen navigation tests', () {\n    late NavigatorObserver mockObserver;\n    MockMainMenuViewModel? mockViewModel;\n\n    setUp(() {\n      mockObserver = MockNavigatorObserver();\n      mockViewModel = MockMainMenuViewModel();\n    });\n\n    Future<void> _buildMainPage(WidgetTester tester) {\n      return tester.pumpWidget(MaterialApp(\n        home: MainMenuScreen(mockViewModel),\n        navigatorObservers: <NavigatorObserver>[observer],\n      ));\n    }\n\n  });\n}\n"
        ]
    },
    {
        "titulo": "group widget test error but individual widget test working fine",
        "score": 0,
        "views": 729,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "widget"
        ],
        "link": "https://stackoverflow.com/questions/69582223/group-widget-test-error-but-individual-widget-test-working-fine",
        "conteudo_html": "<p>I have a problem when running a whole widget test. I have 2 separated widget test and they are working fine when running individually but throwing error when being run simultaneously like this:</p>\n<pre><code>══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nThe following StateError was thrown running a test:\nBad state: No element\n\nWhen the exception was thrown, this was the stack:\n#0      Iterable.single (dart:core/iterable.dart:520:25)\n#1      WidgetController.element (package:flutter_test/src/controller.dart:114:30)\n#2      WidgetController.ensureVisible (package:flutter_test/src/controller.dart:1156:73)\n#3      main.&lt;anonymous closure&gt;.&lt;anonymous closure&gt; \n&lt;asynchronous suspension&gt;\n(elided one frame from package:stack_trace)\nThe test description was:\n  Should show key of qty widget\n\nTest failed. See exception logs above.\nThe test description was: Should show key of qty widget\n\n</code></pre>\n<p>the code:</p>\n<pre><code>import...\n\nvoid main() {\n  group(\n    &quot;Button Testing Widget&quot;,\n    () {\n      testWidgets(\n          'Should return init of 1 and return 2 after incremented and return 1 after decremented',\n          (WidgetTester qtyTester) async {\n        await qtyTester.pumpWidget(\n          MaterialApp(\n              home: BlocProvider(\n            create: (context) {\n              return CartItemBloc([]);\n            },\n            child: OrderScreen(\n              testing: true,\n            ),\n          )),\n        );\n        await qtyTester.pumpAndSettle();\n        // print(find.byKey(Key('maincre')).evaluate());\n        expect(find.text('1'), findsOneWidget);\n        // print(find.byKey(ValueKey('mainQty')).evaluate());\n        await qtyTester.ensureVisible(find.byKey(Key('mainIncrement')));\n        await qtyTester.pumpAndSettle();\n        await qtyTester.tap(find.byKey(Key('mainIncrement')));\n        await qtyTester.pumpAndSettle();\n        expect(find.text('2'), findsOneWidget);\n        // print(find.byKey(ValueKey('mainQty')).evaluate());\n        await qtyTester.tap(find.byKey(Key('mainDecrement')));\n        await qtyTester.pumpAndSettle();\n        expect(find.text('1'), findsOneWidget);\n        // print(find.byKey(ValueKey('mainQty')).evaluate());\n      });\n      testWidgets('Should show key of qty widget',\n          (WidgetTester cbTester) async {\n        await cbTester.pumpWidget(MaterialApp(\n          home: BlocProvider(\n            create: (context) {\n              return CartItemBloc([]);\n            },\n            child: OrderScreen(),\n          ),\n        ));\n        await cbTester.pumpAndSettle();\n        expect(find.byKey(Key('addQty-1')), findsNothing);\n        await cbTester.ensureVisible(find.byKey(Key('chbox-1')));\n        await cbTester.pumpAndSettle();\n        await cbTester.tap(find.byKey(Key('chbox-1')));\n        await cbTester.pumpAndSettle();\n        expect(find.byKey(Key('addQty-1')), findsOneWidget);\n      });\n    },\n  );\n}\n\n</code></pre>\n<p><strong>additional information</strong> when I move the first test to bottom the error now is on the qty button.</p>\n",
        "codigo": [
            "══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nThe following StateError was thrown running a test:\nBad state: No element\n\nWhen the exception was thrown, this was the stack:\n#0      Iterable.single (dart:core/iterable.dart:520:25)\n#1      WidgetController.element (package:flutter_test/src/controller.dart:114:30)\n#2      WidgetController.ensureVisible (package:flutter_test/src/controller.dart:1156:73)\n#3      main.<anonymous closure>.<anonymous closure> \n<asynchronous suspension>\n(elided one frame from package:stack_trace)\nThe test description was:\n  Should show key of qty widget\n\nTest failed. See exception logs above.\nThe test description was: Should show key of qty widget\n\n",
            "import...\n\nvoid main() {\n  group(\n    \"Button Testing Widget\",\n    () {\n      testWidgets(\n          'Should return init of 1 and return 2 after incremented and return 1 after decremented',\n          (WidgetTester qtyTester) async {\n        await qtyTester.pumpWidget(\n          MaterialApp(\n              home: BlocProvider(\n            create: (context) {\n              return CartItemBloc([]);\n            },\n            child: OrderScreen(\n              testing: true,\n            ),\n          )),\n        );\n        await qtyTester.pumpAndSettle();\n        // print(find.byKey(Key('maincre')).evaluate());\n        expect(find.text('1'), findsOneWidget);\n        // print(find.byKey(ValueKey('mainQty')).evaluate());\n        await qtyTester.ensureVisible(find.byKey(Key('mainIncrement')));\n        await qtyTester.pumpAndSettle();\n        await qtyTester.tap(find.byKey(Key('mainIncrement')));\n        await qtyTester.pumpAndSettle();\n        expect(find.text('2'), findsOneWidget);\n        // print(find.byKey(ValueKey('mainQty')).evaluate());\n        await qtyTester.tap(find.byKey(Key('mainDecrement')));\n        await qtyTester.pumpAndSettle();\n        expect(find.text('1'), findsOneWidget);\n        // print(find.byKey(ValueKey('mainQty')).evaluate());\n      });\n      testWidgets('Should show key of qty widget',\n          (WidgetTester cbTester) async {\n        await cbTester.pumpWidget(MaterialApp(\n          home: BlocProvider(\n            create: (context) {\n              return CartItemBloc([]);\n            },\n            child: OrderScreen(),\n          ),\n        ));\n        await cbTester.pumpAndSettle();\n        expect(find.byKey(Key('addQty-1')), findsNothing);\n        await cbTester.ensureVisible(find.byKey(Key('chbox-1')));\n        await cbTester.pumpAndSettle();\n        await cbTester.tap(find.byKey(Key('chbox-1')));\n        await cbTester.pumpAndSettle();\n        expect(find.byKey(Key('addQty-1')), findsOneWidget);\n      });\n    },\n  );\n}\n\n"
        ]
    },
    {
        "titulo": "Flutter Integration test case fails when run",
        "score": 0,
        "views": 1924,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "integration"
        ],
        "link": "https://stackoverflow.com/questions/69534600/flutter-integration-test-case-fails-when-run",
        "conteudo_html": "<p>I'm trying to run an integration test in my app. The screen is my login screen which leads to a signup flow and logged in to Home Screen. I'm using flutter integration test from the framework it self.</p>\n<p>I've tried to run an integration test on the login screen but I get this error,</p>\n<p><em>The following TestFailure object was thrown running a test:\nExpected: exactly one matching node in the widget tree\nActual: _WidgetPredicateFinder:&lt;zero widgets with widget matching predicate (Closure: (Widget) =&gt;\nbool) (ignoring offstage widgets)&gt;\nWhich: means none were found but one was expected</em></p>\n<p>My Login screen looks like this</p>\n<pre><code>class LoginScreen extends StatefulWidget {\n  static String tag = loginScreenRoute;\n\n  const LoginScreen({Key? key}) : super(key: key);\n\n  @override\n  State&lt;LoginScreen&gt; createState() =&gt; _LoginScreenState();\n}\n\nclass _LoginScreenState extends State&lt;LoginScreen&gt; {\n  final _userLoginFormKey = GlobalKey&lt;FormState&gt;();\n\n  String? _userName = &quot;&quot;;\n  String? _password = &quot;&quot;;\n  bool _invisiblePass = false;\n\n  TextEditingController usernameController = TextEditingController();\n  TextEditingController passwordController = TextEditingController();\n\n  bool hasInterNetConnection = false;\n  late StreamSubscription _connectionChangeStream;\n\n  @override\n  initState() {\n    //Create instance\n    ConnectionUtil connectionStatus = ConnectionUtil.getInstance();\n    //Initialize\n    connectionStatus.initialize();\n    //Listen for connection change\n    _connectionChangeStream =\n        connectionStatus.connectionChange.listen(connectionChanged);\n\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    _connectionChangeStream.cancel();\n    super.dispose();\n  }\n\n  void connectionChanged(dynamic hasConnection) {\n    setState(() {\n      hasInterNetConnection = hasConnection;\n      //print(isOffline);\n    });\n    if (!hasInterNetConnection) {\n      offlineBar(context);\n    }\n  }\n\n  final loading = Row(\n    mainAxisAlignment: MainAxisAlignment.center,\n    children: const &lt;Widget&gt;[\n      CircularProgressIndicator(\n        color: lightWTextColor,\n      ),\n      Text(&quot; Login in ... Please wait&quot;)\n    ],\n  );\n\n  void _showPassword() {\n    setState(() {\n      _invisiblePass = !_invisiblePass;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n\n    //// user email ////\n    TextFormField userName() =&gt; TextFormField(\n          key: const Key('login username input'),\n          autofocus: false,\n          keyboardType: TextInputType.emailAddress,\n          controller: usernameController,\n          validator: validateEmail,\n          onSaved: (value) =&gt; _userName = value!.trim(),\n          textInputAction: TextInputAction.next,\n          style: AppTheme.body1WTextStyle,\n          decoration: buildInputDecoration(\n            'Enter Email',\n            Icons.email,\n            lightWTextColor.withOpacity(0.4),\n          ),\n          // focusNode: _usernameFocusNode,\n          // onFieldSubmitted: (String val) {\n          //   final focusNode = FocusNode();\n          //   focusNode.unfocus();\n          // },\n        );\n\n    //// user password ////\n    TextFormField userPassword() =&gt; TextFormField(\n          key: const Key('login password input'),\n          obscureText: !_invisiblePass,\n          keyboardType: TextInputType.visiblePassword,\n          controller: passwordController,\n          validator: validatePassword,\n          onSaved: (value) =&gt; _password = value!.trim(),\n          textInputAction: TextInputAction.done,\n          style: AppTheme.body1WTextStyle,\n          decoration: buildInputDecoration(\n            'Enter Password',\n            Icons.vpn_lock,\n            lightWTextColor.withOpacity(0.4),\n          ).copyWith(\n            suffixIcon: GestureDetector(\n              onTap: () {\n                _showPassword();\n              },\n              child: Icon(\n                _invisiblePass ? Icons.visibility : Icons.visibility_off,\n                color: Colors.black54,\n              ),\n            ),\n          ),\n        );\n\n    final forgotLabel = Padding(\n      padding: const EdgeInsets.all(0.0),\n      child: Container(\n        alignment: Alignment.topRight,\n        child: TextButton(\n          child: const Text(\n            &quot;Forgot password?&quot;,\n            style: AppTheme.body1WTextStyle,\n          ),\n          onPressed: () {\n            Navigator.of(context).pushNamed(passwordResetScreenRoute);\n          },\n        ),\n      ),\n    );\n\n    final signupLabel = Padding(\n      padding: const EdgeInsets.all(10.0),\n      child: TextButton(\n        child: const Text(\n          &quot;Sign Up for an Account&quot;,\n          style: AppTheme.subTitleWTextStyle,\n        ),\n        onPressed: () {\n          Navigator.of(context).pushNamed(\n            userEditScreenRoute,\n            arguments: eProfile.addProfile,\n          );\n        },\n      ),\n    );\n\n    final loginButton = ButtonWidget(\n      key: const Key('login button'),\n      text: 'LOG IN',\n      btnColor: accentColor,\n      borderColor: accentColor,\n      textColor: lightWTextColor,\n      onPressed: () {\n        Navigator.of(context).pushReplacementNamed(homeScreenRoute);\n        // _submit();\n      },\n    );\n\n    final loginForm = Form(\n      key: _userLoginFormKey,\n      autovalidateMode: AutovalidateMode.onUserInteraction,\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          userName(),\n          const SizedBox(\n            height: 10.0,\n          ),\n          userPassword(),\n          forgotLabel,\n          const SizedBox(\n            height: 10.0,\n          ),\n          loginButton,\n          const SizedBox(\n            height: 10.0,\n          ),\n          signupLabel,\n        ],\n      ),\n    );\n\n    final mainBody = InkWell(\n      onTap: () {\n        FocusScope.of(context).requestFocus(FocusNode());\n      },\n      child: Container(\n        height: MediaQuery.of(context).size.height,\n        width: MediaQuery.of(context).size.width,\n        decoration: wBackground(),\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 10.0),\n          child: Center(\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                Image.asset(\n                  'assets/images/_logo.png',\n                  height: 200.0,\n                ),\n                Expanded(\n                  flex: 1,\n                  child: loginForm, //Text('this text here'),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n\n    return SafeArea(\n      child: Scaffold(\n        body: SingleChildScrollView(\n          child: mainBody,\n        ),\n      ),\n    );\n\n  }\n}\n</code></pre>\n<p>and when I try to navigate to Home Screen on tap of login button, the test fails.</p>\n<p>my test case is like this</p>\n<pre><code>void main() {\n  IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n  //\n  // start.main();\n  login.main();\n}\n\n//\nvoid main() {\n  doLoginTest();\n}\n\nvoid doLoginTest() {\n  IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n\n  testWidgets(&quot;Login in test run&quot;, (WidgetTester tester) async {\n    //\n    pawfect.main();\n    await tester.pumpAndSettle(const Duration(seconds: 3));\n    //test here\n\n    final Finder login =\n        find.byWidgetPredicate((widget) =&gt; widget is LoginScreen);\n    expect(login, findsOneWidget);\n    await tester.pumpAndSettle(const Duration(seconds: 1));\n    //\n    var emailInput = find.byKey(const Key('login username input'));\n    await tester.tap(emailInput);\n    await tester.enterText(emailInput, &quot;test@m.com&quot;);\n    await tester.pumpAndSettle(const Duration(seconds: 1));\n    //\n    var passwordInput = find.byKey(const Key('login password input'));\n    await tester.tap(passwordInput);\n    await tester.enterText(passwordInput, &quot;password&quot;);\n    await tester.pumpAndSettle(const Duration(seconds: 1));\n    //\n    var loginButton = find.byKey(const Key('login button'));\n    await tester.tap(loginButton, warnIfMissed: false);\n    await tester.pumpAndSettle(const Duration(seconds: 3));\n    //\n    // expect(version, findsOneWidget);\n    // final Finder home = find.byWidget(const HomeScreen());\n    expect(find.byWidgetPredicate((widget) =&gt; widget is HomeScreen),\n        findsOneWidget);\n    // await tester.pumpAndSettle(const Duration(seconds: 1));\n\n    var version = find.byWidgetPredicate(\n        (widget) =&gt; widget is Text &amp;&amp; widget.data!.contains(&quot;Version: 2.0&quot;));\n    expect(version, findsOneWidget);\n    await tester.pumpAndSettle(const Duration(seconds: 3));\n  });\n}\n</code></pre>\n<p>what am I doing wrong here? I tried to look for something helpful over the internet and in the docs but I couldn't get my hands dirty enough. Will someone please help me to write a fine Integration test move in with screen to another screen. Thank you so much in advance.</p>\n",
        "codigo": [
            "class LoginScreen extends StatefulWidget {\n  static String tag = loginScreenRoute;\n\n  const LoginScreen({Key? key}) : super(key: key);\n\n  @override\n  State<LoginScreen> createState() => _LoginScreenState();\n}\n\nclass _LoginScreenState extends State<LoginScreen> {\n  final _userLoginFormKey = GlobalKey<FormState>();\n\n  String? _userName = \"\";\n  String? _password = \"\";\n  bool _invisiblePass = false;\n\n  TextEditingController usernameController = TextEditingController();\n  TextEditingController passwordController = TextEditingController();\n\n  bool hasInterNetConnection = false;\n  late StreamSubscription _connectionChangeStream;\n\n  @override\n  initState() {\n    //Create instance\n    ConnectionUtil connectionStatus = ConnectionUtil.getInstance();\n    //Initialize\n    connectionStatus.initialize();\n    //Listen for connection change\n    _connectionChangeStream =\n        connectionStatus.connectionChange.listen(connectionChanged);\n\n    super.initState();\n  }\n\n  @override\n  void dispose() {\n    _connectionChangeStream.cancel();\n    super.dispose();\n  }\n\n  void connectionChanged(dynamic hasConnection) {\n    setState(() {\n      hasInterNetConnection = hasConnection;\n      //print(isOffline);\n    });\n    if (!hasInterNetConnection) {\n      offlineBar(context);\n    }\n  }\n\n  final loading = Row(\n    mainAxisAlignment: MainAxisAlignment.center,\n    children: const <Widget>[\n      CircularProgressIndicator(\n        color: lightWTextColor,\n      ),\n      Text(\" Login in ... Please wait\")\n    ],\n  );\n\n  void _showPassword() {\n    setState(() {\n      _invisiblePass = !_invisiblePass;\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) {\n\n    //// user email ////\n    TextFormField userName() => TextFormField(\n          key: const Key('login username input'),\n          autofocus: false,\n          keyboardType: TextInputType.emailAddress,\n          controller: usernameController,\n          validator: validateEmail,\n          onSaved: (value) => _userName = value!.trim(),\n          textInputAction: TextInputAction.next,\n          style: AppTheme.body1WTextStyle,\n          decoration: buildInputDecoration(\n            'Enter Email',\n            Icons.email,\n            lightWTextColor.withOpacity(0.4),\n          ),\n          // focusNode: _usernameFocusNode,\n          // onFieldSubmitted: (String val) {\n          //   final focusNode = FocusNode();\n          //   focusNode.unfocus();\n          // },\n        );\n\n    //// user password ////\n    TextFormField userPassword() => TextFormField(\n          key: const Key('login password input'),\n          obscureText: !_invisiblePass,\n          keyboardType: TextInputType.visiblePassword,\n          controller: passwordController,\n          validator: validatePassword,\n          onSaved: (value) => _password = value!.trim(),\n          textInputAction: TextInputAction.done,\n          style: AppTheme.body1WTextStyle,\n          decoration: buildInputDecoration(\n            'Enter Password',\n            Icons.vpn_lock,\n            lightWTextColor.withOpacity(0.4),\n          ).copyWith(\n            suffixIcon: GestureDetector(\n              onTap: () {\n                _showPassword();\n              },\n              child: Icon(\n                _invisiblePass ? Icons.visibility : Icons.visibility_off,\n                color: Colors.black54,\n              ),\n            ),\n          ),\n        );\n\n    final forgotLabel = Padding(\n      padding: const EdgeInsets.all(0.0),\n      child: Container(\n        alignment: Alignment.topRight,\n        child: TextButton(\n          child: const Text(\n            \"Forgot password?\",\n            style: AppTheme.body1WTextStyle,\n          ),\n          onPressed: () {\n            Navigator.of(context).pushNamed(passwordResetScreenRoute);\n          },\n        ),\n      ),\n    );\n\n    final signupLabel = Padding(\n      padding: const EdgeInsets.all(10.0),\n      child: TextButton(\n        child: const Text(\n          \"Sign Up for an Account\",\n          style: AppTheme.subTitleWTextStyle,\n        ),\n        onPressed: () {\n          Navigator.of(context).pushNamed(\n            userEditScreenRoute,\n            arguments: eProfile.addProfile,\n          );\n        },\n      ),\n    );\n\n    final loginButton = ButtonWidget(\n      key: const Key('login button'),\n      text: 'LOG IN',\n      btnColor: accentColor,\n      borderColor: accentColor,\n      textColor: lightWTextColor,\n      onPressed: () {\n        Navigator.of(context).pushReplacementNamed(homeScreenRoute);\n        // _submit();\n      },\n    );\n\n    final loginForm = Form(\n      key: _userLoginFormKey,\n      autovalidateMode: AutovalidateMode.onUserInteraction,\n      child: Column(\n        mainAxisAlignment: MainAxisAlignment.center,\n        children: [\n          userName(),\n          const SizedBox(\n            height: 10.0,\n          ),\n          userPassword(),\n          forgotLabel,\n          const SizedBox(\n            height: 10.0,\n          ),\n          loginButton,\n          const SizedBox(\n            height: 10.0,\n          ),\n          signupLabel,\n        ],\n      ),\n    );\n\n    final mainBody = InkWell(\n      onTap: () {\n        FocusScope.of(context).requestFocus(FocusNode());\n      },\n      child: Container(\n        height: MediaQuery.of(context).size.height,\n        width: MediaQuery.of(context).size.width,\n        decoration: wBackground(),\n        child: Padding(\n          padding: const EdgeInsets.symmetric(horizontal: 10.0),\n          child: Center(\n            child: Column(\n              mainAxisAlignment: MainAxisAlignment.center,\n              children: [\n                Image.asset(\n                  'assets/images/_logo.png',\n                  height: 200.0,\n                ),\n                Expanded(\n                  flex: 1,\n                  child: loginForm, //Text('this text here'),\n                ),\n              ],\n            ),\n          ),\n        ),\n      ),\n    );\n\n    return SafeArea(\n      child: Scaffold(\n        body: SingleChildScrollView(\n          child: mainBody,\n        ),\n      ),\n    );\n\n  }\n}\n",
            "void main() {\n  IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n  //\n  // start.main();\n  login.main();\n}\n\n//\nvoid main() {\n  doLoginTest();\n}\n\nvoid doLoginTest() {\n  IntegrationTestWidgetsFlutterBinding.ensureInitialized();\n\n  testWidgets(\"Login in test run\", (WidgetTester tester) async {\n    //\n    pawfect.main();\n    await tester.pumpAndSettle(const Duration(seconds: 3));\n    //test here\n\n    final Finder login =\n        find.byWidgetPredicate((widget) => widget is LoginScreen);\n    expect(login, findsOneWidget);\n    await tester.pumpAndSettle(const Duration(seconds: 1));\n    //\n    var emailInput = find.byKey(const Key('login username input'));\n    await tester.tap(emailInput);\n    await tester.enterText(emailInput, \"test@m.com\");\n    await tester.pumpAndSettle(const Duration(seconds: 1));\n    //\n    var passwordInput = find.byKey(const Key('login password input'));\n    await tester.tap(passwordInput);\n    await tester.enterText(passwordInput, \"password\");\n    await tester.pumpAndSettle(const Duration(seconds: 1));\n    //\n    var loginButton = find.byKey(const Key('login button'));\n    await tester.tap(loginButton, warnIfMissed: false);\n    await tester.pumpAndSettle(const Duration(seconds: 3));\n    //\n    // expect(version, findsOneWidget);\n    // final Finder home = find.byWidget(const HomeScreen());\n    expect(find.byWidgetPredicate((widget) => widget is HomeScreen),\n        findsOneWidget);\n    // await tester.pumpAndSettle(const Duration(seconds: 1));\n\n    var version = find.byWidgetPredicate(\n        (widget) => widget is Text && widget.data!.contains(\"Version: 2.0\"));\n    expect(version, findsOneWidget);\n    await tester.pumpAndSettle(const Duration(seconds: 3));\n  });\n}\n"
        ]
    },
    {
        "titulo": "Flutter test access the state of a found widget",
        "score": 1,
        "views": 366,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/69443064/flutter-test-access-the-state-of-a-found-widget",
        "conteudo_html": "<p>I have a Flutter widget that I would like to test</p>\n<pre><code>                Step(\n                  title: const Text('Initialize a New Flutter Release'),\n                  content: Column(\n                    children: &lt;Widget&gt;[\n                      ConductorSubsteps(continued: continued),\n                    ],\n                  ),\n                  isActive: true,\n                  state: handlerStepState(0),\n                ),\n</code></pre>\n<p>I would like to check if <code>isActive</code> of this widget is true. How should I do that?</p>\n<p>I tried <code>expect(find.text('Continue').isActive, equals(true));</code> This does not work, since I can't call <code>.isActive</code> on an iterator.\n<code>expect(tester.element(find.text('Continue').isActive, equals(true)));</code> does not work, since <code>.isActive</code> can't be called on an element.</p>\n",
        "codigo": [
            "                Step(\n                  title: const Text('Initialize a New Flutter Release'),\n                  content: Column(\n                    children: <Widget>[\n                      ConductorSubsteps(continued: continued),\n                    ],\n                  ),\n                  isActive: true,\n                  state: handlerStepState(0),\n                ),\n",
            "isActive",
            "expect(find.text('Continue').isActive, equals(true));",
            ".isActive",
            "expect(tester.element(find.text('Continue').isActive, equals(true)));",
            ".isActive"
        ]
    },
    {
        "titulo": "bloc test output unexpected result",
        "score": 1,
        "views": 766,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "bloc",
            "bloc-test"
        ],
        "link": "https://stackoverflow.com/questions/69393006/bloc-test-output-unexpected-result",
        "conteudo_html": "<p>I'm confused by the results of the test below</p>\n<p>the first doesn't pass,</p>\n<p>but somehow the second does not</p>\n<p>what am I missing?</p>\n<p>thank you</p>\n<pre class=\"lang-dart prettyprint-override\"><code>\nvoid main() {\n  group('UserAuthenticationCubit', () {\n    const user = User(name: 'name', id: 'id');\n\n    final repo = UserAuthenticationRepoMock();\n    final cubit = UserAuthenticationCubit(repo);\n\n    blocTest&lt;UserAuthenticationCubit, UserBase&gt;(\n      'emits [] when nothing is called',\n      build: () =&gt; UserAuthenticationCubit(repo),\n      expect: () =&gt; const &lt;UserBase&gt;[],\n    );\n\n    blocTest&lt;UserAuthenticationCubit, UserBase&gt;(\n      'emits NoUser when repo returns null',\n      setUp: () {\n        when(() =&gt; repo(kFakeUserCredentials)).thenAnswer(\n          (_) =&gt; Future.sync(() =&gt; null),\n        );\n      },\n      build: () =&gt; cubit,\n      act: (cubit) =&gt; cubit.authenticate(kFakeUserCredentials),\n      expect: () =&gt; const [MaybeUser(), NoUser()],\n    );\n\n    blocTest&lt;UserAuthenticationCubit, UserBase&gt;(\n      'emits User when repo returns User',\n      setUp: () {\n        when(() =&gt; repo(kFakeUserCredentials)).thenAnswer(\n          (_) =&gt; Future.sync(() =&gt; user),\n        );\n      },\n      build: () =&gt; UserAuthenticationCubit(repo),\n      act: (cubit) =&gt; cubit.authenticate(kFakeUserCredentials),\n      expect: () =&gt; const [MaybeUser(), user],\n    );\n\n    tearDown(() =&gt; cubit.close());\n  });\n}\n\n\n</code></pre>\n<pre class=\"lang-dart prettyprint-override\"><code>\n@immutable\nclass User implements UserBase {\n  final String name, id;\n  const User({\n    required this.name,\n    required this.id,\n  });\n}\n\nabstract class UserBase {}\n\n\nclass MaybeUser implements UserBase {\n  const MaybeUser();\n}\n\nclass NoUser implements UserBase {\n  const NoUser();\n}\n\n</code></pre>\n<pre class=\"lang-dart prettyprint-override\"><code>\nclass UserAuthenticationCubit extends Cubit&lt;UserBase&gt; {\n  final UserAuthenticationRepo userAuthenticationRepo;\n  UserAuthenticationCubit(this.userAuthenticationRepo) : super(const NoUser());\n  void authenticate(Credentials credentials) async {\n    emit(const MaybeUser());\n    final user = await userAuthenticationRepo(credentials);\n    user == null ? emit(const NoUser()) : emit(user);\n  }\n}\n\n</code></pre>\n<pre class=\"lang-dart prettyprint-override\"><code>\nclass UserAuthenticationRepo {\n  Future&lt;User?&gt; call(Credentials creadentials) async {\n    if (creadentials.email == 'test@test.com') {\n      return const User(name: 'user', id: '12345');\n    }\n  }\n}\n\n</code></pre>\n\n\nlogs\n<pre><code>00:02 +7 -1: /Users/francesco/development/flutter-tools/template/bloc_template/test/logic/cubit/authentication_test.dart: UserAuthenticationCubit emits NoUser when repo returns null [E]\n  Expected: [Instance of 'MaybeUser', Instance of 'NoUser']\n    Actual: []\n     Which: at location [0] is [] which shorter than expected\n\n  package:test_api                             expect\n  package:bloc_test/src/bloc_test.dart 193:9   testBloc.&lt;fn&gt;\n  ===== asynchronous gap ===========================\n  dart:async                                   _asyncThenWrapperHelper\n  package:bloc_test/src/bloc_test.dart         testBloc.&lt;fn&gt;\n  dart:async                                   runZonedGuarded\n  package:bloc_test/src/bloc_test.dart 172:9   testBloc\n  package:bloc_test/src/bloc_test.dart 140:11  blocTest.&lt;fn&gt;\n  package:bloc_test/src/bloc_test.dart 139:26  blocTest.&lt;fn&gt;\n\n00:02 +9 -1: Some tests failed.\n</code></pre>\n",
        "codigo": [
            "\nvoid main() {\n  group('UserAuthenticationCubit', () {\n    const user = User(name: 'name', id: 'id');\n\n    final repo = UserAuthenticationRepoMock();\n    final cubit = UserAuthenticationCubit(repo);\n\n    blocTest<UserAuthenticationCubit, UserBase>(\n      'emits [] when nothing is called',\n      build: () => UserAuthenticationCubit(repo),\n      expect: () => const <UserBase>[],\n    );\n\n    blocTest<UserAuthenticationCubit, UserBase>(\n      'emits NoUser when repo returns null',\n      setUp: () {\n        when(() => repo(kFakeUserCredentials)).thenAnswer(\n          (_) => Future.sync(() => null),\n        );\n      },\n      build: () => cubit,\n      act: (cubit) => cubit.authenticate(kFakeUserCredentials),\n      expect: () => const [MaybeUser(), NoUser()],\n    );\n\n    blocTest<UserAuthenticationCubit, UserBase>(\n      'emits User when repo returns User',\n      setUp: () {\n        when(() => repo(kFakeUserCredentials)).thenAnswer(\n          (_) => Future.sync(() => user),\n        );\n      },\n      build: () => UserAuthenticationCubit(repo),\n      act: (cubit) => cubit.authenticate(kFakeUserCredentials),\n      expect: () => const [MaybeUser(), user],\n    );\n\n    tearDown(() => cubit.close());\n  });\n}\n\n\n",
            "\n@immutable\nclass User implements UserBase {\n  final String name, id;\n  const User({\n    required this.name,\n    required this.id,\n  });\n}\n\nabstract class UserBase {}\n\n\nclass MaybeUser implements UserBase {\n  const MaybeUser();\n}\n\nclass NoUser implements UserBase {\n  const NoUser();\n}\n\n",
            "\nclass UserAuthenticationCubit extends Cubit<UserBase> {\n  final UserAuthenticationRepo userAuthenticationRepo;\n  UserAuthenticationCubit(this.userAuthenticationRepo) : super(const NoUser());\n  void authenticate(Credentials credentials) async {\n    emit(const MaybeUser());\n    final user = await userAuthenticationRepo(credentials);\n    user == null ? emit(const NoUser()) : emit(user);\n  }\n}\n\n",
            "\nclass UserAuthenticationRepo {\n  Future<User?> call(Credentials creadentials) async {\n    if (creadentials.email == 'test@test.com') {\n      return const User(name: 'user', id: '12345');\n    }\n  }\n}\n\n",
            "00:02 +7 -1: /Users/francesco/development/flutter-tools/template/bloc_template/test/logic/cubit/authentication_test.dart: UserAuthenticationCubit emits NoUser when repo returns null [E]\n  Expected: [Instance of 'MaybeUser', Instance of 'NoUser']\n    Actual: []\n     Which: at location [0] is [] which shorter than expected\n\n  package:test_api                             expect\n  package:bloc_test/src/bloc_test.dart 193:9   testBloc.<fn>\n  ===== asynchronous gap ===========================\n  dart:async                                   _asyncThenWrapperHelper\n  package:bloc_test/src/bloc_test.dart         testBloc.<fn>\n  dart:async                                   runZonedGuarded\n  package:bloc_test/src/bloc_test.dart 172:9   testBloc\n  package:bloc_test/src/bloc_test.dart 140:11  blocTest.<fn>\n  package:bloc_test/src/bloc_test.dart 139:26  blocTest.<fn>\n\n00:02 +9 -1: Some tests failed.\n"
        ]
    },
    {
        "titulo": "Flutter Test Enable/Disable Button and pop naigation",
        "score": 1,
        "views": 799,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "navigation",
            "isenabled"
        ],
        "link": "https://stackoverflow.com/questions/69209082/flutter-test-enable-disable-button-and-pop-naigation",
        "conteudo_html": "<p>I have this screen with 2 TextFormField that receive the name and lastname, and a button, that comes disabled it there is no changes or if there is any wrong value, and it is enabled case there is any update in the fields and when tapped close the screen and return to EditProfileScreen.\nI was able to test the enable/disable state, but I'm not been able to test the pop navigation, it show that should receive a true, but returns a false, I tried every way, let the formFields with the names, but didn't work. If the code that is comment is in the code there's error on it, if I comment there's error here: expect(btn.enabled, true);\nI aldo tried call the EditProfileScreen in the expect, put their keys, but nothing\nHere is my code</p>\n<pre><code>testWidgets('Test pop navigation', (WidgetTester tester) async {\n  final loginBloc = LoginBlocMock();\n\n  final state = getLoggedState();\n  whenListen(\n    loginBloc,\n    Stream.fromIterable(\n      [state],\n    ),\n    initialState: state,\n  );\n\n  await tester.pumpWidget(\n    UIWrapper.wrapTranslated(\n      UIWrapper.blocWrap(\n        UIWrapper.themeWrap(\n          EditNameScreen(),\n        ),\n        [\n          BlocProvider&lt;LoginBloc&gt;.value(value: loginBloc),\n        ],\n      ),\n    ),\n  );\n\n  final nameFormField = find.byKey(Key('FirstName'));\n  await tester.enterText(nameFormField, 'John');\n  final lastNameFormField = find.byKey(Key('LastName'));\n  await tester.enterText(lastNameFormField, 'Doe');\n\n  expect(find.byKey(Key('FirstName')), findsOneWidget);\n  expect(find.byKey(Key('LastName')), findsOneWidget);\n\n  /* expect(\n      tester\n          .widget&lt;ElevatedButton&gt;(find.byKey(Key('UpdateButton')))\n          .enabled,\n      isTrue); */\n\n  var btn =\n      tester.firstWidget&lt;ElevatedButton&gt;(find.byKey(Key('UpdateButton')));\n  expect(btn.enabled, true);\n  verify(navigationService.pop()).called(1);\n  await tester.tap(find.byWidget(btn));\n  await tester.pumpAndSettle();\n});\n</code></pre>\n",
        "codigo": [
            "testWidgets('Test pop navigation', (WidgetTester tester) async {\n  final loginBloc = LoginBlocMock();\n\n  final state = getLoggedState();\n  whenListen(\n    loginBloc,\n    Stream.fromIterable(\n      [state],\n    ),\n    initialState: state,\n  );\n\n  await tester.pumpWidget(\n    UIWrapper.wrapTranslated(\n      UIWrapper.blocWrap(\n        UIWrapper.themeWrap(\n          EditNameScreen(),\n        ),\n        [\n          BlocProvider<LoginBloc>.value(value: loginBloc),\n        ],\n      ),\n    ),\n  );\n\n  final nameFormField = find.byKey(Key('FirstName'));\n  await tester.enterText(nameFormField, 'John');\n  final lastNameFormField = find.byKey(Key('LastName'));\n  await tester.enterText(lastNameFormField, 'Doe');\n\n  expect(find.byKey(Key('FirstName')), findsOneWidget);\n  expect(find.byKey(Key('LastName')), findsOneWidget);\n\n  /* expect(\n      tester\n          .widget<ElevatedButton>(find.byKey(Key('UpdateButton')))\n          .enabled,\n      isTrue); */\n\n  var btn =\n      tester.firstWidget<ElevatedButton>(find.byKey(Key('UpdateButton')));\n  expect(btn.enabled, true);\n  verify(navigationService.pop()).called(1);\n  await tester.tap(find.byWidget(btn));\n  await tester.pumpAndSettle();\n});\n"
        ]
    },
    {
        "titulo": "Flutter Test only works with pumping duration",
        "score": 0,
        "views": 937,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/68885123/flutter-test-only-works-with-pumping-duration",
        "conteudo_html": "<p>I have this widget:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>class _DemoWidget extends State&lt;DemoWidget&gt; {\n  Choices? _selectedChoice;\n\n  @override\n  Widget build(BuildContext context) {\n    return SingleChildScrollView(\n      child: Column(\n        children: &lt;Widget&gt;[\n          createTile(\n              'The First Option', Choices.FRIENDS, const Key('firstOption')),\n          if (_selectedChoice == Choices.FIRST)\n            TextFormField(\n              key: const Key('searchFirst'),\n            ),\n          createTile('The Second Option', Choices.CONTACT, const Key('secondOption')),\n          if (_selectedChoice == Choices.SECOND)\n            TextFormField(\n              key: const Key('searchSecond'),\n            ),\n        ],\n      ),\n    );\n  }\n\n  RadioListTile&lt;Choices&gt; createTile(String title, Choices choice, Key key) {\n    return RadioListTile&lt;Choices&gt;(\n      key: key,\n      title: Text(\n        title,\n      ),\n      value: choice,\n      groupValue: _selectedChoice,\n      onChanged: (Choices? val) =&gt; setState(() =&gt; _selectedChoice = val),\n    );\n  }\n}\n\n</code></pre>\n<p>It has two radio buttons and based on which button is currently active, it will render out a text field bellow that option. I am trying to create a test for this behavior and started with this:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>  testWidgets('Clicking on person search opens up textfield',\n      (WidgetTester tester) async {\n    await tester.pumpWidget(\n      renderWith(),\n    );\n    Finder firstOption = find.text('The First Option');\n    await tester.tap(firstOption);\n    expect(find.byKey(const Key('searchFirst')), findsOneWidget);\n  }, skip: false);\n\n</code></pre>\n<p>but would get a faild test every time, I then added a duration between the tap and the ensure Visible</p>\n<pre class=\"lang-dart prettyprint-override\"><code>  testWidgets('Clicking on person search opens up textfield',\n      (WidgetTester tester) async {\n    await tester.pumpWidget(\n      renderWith(),\n    );\n    Finder firstOption = find.text('The First Option');\n    await tester.tap(firstOption);\n    await tester.pump(Duration(milliseconds: 50));\n    tester.ensureVisible(find.byKey(const Key('searchFirst')));\n    expect(find.byKey(const Key('searchFirst')), findsOneWidget);\n  }, skip: false);\n</code></pre>\n<p>and the test passes.</p>\n<p>I think that using timeouts doesn't seem like a very safe way to do testing, but have read in some places that this is required for some flutter widgets. Is there some way to do this test without having to pump a time wait into the tester?</p>\n",
        "codigo": [
            "class _DemoWidget extends State<DemoWidget> {\n  Choices? _selectedChoice;\n\n  @override\n  Widget build(BuildContext context) {\n    return SingleChildScrollView(\n      child: Column(\n        children: <Widget>[\n          createTile(\n              'The First Option', Choices.FRIENDS, const Key('firstOption')),\n          if (_selectedChoice == Choices.FIRST)\n            TextFormField(\n              key: const Key('searchFirst'),\n            ),\n          createTile('The Second Option', Choices.CONTACT, const Key('secondOption')),\n          if (_selectedChoice == Choices.SECOND)\n            TextFormField(\n              key: const Key('searchSecond'),\n            ),\n        ],\n      ),\n    );\n  }\n\n  RadioListTile<Choices> createTile(String title, Choices choice, Key key) {\n    return RadioListTile<Choices>(\n      key: key,\n      title: Text(\n        title,\n      ),\n      value: choice,\n      groupValue: _selectedChoice,\n      onChanged: (Choices? val) => setState(() => _selectedChoice = val),\n    );\n  }\n}\n\n",
            "  testWidgets('Clicking on person search opens up textfield',\n      (WidgetTester tester) async {\n    await tester.pumpWidget(\n      renderWith(),\n    );\n    Finder firstOption = find.text('The First Option');\n    await tester.tap(firstOption);\n    expect(find.byKey(const Key('searchFirst')), findsOneWidget);\n  }, skip: false);\n\n",
            "  testWidgets('Clicking on person search opens up textfield',\n      (WidgetTester tester) async {\n    await tester.pumpWidget(\n      renderWith(),\n    );\n    Finder firstOption = find.text('The First Option');\n    await tester.tap(firstOption);\n    await tester.pump(Duration(milliseconds: 50));\n    tester.ensureVisible(find.byKey(const Key('searchFirst')));\n    expect(find.byKey(const Key('searchFirst')), findsOneWidget);\n  }, skip: false);\n"
        ]
    },
    {
        "titulo": "Flutter Test: Testing if a checkbox is checked on build",
        "score": 4,
        "views": 5048,
        "respostas": 4,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing",
            "flutter-test"
        ],
        "link": "https://stackoverflow.com/questions/68665320/flutter-test-testing-if-a-checkbox-is-checked-on-build",
        "conteudo_html": "<p>I have a dynamic form system that builds widgets based on a json. One of the components that can be parsed is a Checkbox and a default value is passed to determine whether or not it is checked/unchecked initially. I'm writing a unit test for this and am running into trouble with semantics.</p>\n<p>My test begins with checking the widget has been built (the following test is successful)</p>\n<pre><code>//create form\nawait tester.pumpWidget(buildTestableWidget(testWidget));\n\n//setup Finder\nFinder widgetFinder = find.widgetWithText(FormCheckbox, &quot;test checkbox&quot;);\n\n//test for widget\nexpect(widgetFinder, findsOneWidget);\n</code></pre>\n<p>The <code>FormCheckbox</code> class is as follows</p>\n<pre><code>class FormCheckbox extends StatefulWidget {\n  final forms.Checkbox component;\n\n  FormCheckbox(this.component) : super(key: Key(&quot;${component.propertyKey().getId()}&quot;));\n\n  _FormCheckboxState createState() =&gt; _FormCheckboxState(component);\n}\n\nclass _FormCheckboxState extends State&lt;FormCheckbox&gt; {\n  _FormCheckboxState(this._component) {\n    this.boxValue = _component.isDefaultSelected();\n  }\n\n  final forms.Checkbox _component;\n  bool boxValue;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n        padding: const EdgeInsets.only(left: 16, right: 16, top: 6, bottom: 6),\n        child: ListTile(\n          leading: Material(\n            child: Checkbox(\n                value: boxValue,\n                onChanged: (bool newValue) {\n                  setState(() {\n                    boxValue = newValue;\n                  });\n            })),\n          title: Text(&quot;${_component.getLabel()}&quot;),\n        ));\n  }\n\n  String validator(String value) {\n    //TODO: Implement validator\n    throw UnimplementedError();\n  }\n\n}\n</code></pre>\n<p>Which despite everything else, has a <code>Checkbox</code> component as a child which defaults to a boolean I can set (which I can confirm is definitely working properly).</p>\n<p>I would expect, from looking at flutter's own tests for checkboxes <a href=\"https://github.com/flutter/flutter/blob/master/packages/flutter/test/material/checkbox_test.dart\" rel=\"nofollow noreferrer\">here</a> that I can use <code>getSemantics</code> and expect it to equal a <code>matchedSemantics</code> within which <code>isChecked = true</code> as shown here</p>\n<pre><code>//test default value\nexpect(\n  tester.getSemantics(find.byType(Checkbox)),\n  matchesSemantics(\n    isChecked: true,\n    hasEnabledState: true,\n    isEnabled: true,\n));\n</code></pre>\n<p>However the isChecked state is remaining as false, even after a tap with <code>await tester.tap(find.byKey(Key(&quot;1&quot;)));</code></p>\n<p>The error message given is</p>\n<pre><code>Expected: has semantics with actions: [] with flags: [\n            SemanticsFlag:SemanticsFlag.isChecked,\n            SemanticsFlag:SemanticsFlag.hasEnabledState,\n            SemanticsFlag:SemanticsFlag.isEnabled\n          ]\nActual: SemanticsNode:&lt;SemanticsNode#5(Rect.fromLTRB(0.0, 0.0, 800.0, 68.0), tags:\n[RenderViewport.twoPane], flags: [hasEnabledState, isEnabled], label: &quot;test checkbox&quot;,\ntextDirection: ltr)&gt;\n   Which: flags were: [hasEnabledState, isEnabled]\n</code></pre>\n<p>What am I missing here? Why is a created Checkbox object with value: true not giving a semantics value of isChecked = true</p>\n",
        "codigo": [
            "//create form\nawait tester.pumpWidget(buildTestableWidget(testWidget));\n\n//setup Finder\nFinder widgetFinder = find.widgetWithText(FormCheckbox, \"test checkbox\");\n\n//test for widget\nexpect(widgetFinder, findsOneWidget);\n",
            "FormCheckbox",
            "class FormCheckbox extends StatefulWidget {\n  final forms.Checkbox component;\n\n  FormCheckbox(this.component) : super(key: Key(\"${component.propertyKey().getId()}\"));\n\n  _FormCheckboxState createState() => _FormCheckboxState(component);\n}\n\nclass _FormCheckboxState extends State<FormCheckbox> {\n  _FormCheckboxState(this._component) {\n    this.boxValue = _component.isDefaultSelected();\n  }\n\n  final forms.Checkbox _component;\n  bool boxValue;\n\n  @override\n  Widget build(BuildContext context) {\n    return Padding(\n        padding: const EdgeInsets.only(left: 16, right: 16, top: 6, bottom: 6),\n        child: ListTile(\n          leading: Material(\n            child: Checkbox(\n                value: boxValue,\n                onChanged: (bool newValue) {\n                  setState(() {\n                    boxValue = newValue;\n                  });\n            })),\n          title: Text(\"${_component.getLabel()}\"),\n        ));\n  }\n\n  String validator(String value) {\n    //TODO: Implement validator\n    throw UnimplementedError();\n  }\n\n}\n",
            "Checkbox",
            "getSemantics",
            "matchedSemantics",
            "isChecked = true",
            "//test default value\nexpect(\n  tester.getSemantics(find.byType(Checkbox)),\n  matchesSemantics(\n    isChecked: true,\n    hasEnabledState: true,\n    isEnabled: true,\n));\n",
            "await tester.tap(find.byKey(Key(\"1\")));",
            "Expected: has semantics with actions: [] with flags: [\n            SemanticsFlag:SemanticsFlag.isChecked,\n            SemanticsFlag:SemanticsFlag.hasEnabledState,\n            SemanticsFlag:SemanticsFlag.isEnabled\n          ]\nActual: SemanticsNode:<SemanticsNode#5(Rect.fromLTRB(0.0, 0.0, 800.0, 68.0), tags:\n[RenderViewport.twoPane], flags: [hasEnabledState, isEnabled], label: \"test checkbox\",\ntextDirection: ltr)>\n   Which: flags were: [hasEnabledState, isEnabled]\n"
        ]
    },
    {
        "titulo": "In widget tests, how can I perform a &quot;pull-down&quot; gesture?",
        "score": 5,
        "views": 3992,
        "respostas": 2,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "gesture"
        ],
        "link": "https://stackoverflow.com/questions/68357095/in-widget-tests-how-can-i-perform-a-pull-down-gesture",
        "conteudo_html": "<p>I am using the <code>RefreshIndicator</code> widget - the usage looks something like this:</p>\n<pre><code>RefreshIndicator(\n  onRefresh: () =&gt; refreshState(), // Invokes a method on a state object that is mocked in my test\n  child: ...\n\n</code></pre>\n<p>Now I want to verify, that a &quot;pull-down&quot; gesture results in an invocation of <code>refreshState</code>:</p>\n<pre><code>testWidgets('Pulling down triggers refresh', (tester) async {\n    var state = MockState(); // Class extending Mock from mocktail\n    ...\n    // pump widget, providing state as a ChangeNotifierProvider\n    ...\n\n    // SomeWidget is a child in the widget under test and effective child of RefreshIndicator, it's center is positioned towards the top of the screen\n    var gesture = await tester.startGesture(tester.getCenter(find.byType(SomeWidget)));\n    await gesture.moveBy(Offset(0, 750));\n    await tester.pump();\n\n    verify(() =&gt; state.refresh());\n  });\n</code></pre>\n<p>Unfortunately, this results in a failing test, suggesting the method was not invoked:</p>\n<pre><code>══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nThe following TestFailure object was thrown running a test:\n  No matching calls (actually, no calls at all).\n(If you called `verify(...).called(0);`, please instead use `verifyNever(...);`.)\n\n</code></pre>\n<p>EDIT:</p>\n<p>As suggested by Michael, using <code>tester.drag</code> together with <code>tester.pumpAndSettle</code> instead of <code>tester.pump</code> resolved the issue</p>\n",
        "codigo": [
            "RefreshIndicator",
            "RefreshIndicator(\n  onRefresh: () => refreshState(), // Invokes a method on a state object that is mocked in my test\n  child: ...\n\n",
            "refreshState",
            "testWidgets('Pulling down triggers refresh', (tester) async {\n    var state = MockState(); // Class extending Mock from mocktail\n    ...\n    // pump widget, providing state as a ChangeNotifierProvider\n    ...\n\n    // SomeWidget is a child in the widget under test and effective child of RefreshIndicator, it's center is positioned towards the top of the screen\n    var gesture = await tester.startGesture(tester.getCenter(find.byType(SomeWidget)));\n    await gesture.moveBy(Offset(0, 750));\n    await tester.pump();\n\n    verify(() => state.refresh());\n  });\n",
            "══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nThe following TestFailure object was thrown running a test:\n  No matching calls (actually, no calls at all).\n(If you called `verify(...).called(0);`, please instead use `verifyNever(...);`.)\n\n",
            "tester.drag",
            "tester.pumpAndSettle",
            "tester.pump"
        ]
    },
    {
        "titulo": "How to test if two durations are approximately equal in Dart",
        "score": 0,
        "views": 253,
        "respostas": 1,
        "tags": [
            "dart",
            "testing",
            "duration"
        ],
        "link": "https://stackoverflow.com/questions/68110819/how-to-test-if-two-durations-are-approximately-equal-in-dart",
        "conteudo_html": "<p>I'm trying to test the equality of two durations. Essentially the problem boils down to this:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>test('times are approximately equal', () {\n  final expected = DateTime.now();\n  final actual = DateTime.now();\n  expect(actual, equals(expected));\n});\n</code></pre>\n<p>This test fails because the times are slightly different:</p>\n<pre><code>Expected: DateTime:&lt;2021-06-24 14:37:31.946196&gt;  \n  Actual: DateTime:&lt;2021-06-24 14:37:31.946197&gt;\n</code></pre>\n<p>As long as the durations are within a second of each other that's close enough for me. How do I test that?</p>\n<p><em>I found the answer so I'm adding it below.</em></p>\n",
        "codigo": [
            "test('times are approximately equal', () {\n  final expected = DateTime.now();\n  final actual = DateTime.now();\n  expect(actual, equals(expected));\n});\n",
            "Expected: DateTime:<2021-06-24 14:37:31.946196>  \n  Actual: DateTime:<2021-06-24 14:37:31.946197>\n"
        ]
    },
    {
        "titulo": "How do I test dart NoSuchMethodError",
        "score": 1,
        "views": 139,
        "respostas": 1,
        "tags": [
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/67893491/how-do-i-test-dart-nosuchmethoderror",
        "conteudo_html": "<p>How do i test for a class that some method doesn't exists <code>NoSuchMethodError</code> Exists?<br />\nsomething like the below example.</p>\n<pre class=\"lang-dart prettyprint-override\"><code>expect(1.leftShift(12), NoSuchMethodError);\n</code></pre>\n",
        "codigo": [
            "NoSuchMethodError",
            "expect(1.leftShift(12), NoSuchMethodError);\n"
        ]
    },
    {
        "titulo": "Test that a specific exception is thrown in Flutter",
        "score": 1,
        "views": 309,
        "respostas": 2,
        "tags": [
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/67888684/test-that-a-specific-exception-is-thrown-in-flutter",
        "conteudo_html": "<p>I have a test for check an exception:</p>\n<pre><code>test('throws an exception if missing data', () async {\n  final client = MockClient();\n  final _apiService = ApiService(client, 'test/');\n\n  when(\n    client.post(\n      Uri.parse('test/user/auth_user'),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: json.encode({&quot;email&quot;: '', &quot;password&quot;: ''}),\n    ),\n  ).thenAnswer(\n    (_) async =&gt; http.Response(\n      '{&quot;status&quot;: 400,&quot;data&quot;: {&quot;message&quot;: &quot;Missing email or password fields&quot;}}',\n      400,\n    ),\n  );\n\n  expect(\n    await _apiService.login(email: '', password: ''),\n    isA&lt;MissingDataException&gt;(),\n  );\n});\n</code></pre>\n<p>but is not working, this is the output of the test:</p>\n<p><a href=\"https://i.sstatic.net/Vu8Uv.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/Vu8Uv.png\" alt=\"Output for login throws an exception if missing data\nInstance of 'MissingDataException'\npackage:welivery_scanner/services/api/api.dart 44:11  ApiService.login\" /></a></p>\n<p>This is my exception:</p>\n<pre><code>class MissingDataException implements Exception {\n  String message;\n  MissingDataException(this.message);\n}\n</code></pre>\n<p>I tried with</p>\n<pre><code>throwsException\n</code></pre>\n<p>and didn't work.</p>\n<p>I also tried with</p>\n<pre><code>throwsA(TypeMatcher&lt;MissingDataException&gt;())\n</code></pre>\n<p>and also didn't work.</p>\n<p>What I can do?</p>\n<p>Thanks in advance.</p>\n",
        "codigo": [
            "test('throws an exception if missing data', () async {\n  final client = MockClient();\n  final _apiService = ApiService(client, 'test/');\n\n  when(\n    client.post(\n      Uri.parse('test/user/auth_user'),\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: json.encode({\"email\": '', \"password\": ''}),\n    ),\n  ).thenAnswer(\n    (_) async => http.Response(\n      '{\"status\": 400,\"data\": {\"message\": \"Missing email or password fields\"}}',\n      400,\n    ),\n  );\n\n  expect(\n    await _apiService.login(email: '', password: ''),\n    isA<MissingDataException>(),\n  );\n});\n",
            "class MissingDataException implements Exception {\n  String message;\n  MissingDataException(this.message);\n}\n",
            "throwsException\n",
            "throwsA(TypeMatcher<MissingDataException>())\n"
        ]
    },
    {
        "titulo": "Dart: How to mock and stub Sqflite transaction (inner callback)?",
        "score": 1,
        "views": 1627,
        "respostas": 2,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing",
            "mocking"
        ],
        "link": "https://stackoverflow.com/questions/67722086/dart-how-to-mock-and-stub-sqflite-transaction-inner-callback",
        "conteudo_html": "<p>i am trying to mock the following method of sqlite_api.dart by (<a href=\"https://pub.dev/packages/sqflite\" rel=\"nofollow noreferrer\">https://pub.dev/packages/sqflite</a>):</p>\n<pre class=\"lang-dart prettyprint-override\"><code>Future&lt;T&gt; transaction&lt;T&gt;(Future&lt;T&gt; Function(Transaction txn) action, {bool? exclusive});\n</code></pre>\n<p>my implementation/adapting of the method is like:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>Future&lt;void&gt; _transaction(Set&lt;DatabaseLocalRequest&gt; payload) async {\n    await this._api.transaction((txn) async =&gt; {\n      for (final req in payload) {\n        await txn.rawInsert(req.query.sql, req.query.arguments)\n      }\n    });\n}\n</code></pre>\n<p>my db_test.dart using Mocktail (<a href=\"https://pub.dev/packages/mocktail\" rel=\"nofollow noreferrer\">https://pub.dev/packages/mocktail</a>):</p>\n<pre class=\"lang-dart prettyprint-override\"><code>test('if [single] put succeeds', () async {\n      // SETUP\n      sut = DatabaseLocalProvider(db: mockDb);\n      final query = Statement(sql: 'INSERT INTO Test(name, value, num) VALUES(&quot;some name&quot;, 1234, 456.789)');\n      final req = DatabaseLocalRequest(query: query);\n\n      // MOCK\n      when(() =&gt; mockDb.transaction((txn) =&gt; txn.rawInsert(req.query.sql, req.query.arguments)))\n          .thenAnswer((_) async =&gt; 1);\n\n      // ACT, ASSERT\n      await sut.put(req: req, bulkReq: null).then((response) =&gt; {\n        expect(response, ...\n      });\n}); // test end\n</code></pre>\n<p>I got the following response from the console <strong>ERROR</strong>:\n🚨🚨</p>\n<pre><code>type 'Null' is not a subtype of type 'Future&lt;Set&lt;Set&lt;int&gt;&gt;&gt;'\n</code></pre>\n<hr />\n<p>How do I stub the inner <code>txn.rawInsert()</code> method that should respond with the <code>Future&lt;Set&lt;Set&lt;int&gt;&gt;&gt;</code> with <code>{{1}}</code>?</p>\n<p>Thanks in advance!</p>\n",
        "codigo": [
            "Future<T> transaction<T>(Future<T> Function(Transaction txn) action, {bool? exclusive});\n",
            "Future<void> _transaction(Set<DatabaseLocalRequest> payload) async {\n    await this._api.transaction((txn) async => {\n      for (final req in payload) {\n        await txn.rawInsert(req.query.sql, req.query.arguments)\n      }\n    });\n}\n",
            "test('if [single] put succeeds', () async {\n      // SETUP\n      sut = DatabaseLocalProvider(db: mockDb);\n      final query = Statement(sql: 'INSERT INTO Test(name, value, num) VALUES(\"some name\", 1234, 456.789)');\n      final req = DatabaseLocalRequest(query: query);\n\n      // MOCK\n      when(() => mockDb.transaction((txn) => txn.rawInsert(req.query.sql, req.query.arguments)))\n          .thenAnswer((_) async => 1);\n\n      // ACT, ASSERT\n      await sut.put(req: req, bulkReq: null).then((response) => {\n        expect(response, ...\n      });\n}); // test end\n",
            "type 'Null' is not a subtype of type 'Future<Set<Set<int>>>'\n",
            "txn.rawInsert()",
            "Future<Set<Set<int>>>",
            "{{1}}"
        ]
    },
    {
        "titulo": "Flutter how to mock function response when it is called in tested function",
        "score": 0,
        "views": 1887,
        "respostas": 1,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing",
            "mocking"
        ],
        "link": "https://stackoverflow.com/questions/67150548/flutter-how-to-mock-function-response-when-it-is-called-in-tested-function",
        "conteudo_html": "<p>I am trying to test some api call function:</p>\n<pre><code>  Future&lt;SomeType&gt; getType(int id) async {\n    String token = await retrieveToken();\n    String api = await getApiEndpoint();\n    final response = await client.get(&quot;$api/something/$id&quot;, headers: { &quot;Authorization&quot;: &quot;Bearer $token&quot;});\n    if (response.statusCode == 200) {\n      String body = utf8.decode(response.bodyBytes);\n      return SomeType.fromJson(json.decode(body));\n    } else {\n      throw Exception('Failed to load some types from API');\n    }\n  }\n</code></pre>\n<p>The two functions:</p>\n<pre><code>retrieveToken();\ngetApiEndpoint();\n</code></pre>\n<p>that are called inside are not members of the same class as getType() function. They also contain\ninside them instances of FlutterSecureStorage().</p>\n<p>I don't need to test this function, I just want to mock their responses in the test of getType function.</p>\n<p>I've created following test example:</p>\n<pre><code>class MockedApiEndpoint extends Mock implements ApiEndpoint {}\nvoid main() {\n    WidgetsFlutterBinding.ensureInitialized();\n    test('returns SomeType', () async {\n      final typesRepository = TypesRepository();\n      final mockedApiEndpoint = MockedApiEndpoint();\n\n      when(mockedApiEndpoint.getApiEndpoint()).thenAnswer((_) async =&gt; Future.value(&quot;some_url.com&quot;));\n      when(mockedApiEndpoint.retrieveToken()).thenAnswer((_) async =&gt; Future.value(&quot;some_token&quot;));\n\n      typesRepository.client = MockClient( (request) async {\n        final mapJson = {'id' : 123};\n        return Response(json.encode(mapJson), 200);\n      });\n\n      final type =  await typesRepository.getType(123);\n      expect(type.id, 123);\n    });\n}\n\n</code></pre>\n<p>I was able to succesfully Mock the client reposne, I am also trying to mock responses of those two functions, but I am constantly receiveing following error:</p>\n<p><strong>MissingPluginException(No implementation found for method read on channel plugins.it_nomads.com/flutter_secure_storage)</strong></p>\n<p>I would be very greatful for any hints how to approach this topic and what I am doing wrong with this one. I am new to unit testing in Flutter, I've tried to find any similar problem to mine on the web but unfortunatelly failed.</p>\n",
        "codigo": [
            "  Future<SomeType> getType(int id) async {\n    String token = await retrieveToken();\n    String api = await getApiEndpoint();\n    final response = await client.get(\"$api/something/$id\", headers: { \"Authorization\": \"Bearer $token\"});\n    if (response.statusCode == 200) {\n      String body = utf8.decode(response.bodyBytes);\n      return SomeType.fromJson(json.decode(body));\n    } else {\n      throw Exception('Failed to load some types from API');\n    }\n  }\n",
            "retrieveToken();\ngetApiEndpoint();\n",
            "class MockedApiEndpoint extends Mock implements ApiEndpoint {}\nvoid main() {\n    WidgetsFlutterBinding.ensureInitialized();\n    test('returns SomeType', () async {\n      final typesRepository = TypesRepository();\n      final mockedApiEndpoint = MockedApiEndpoint();\n\n      when(mockedApiEndpoint.getApiEndpoint()).thenAnswer((_) async => Future.value(\"some_url.com\"));\n      when(mockedApiEndpoint.retrieveToken()).thenAnswer((_) async => Future.value(\"some_token\"));\n\n      typesRepository.client = MockClient( (request) async {\n        final mapJson = {'id' : 123};\n        return Response(json.encode(mapJson), 200);\n      });\n\n      final type =  await typesRepository.getType(123);\n      expect(type.id, 123);\n    });\n}\n\n"
        ]
    },
    {
        "titulo": "Why does a Dart Future affect a Flutter unit test?",
        "score": 2,
        "views": 127,
        "respostas": 1,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/67047256/why-does-a-dart-future-affect-a-flutter-unit-test",
        "conteudo_html": "<p>If I add to a <a href=\"https://flutter.dev/docs/cookbook/testing/unit/introduction\" rel=\"nofollow noreferrer\">simple unit test</a>\nthe loading of an asset file in the constructor</p>\n<pre><code>import 'package:flutter/services.dart' show rootBundle;\n\nFuture&lt;String&gt; loadAsset(String path) async {\n  return await rootBundle.loadString(path);\n}\n\nclass Counter {\n  int value = 0;\n  void increment() =&gt; value++;\n  void decrement() =&gt; value--;\n\n  Counter() {\n    loadAsset('assets/hello.txt').then((dynamic output) {\n      print('$output');\n    });\n  }\n}\n</code></pre>\n<p>without modifying the <code>Counter</code> class</p>\n<pre><code>import 'package:test/test.dart';\nimport 'package:counter/counter.dart';\n\nvoid main() {\n  test('Counter value should be incremented', () {\n    final counter = Counter();\n\n    counter.increment();\n\n    expect(counter.value, 1);\n  });\n}\n</code></pre>\n<p>then I'm expecting that the test will continue to pass just the same.</p>\n<p>I do not know whether</p>\n<ol>\n<li>the <code>print</code> statement will execute before or after <code>counter.increment()</code>,</li>\n<li>nor whether it will run before or after <code>expect(counter.value, 1)</code>,</li>\n</ol>\n<p>but that doesn't matter, because the counter <em>will</em> be initialized before the first line of the constructor runs, and the <code>expect</code> can only run after <code>increment()</code> would have completed.</p>\n<p>That's not the case. I get:</p>\n<pre><code>&gt; flutter test test/counter_test.dart\nRunning &quot;flutter pub get&quot; in counter...                         1,010ms\n00:03 +0 -1: Counter value should be incremented [E]\n  Null check operator used on a null value\n  package:flutter/src/services/asset_bundle.dart 225:39  PlatformAssetBundle.load\n  ...\n  test/counter_test.dart 7:21                            main.&lt;fn&gt;\n  \n00:03 +0 -1: Some tests failed.\n</code></pre>\n<p>Why does a Dart <code>Future</code> interfere with a Flutter test?</p>\n<p><strong>Update</strong></p>\n<p>OK, now that I've typed the question, I see the problem. The instance <code>final Counter</code> is not actually yet initialized when the increment and the expect statements run. That's by design, since the result of <code>await</code> could matter for the object.</p>\n<p>Still, is there an inherent flaw in <code>await</code>-ing in a constructor (that's used in a test)? How would you rewrite this test if you want to initialize some data from an asset?</p>\n<p><strong>Update 2</strong></p>\n<p>This appears to be version-relevant. I'm using <code>Flutter 2.1.0-12.2.pre • channel beta</code>.</p>\n",
        "codigo": [
            "import 'package:flutter/services.dart' show rootBundle;\n\nFuture<String> loadAsset(String path) async {\n  return await rootBundle.loadString(path);\n}\n\nclass Counter {\n  int value = 0;\n  void increment() => value++;\n  void decrement() => value--;\n\n  Counter() {\n    loadAsset('assets/hello.txt').then((dynamic output) {\n      print('$output');\n    });\n  }\n}\n",
            "Counter",
            "import 'package:test/test.dart';\nimport 'package:counter/counter.dart';\n\nvoid main() {\n  test('Counter value should be incremented', () {\n    final counter = Counter();\n\n    counter.increment();\n\n    expect(counter.value, 1);\n  });\n}\n",
            "print",
            "counter.increment()",
            "expect(counter.value, 1)",
            "expect",
            "increment()",
            "> flutter test test/counter_test.dart\nRunning \"flutter pub get\" in counter...                         1,010ms\n00:03 +0 -1: Counter value should be incremented [E]\n  Null check operator used on a null value\n  package:flutter/src/services/asset_bundle.dart 225:39  PlatformAssetBundle.load\n  ...\n  test/counter_test.dart 7:21                            main.<fn>\n  \n00:03 +0 -1: Some tests failed.\n",
            "Future",
            "final Counter",
            "await",
            "await",
            "Flutter 2.1.0-12.2.pre • channel beta"
        ]
    },
    {
        "titulo": "How to test BLoC listening stream?",
        "score": 0,
        "views": 1535,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "bloc"
        ],
        "link": "https://stackoverflow.com/questions/66883202/how-to-test-bloc-listening-stream",
        "conteudo_html": "<p>I want to test my chat_bloc file which listens several streams:</p>\n<pre><code>class ChatBloc extends Bloc&lt;ChatEvent, ChatState&gt; {\n  final ChatRepository chatRepository;\n\n  ChatBloc(\n      {@required this.chatRepository,})\n      : super(ChatLoading()) {\n\n    this.add(ChatScreenStarted());\n\n    _chatSubscription = chatRepository.message.listen((message) { // error points here\n      // do smth\n    });\n  }\n\n  StreamSubscription&lt;Message&gt; _chatSubscription;\n  //  mapEventToState and others\n\n  }\n\n</code></pre>\n<p>Message getter in ChatRepository:</p>\n<pre><code>@override\n  Stream&lt;Message&gt; get message async* {\n    yield* chatDataSource.messages;\n  }\n\n</code></pre>\n<p>Mocking ChatRepository with mockito. And try to test like this:</p>\n<pre><code>class MockChatRepository extends Mock implements ChatRepository {}\n\nvoid main() {\n  MockChatsRepository mockChatsRepository;\n\n  ChatBloc chatBloc;\n\n  setUp(() {\n    mockChatRepository = MockChatRepository();\n    \n    chatBloc = ChatBloc(\n      chatRepository: mockChatRepository,\n    );\n  });\n\n  blocTest(\n    'sould ...',\n    build: () =&gt; chatBloc,\n    act: (ChatBloc chatBloc) {\n      when(mockChatRepository.message)\n          .thenReturn(Stream&lt;Message&gt;.fromIterable([tMessageModel]));\n      chatBloc.add(ChatScreenStarted());\n    },\n    expect: () =&gt; [],\n  );\n}\n\n</code></pre>\n<p>Gives error <strong>NoSuchMethodError: The method 'listen' was called on null.</strong></p>\n<p>How can I stub that stream?</p>\n",
        "codigo": [
            "class ChatBloc extends Bloc<ChatEvent, ChatState> {\n  final ChatRepository chatRepository;\n\n  ChatBloc(\n      {@required this.chatRepository,})\n      : super(ChatLoading()) {\n\n    this.add(ChatScreenStarted());\n\n    _chatSubscription = chatRepository.message.listen((message) { // error points here\n      // do smth\n    });\n  }\n\n  StreamSubscription<Message> _chatSubscription;\n  //  mapEventToState and others\n\n  }\n\n",
            "@override\n  Stream<Message> get message async* {\n    yield* chatDataSource.messages;\n  }\n\n",
            "class MockChatRepository extends Mock implements ChatRepository {}\n\nvoid main() {\n  MockChatsRepository mockChatsRepository;\n\n  ChatBloc chatBloc;\n\n  setUp(() {\n    mockChatRepository = MockChatRepository();\n    \n    chatBloc = ChatBloc(\n      chatRepository: mockChatRepository,\n    );\n  });\n\n  blocTest(\n    'sould ...',\n    build: () => chatBloc,\n    act: (ChatBloc chatBloc) {\n      when(mockChatRepository.message)\n          .thenReturn(Stream<Message>.fromIterable([tMessageModel]));\n      chatBloc.add(ChatScreenStarted());\n    },\n    expect: () => [],\n  );\n}\n\n"
        ]
    },
    {
        "titulo": "how to creaate widget test for statefulwidget",
        "score": 1,
        "views": 702,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "widget",
            "widget-test-flutter"
        ],
        "link": "https://stackoverflow.com/questions/66849467/how-to-creaate-widget-test-for-statefulwidget",
        "conteudo_html": "<p>I have 3 different files/screens (the main, the login and the sign up), where the login and sign up are statefulwidgtes. i would like to perform widget testing in the screens, however, it seems like I can't get the widgets under login and sign up, every time I try I get the message:</p>\n<p>Expected: exactly one matching node in the widget tree\nActual: _WidgetTypeFinder:&lt;zero widgets with type &quot;ListView&quot; (ignoring offstage widgets)&gt;\nWhich: means none were found but one was expected</p>\n<p>Please note that in the example above, the ListView widget actually exist, but isn't being located by the tester.</p>\n<p>Here is the code of the main widget</p>\n<pre><code>import &quot;package:flutter/material.dart&quot;;\nimport 'package:loginscreen/setup/login.dart';\nimport 'package:firebase_core/firebase_core.dart';\n// void main() =&gt; runApp(MyApp());\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp();\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n        theme: ThemeData(primarySwatch: Colors.blue), home: LoginPage());\n  }\n}\n</code></pre>\n<p>code for Loginpage:</p>\n<pre><code>import 'package:flutter/material.dart';\nimport './signup.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:loginscreen/pages/home.dart';\nimport 'package:modal_progress_hud/modal_progress_hud.dart';\n\nclass LoginPage extends StatefulWidget {\n  LoginPage({Key key}) : super(key: key);\n\n  @override\n  State&lt;StatefulWidget&gt; createState() =&gt; new _State();\n}\n\nclass _State extends State&lt;LoginPage&gt; {\n  TextEditingController nameController = TextEditingController();\n  TextEditingController passwordController = TextEditingController();\n  String email;\n  String password;\n  final _auth = FirebaseAuth.instance;\n  bool showSpinner = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Sign In'),\n      ),\n      body: ModalProgressHUD(\n        inAsyncCall: showSpinner,\n        child: Padding(\n          padding: EdgeInsets.all(10),\n          child: ListView(\n            children: &lt;Widget&gt;[\n              Container(\n                  alignment: Alignment.center,\n                  padding: EdgeInsets.all(10),\n                  child: Text(\n                    'Firebase Authentication',\n                    style: TextStyle(\n                        color: Colors.blue,\n                        fontWeight: FontWeight.w500,\n                        fontSize: 30),\n                  )),\n              Container(\n                padding: EdgeInsets.all(10),\n                child: TextField(\n                  keyboardType: TextInputType.emailAddress,\n                  onChanged: (value) {\n                    email = value;\n                  },\n                  controller: nameController,\n                  decoration: InputDecoration(\n                    border: OutlineInputBorder(),\n                    labelText: 'Email Address',\n                  ),\n                ),\n              ),\n              Container(\n                padding: EdgeInsets.fromLTRB(10, 10, 10, 0),\n                child: TextField(\n                  onChanged: (value) {\n                    password = value;\n                  },\n                  obscureText: true,\n                  controller: passwordController,\n                  decoration: InputDecoration(\n                    border: OutlineInputBorder(),\n                    labelText: 'Password',\n                  ),\n                ),\n              ),\n              TextButton(\n                onPressed: () {\n                  //forgot password screen\n                },\n                // textColor: Colors.blue,\n                child: Text('Forgot Password'),\n              ),\n              Container(\n                height: 50,\n                padding: EdgeInsets.fromLTRB(10, 0, 10, 0),\n                // ignore: deprecated_member_use\n                child: RaisedButton(\n                  textColor: Colors.white,\n                  color: Colors.blue,\n                  child: Text('Login'),\n                  onPressed: () async {\n                    setState(() {\n                      showSpinner = true;\n                    });\n                    try {\n                      await _auth.signInWithEmailAndPassword(\n                          email: email, password: password);\n                      setState(() {\n                        showSpinner = true;\n                      });\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (context) =&gt; WelcomePage(),\n                        ),\n                      );\n                    } on FirebaseAuthException catch (e) {\n                      if (e.code == 'user-not-found') {\n                        print('No user found for that email.');\n                      } else if (e.code == 'wrong-password') {\n                        print('Wrong password provided for that user.');\n                      }\n                    }\n                  },\n                ),\n              ),\n              Container(\n                  child: Row(\n                children: [\n                  Text('Don\\'t not have account?'),\n                  // ignore: deprecated_member_use\n                  FlatButton(\n                    textColor: Colors.blue,\n                    child: Text(\n                      'Sign Up',\n                      style: TextStyle(fontSize: 20),\n                    ),\n                    onPressed: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(builder: (context) =&gt; SignupPage()),\n                      );\n                    },\n                  )\n                ],\n                mainAxisAlignment: MainAxisAlignment.center,\n              ))\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n</code></pre>\n<p>code for signup page:</p>\n<pre><code>import 'package:flutter/material.dart';\nimport './login.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:loginscreen/pages/home.dart';\nimport 'package:modal_progress_hud/modal_progress_hud.dart';\n\nclass SignupPage extends StatefulWidget {\n  @override\n  State&lt;StatefulWidget&gt; createState() =&gt; new _State();\n}\n\nclass _State extends State&lt;SignupPage&gt; {\n  TextEditingController nameController = TextEditingController();\n  TextEditingController passwordController = TextEditingController();\n  final _auth = FirebaseAuth.instance;\n  String email;\n  String password;\n  String repeatpassword;\n  bool showSpinner = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: Text('Login Screen App'),\n        ),\n        body: ModalProgressHUD(\n            inAsyncCall: showSpinner,\n            child: Padding(\n                padding: EdgeInsets.all(10),\n                child: ListView(\n                  children: &lt;Widget&gt;[\n                    Container(\n                        alignment: Alignment.center,\n                        padding: EdgeInsets.all(10),\n                        child: Text(\n                          'Firebase Authentication',\n                          style: TextStyle(\n                              color: Colors.blue,\n                              fontWeight: FontWeight.w500,\n                              fontSize: 30),\n                        )),\n                    Container(\n                      padding: EdgeInsets.all(10),\n                      child: TextField(\n                        keyboardType: TextInputType.emailAddress,\n                        onChanged: (value) {\n                          email = value;\n                        },\n                        controller: nameController,\n                        decoration: InputDecoration(\n                          border: OutlineInputBorder(),\n                          labelText: 'Email Address',\n                        ),\n                      ),\n                    ),\n                    Container(\n                      padding: EdgeInsets.fromLTRB(10, 10, 10, 0),\n                      child: TextField(\n                        onChanged: (value) {\n                          password = value;\n                        },\n                        obscureText: true,\n                        controller: passwordController,\n                        decoration: InputDecoration(\n                          border: OutlineInputBorder(),\n                          labelText: 'Password (must be at least 6 characters)',\n                        ),\n                      ),\n                    ),\n                    Container(\n                      padding: EdgeInsets.fromLTRB(10, 10, 10, 0),\n                      child: TextField(\n                        onChanged: (value) {\n                          repeatpassword = value;\n                        },\n                        obscureText: true,\n                        controller: passwordController,\n                        decoration: InputDecoration(\n                          border: OutlineInputBorder(),\n                          labelText: 'Repeat Password',\n                        ),\n                      ),\n                    ),\n                    TextButton(\n                      onPressed: () {\n                        //forgot password screen\n                      },\n                      // textColor: Colors.blue,\n                      child: Text('Forgot Password'),\n                    ),\n                    Container(\n                      height: 50,\n                      padding: EdgeInsets.fromLTRB(10, 0, 10, 0),\n                      child: ElevatedButton(\n                        // textColor: Colors.white,\n                        // color: Colors.blue,\n                        child: Text('Sign Up'),\n                        onPressed: () async {\n                          setState(() {\n                            showSpinner = true;\n                          });\n                          try {\n                            // UserCredential userCredential =\n                            await _auth.createUserWithEmailAndPassword(\n                                email: email, password: password);\n                            setState(() {\n                              showSpinner = false;\n                            });\n                            Navigator.push(\n                              context,\n                              MaterialPageRoute(\n                                builder: (context) =&gt; WelcomePage(),\n                              ),\n                            );\n                          } on FirebaseAuthException catch (e) {\n                            if (e.code == 'weak-password') {\n                              print('The password provided is too weak.');\n                            } else if (e.code == 'email-already-in-use') {\n                              print(\n                                  'The account already exists for that email.');\n                            }\n                          } catch (e) {\n                            print(e);\n                          }\n                        },\n                      ),\n                    ),\n                    Container(\n                        child: Row(\n                      children: &lt;Widget&gt;[\n                        Text('Already have an account?'),\n                        // ignore: deprecated_member_use\n                        FlatButton(\n                          textColor: Colors.blue,\n                          child: Text(\n                            'Sign in',\n                            style: TextStyle(fontSize: 20),\n                          ),\n                          onPressed: () {\n                            Navigator.push(\n                              context,\n                              MaterialPageRoute(\n                                  builder: (context) =&gt; LoginPage()),\n                            );\n                          },\n                        )\n                      ],\n                      mainAxisAlignment: MainAxisAlignment.center,\n                    ))\n                  ],\n                ))));\n  }\n}\n</code></pre>\n<p>login page widget test (this is not working):</p>\n<pre><code>import 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:loginscreen/setup/login.dart';\n\nvoid main() {\n  testWidgets(' ', (WidgetTester tester) async {\n    // add it to the widget tester\n    await tester.pumpWidget(LoginPage());\n\n    expect(find.byType(Text), findsOneWidget);\n    \n  });\n}\n</code></pre>\n<p>so my question is, how can I test the login and sign up stateful widgets? how do I get the widgets inside these screens?flu</p>\n",
        "codigo": [
            "import \"package:flutter/material.dart\";\nimport 'package:loginscreen/setup/login.dart';\nimport 'package:firebase_core/firebase_core.dart';\n// void main() => runApp(MyApp());\n\nvoid main() async {\n  WidgetsFlutterBinding.ensureInitialized();\n  await Firebase.initializeApp();\n  runApp(MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n        theme: ThemeData(primarySwatch: Colors.blue), home: LoginPage());\n  }\n}\n",
            "import 'package:flutter/material.dart';\nimport './signup.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:loginscreen/pages/home.dart';\nimport 'package:modal_progress_hud/modal_progress_hud.dart';\n\nclass LoginPage extends StatefulWidget {\n  LoginPage({Key key}) : super(key: key);\n\n  @override\n  State<StatefulWidget> createState() => new _State();\n}\n\nclass _State extends State<LoginPage> {\n  TextEditingController nameController = TextEditingController();\n  TextEditingController passwordController = TextEditingController();\n  String email;\n  String password;\n  final _auth = FirebaseAuth.instance;\n  bool showSpinner = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Sign In'),\n      ),\n      body: ModalProgressHUD(\n        inAsyncCall: showSpinner,\n        child: Padding(\n          padding: EdgeInsets.all(10),\n          child: ListView(\n            children: <Widget>[\n              Container(\n                  alignment: Alignment.center,\n                  padding: EdgeInsets.all(10),\n                  child: Text(\n                    'Firebase Authentication',\n                    style: TextStyle(\n                        color: Colors.blue,\n                        fontWeight: FontWeight.w500,\n                        fontSize: 30),\n                  )),\n              Container(\n                padding: EdgeInsets.all(10),\n                child: TextField(\n                  keyboardType: TextInputType.emailAddress,\n                  onChanged: (value) {\n                    email = value;\n                  },\n                  controller: nameController,\n                  decoration: InputDecoration(\n                    border: OutlineInputBorder(),\n                    labelText: 'Email Address',\n                  ),\n                ),\n              ),\n              Container(\n                padding: EdgeInsets.fromLTRB(10, 10, 10, 0),\n                child: TextField(\n                  onChanged: (value) {\n                    password = value;\n                  },\n                  obscureText: true,\n                  controller: passwordController,\n                  decoration: InputDecoration(\n                    border: OutlineInputBorder(),\n                    labelText: 'Password',\n                  ),\n                ),\n              ),\n              TextButton(\n                onPressed: () {\n                  //forgot password screen\n                },\n                // textColor: Colors.blue,\n                child: Text('Forgot Password'),\n              ),\n              Container(\n                height: 50,\n                padding: EdgeInsets.fromLTRB(10, 0, 10, 0),\n                // ignore: deprecated_member_use\n                child: RaisedButton(\n                  textColor: Colors.white,\n                  color: Colors.blue,\n                  child: Text('Login'),\n                  onPressed: () async {\n                    setState(() {\n                      showSpinner = true;\n                    });\n                    try {\n                      await _auth.signInWithEmailAndPassword(\n                          email: email, password: password);\n                      setState(() {\n                        showSpinner = true;\n                      });\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(\n                          builder: (context) => WelcomePage(),\n                        ),\n                      );\n                    } on FirebaseAuthException catch (e) {\n                      if (e.code == 'user-not-found') {\n                        print('No user found for that email.');\n                      } else if (e.code == 'wrong-password') {\n                        print('Wrong password provided for that user.');\n                      }\n                    }\n                  },\n                ),\n              ),\n              Container(\n                  child: Row(\n                children: [\n                  Text('Don\\'t not have account?'),\n                  // ignore: deprecated_member_use\n                  FlatButton(\n                    textColor: Colors.blue,\n                    child: Text(\n                      'Sign Up',\n                      style: TextStyle(fontSize: 20),\n                    ),\n                    onPressed: () {\n                      Navigator.push(\n                        context,\n                        MaterialPageRoute(builder: (context) => SignupPage()),\n                      );\n                    },\n                  )\n                ],\n                mainAxisAlignment: MainAxisAlignment.center,\n              ))\n            ],\n          ),\n        ),\n      ),\n    );\n  }\n}\n",
            "import 'package:flutter/material.dart';\nimport './login.dart';\nimport 'package:firebase_auth/firebase_auth.dart';\nimport 'package:loginscreen/pages/home.dart';\nimport 'package:modal_progress_hud/modal_progress_hud.dart';\n\nclass SignupPage extends StatefulWidget {\n  @override\n  State<StatefulWidget> createState() => new _State();\n}\n\nclass _State extends State<SignupPage> {\n  TextEditingController nameController = TextEditingController();\n  TextEditingController passwordController = TextEditingController();\n  final _auth = FirebaseAuth.instance;\n  String email;\n  String password;\n  String repeatpassword;\n  bool showSpinner = false;\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: Text('Login Screen App'),\n        ),\n        body: ModalProgressHUD(\n            inAsyncCall: showSpinner,\n            child: Padding(\n                padding: EdgeInsets.all(10),\n                child: ListView(\n                  children: <Widget>[\n                    Container(\n                        alignment: Alignment.center,\n                        padding: EdgeInsets.all(10),\n                        child: Text(\n                          'Firebase Authentication',\n                          style: TextStyle(\n                              color: Colors.blue,\n                              fontWeight: FontWeight.w500,\n                              fontSize: 30),\n                        )),\n                    Container(\n                      padding: EdgeInsets.all(10),\n                      child: TextField(\n                        keyboardType: TextInputType.emailAddress,\n                        onChanged: (value) {\n                          email = value;\n                        },\n                        controller: nameController,\n                        decoration: InputDecoration(\n                          border: OutlineInputBorder(),\n                          labelText: 'Email Address',\n                        ),\n                      ),\n                    ),\n                    Container(\n                      padding: EdgeInsets.fromLTRB(10, 10, 10, 0),\n                      child: TextField(\n                        onChanged: (value) {\n                          password = value;\n                        },\n                        obscureText: true,\n                        controller: passwordController,\n                        decoration: InputDecoration(\n                          border: OutlineInputBorder(),\n                          labelText: 'Password (must be at least 6 characters)',\n                        ),\n                      ),\n                    ),\n                    Container(\n                      padding: EdgeInsets.fromLTRB(10, 10, 10, 0),\n                      child: TextField(\n                        onChanged: (value) {\n                          repeatpassword = value;\n                        },\n                        obscureText: true,\n                        controller: passwordController,\n                        decoration: InputDecoration(\n                          border: OutlineInputBorder(),\n                          labelText: 'Repeat Password',\n                        ),\n                      ),\n                    ),\n                    TextButton(\n                      onPressed: () {\n                        //forgot password screen\n                      },\n                      // textColor: Colors.blue,\n                      child: Text('Forgot Password'),\n                    ),\n                    Container(\n                      height: 50,\n                      padding: EdgeInsets.fromLTRB(10, 0, 10, 0),\n                      child: ElevatedButton(\n                        // textColor: Colors.white,\n                        // color: Colors.blue,\n                        child: Text('Sign Up'),\n                        onPressed: () async {\n                          setState(() {\n                            showSpinner = true;\n                          });\n                          try {\n                            // UserCredential userCredential =\n                            await _auth.createUserWithEmailAndPassword(\n                                email: email, password: password);\n                            setState(() {\n                              showSpinner = false;\n                            });\n                            Navigator.push(\n                              context,\n                              MaterialPageRoute(\n                                builder: (context) => WelcomePage(),\n                              ),\n                            );\n                          } on FirebaseAuthException catch (e) {\n                            if (e.code == 'weak-password') {\n                              print('The password provided is too weak.');\n                            } else if (e.code == 'email-already-in-use') {\n                              print(\n                                  'The account already exists for that email.');\n                            }\n                          } catch (e) {\n                            print(e);\n                          }\n                        },\n                      ),\n                    ),\n                    Container(\n                        child: Row(\n                      children: <Widget>[\n                        Text('Already have an account?'),\n                        // ignore: deprecated_member_use\n                        FlatButton(\n                          textColor: Colors.blue,\n                          child: Text(\n                            'Sign in',\n                            style: TextStyle(fontSize: 20),\n                          ),\n                          onPressed: () {\n                            Navigator.push(\n                              context,\n                              MaterialPageRoute(\n                                  builder: (context) => LoginPage()),\n                            );\n                          },\n                        )\n                      ],\n                      mainAxisAlignment: MainAxisAlignment.center,\n                    ))\n                  ],\n                ))));\n  }\n}\n",
            "import 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:loginscreen/setup/login.dart';\n\nvoid main() {\n  testWidgets(' ', (WidgetTester tester) async {\n    // add it to the widget tester\n    await tester.pumpWidget(LoginPage());\n\n    expect(find.byType(Text), findsOneWidget);\n    \n  });\n}\n"
        ]
    },
    {
        "titulo": "Flutter Integration test: I can&#39;t target some of my widgets - Getter not found",
        "score": 0,
        "views": 462,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "integration-testing"
        ],
        "link": "https://stackoverflow.com/questions/66839874/flutter-integration-test-i-cant-target-some-of-my-widgets-getter-not-found",
        "conteudo_html": "<p>I am learning about integration testing in flutter and I'm running into a problem.</p>\n<p>My app contains a sign-in button widget and my test starts with pumping it.</p>\n<p>However, I can't seem to target it.</p>\n<p>Every attempt results in the following error:</p>\n<pre><code>integration_test/doctor_integration_test.dart:21:24: Error: Getter not found: 'SignInPage'.\n    expect(find.byType(SignInPage), findsOneWidget);\n                       ^^^^^^^^^^\n                                                                        \n                                                                        \nFAILURE: Build failed with an exception.\n</code></pre>\n<p>The SignInPage is called within:</p>\n<pre><code>MaterialApp _buildMaterialApp(BuildContext context) {\n    return MaterialApp(\n      title: 'Skinopathy: Doctor',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n        visualDensity: VisualDensity.adaptivePlatformDensity,\n      ),\n      routes: {\n        '/': (context) {\n          return BlocListener&lt;AppBloc, AppState&gt;(\n            listener: (context, state) {\n              if (state is AppAuthenticated) {\n                Navigator.pushReplacement(\n                  context,\n                  MaterialPageRoute(\n                    builder: (_) =&gt; WelcomePage(),\n                  ),\n                );\n              } else if (state is AppUnauthenticated) {\n                Navigator.pushReplacementNamed(context, '/sign_in');\n              } else if (state is AppOutdated) {\n                Navigator.pushReplacement(\n                  context,\n                  MaterialPageRoute(\n                    builder: (_) =&gt; OutdatedVersionPage(),\n                  ),\n                );\n              }\n            },\n            child: Center(\n              child: SplashPage(),\n            ),\n          );\n        },\n        '/sign_in': (context) {\n          return SignInPage();\n        },\n</code></pre>\n<p>My presumption is that the integration takes place before the SignInPage is loaded.</p>\n<p>_buildMaterialApp is also a child of Widget _buildRootLevelWidgets(BuildContext context)</p>\n<p>How do I properly target SignInPage for testing?</p>\n<p>Is there anything else I'm doing wrong?</p>\n<p>Please note: I did NOT build this app; I'm just here to test it.</p>\n<p>Thanks in advance!</p>\n",
        "codigo": [
            "integration_test/doctor_integration_test.dart:21:24: Error: Getter not found: 'SignInPage'.\n    expect(find.byType(SignInPage), findsOneWidget);\n                       ^^^^^^^^^^\n                                                                        \n                                                                        \nFAILURE: Build failed with an exception.\n",
            "MaterialApp _buildMaterialApp(BuildContext context) {\n    return MaterialApp(\n      title: 'Skinopathy: Doctor',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n        visualDensity: VisualDensity.adaptivePlatformDensity,\n      ),\n      routes: {\n        '/': (context) {\n          return BlocListener<AppBloc, AppState>(\n            listener: (context, state) {\n              if (state is AppAuthenticated) {\n                Navigator.pushReplacement(\n                  context,\n                  MaterialPageRoute(\n                    builder: (_) => WelcomePage(),\n                  ),\n                );\n              } else if (state is AppUnauthenticated) {\n                Navigator.pushReplacementNamed(context, '/sign_in');\n              } else if (state is AppOutdated) {\n                Navigator.pushReplacement(\n                  context,\n                  MaterialPageRoute(\n                    builder: (_) => OutdatedVersionPage(),\n                  ),\n                );\n              }\n            },\n            child: Center(\n              child: SplashPage(),\n            ),\n          );\n        },\n        '/sign_in': (context) {\n          return SignInPage();\n        },\n"
        ]
    },
    {
        "titulo": "Flutter Unit Test - Expect difference between SuccessState&lt;dynamic&gt; and SuccessState&lt;NetworkResponse&gt;",
        "score": 1,
        "views": 356,
        "respostas": 2,
        "tags": [
            "flutter",
            "unit-testing",
            "dart",
            "testing",
            "types"
        ],
        "link": "https://stackoverflow.com/questions/66705802/flutter-unit-test-expect-difference-between-successstatedynamic-and-successs",
        "conteudo_html": "<p>I'm trying to make unit test for my app but I get some issues with the expect() function.</p>\n<p>This is my test:</p>\n<pre><code>test('User should register.', () async {\n  final _response = await _api.register(mockSuccessfullRegisterUser);\n  mockSuccessfullLoginUser = User(email: mockSuccessfullRegisterUser.email, password: mockSuccessfullRegisterUser.password);\n  print(mockSuccessfullLoginUser.email);\n  expect(_response.runtimeType, SuccessWithTokenResponseState);\n});\n</code></pre>\n<p>My _response can return multiple types of responses like: SuccessWithTokenState, ErrorState, …\nThe expect function gives me this error:</p>\n<pre><code>TestFailure (Expected: Type:&lt;SuccessWithTokenResponseState&lt;dynamic&gt;&gt;\n  Actual: Type:&lt;SuccessWithTokenResponseState&lt;NetworkResponse&gt;&gt;\n)\n</code></pre>\n<p>Shouldn't SuccessWithTokenResponseState be equal to SuccessWithTokenResponseState?</p>\n",
        "codigo": [
            "test('User should register.', () async {\n  final _response = await _api.register(mockSuccessfullRegisterUser);\n  mockSuccessfullLoginUser = User(email: mockSuccessfullRegisterUser.email, password: mockSuccessfullRegisterUser.password);\n  print(mockSuccessfullLoginUser.email);\n  expect(_response.runtimeType, SuccessWithTokenResponseState);\n});\n",
            "TestFailure (Expected: Type:<SuccessWithTokenResponseState<dynamic>>\n  Actual: Type:<SuccessWithTokenResponseState<NetworkResponse>>\n)\n"
        ]
    },
    {
        "titulo": "Flutter Dio test url endpoint path",
        "score": 3,
        "views": 1174,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "flutter-test",
            "dio"
        ],
        "link": "https://stackoverflow.com/questions/66549827/flutter-dio-test-url-endpoint-path",
        "conteudo_html": "<p>Here's how I fetch data from an endpoint:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>  @override\n  Future&lt;Points&gt; getPoints({required int id}) async {\n    try {\n      Response pointsResponse = await dio.get(\n        &quot;points/$id/&quot;,\n      );\n\n      return Points.fromJson(pointsResponse.data);\n    } on DioError catch (dioError) {\n      throw ServerException(dioError.message);\n    }\n  }\n</code></pre>\n<p>Now as a part of my test, I want to test that calling <code>getPoints(id: 12)</code> would make a <code>get</code> call on <code>dio</code> and hit this endpoint: <code>points/12/</code>.</p>\n<p>Sample test:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>  test(\n    &quot;should return Points for a valid id&quot;,\n    () async {\n      when(mockDioAdapter.fetch(any, any, any)).thenAnswer(\n        (_) async =&gt; successfulRequestResponseJson,\n      );\n\n      Points points = await pointsRemoteDataSource.getPoints(id: 12);\n\n      // Want to assert something like: \n      // verify(dio.request.path, &quot;/points/12&quot;);\n    },\n  );\n</code></pre>\n",
        "codigo": [
            "  @override\n  Future<Points> getPoints({required int id}) async {\n    try {\n      Response pointsResponse = await dio.get(\n        \"points/$id/\",\n      );\n\n      return Points.fromJson(pointsResponse.data);\n    } on DioError catch (dioError) {\n      throw ServerException(dioError.message);\n    }\n  }\n",
            "getPoints(id: 12)",
            "get",
            "dio",
            "points/12/",
            "  test(\n    \"should return Points for a valid id\",\n    () async {\n      when(mockDioAdapter.fetch(any, any, any)).thenAnswer(\n        (_) async => successfulRequestResponseJson,\n      );\n\n      Points points = await pointsRemoteDataSource.getPoints(id: 12);\n\n      // Want to assert something like: \n      // verify(dio.request.path, \"/points/12\");\n    },\n  );\n"
        ]
    },
    {
        "titulo": "failed `assert` does not throw `AssertionError` in dart with null-safety, any workaround?",
        "score": 1,
        "views": 1376,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "error-handling",
            "dart-null-safety"
        ],
        "link": "https://stackoverflow.com/questions/66470738/failed-assert-does-not-throw-assertionerror-in-dart-with-null-safety-any-wo",
        "conteudo_html": "<p>as soon as I started transitioning to <code>null-safety</code><br />\nI encountered this problem:<br />\nrunning the test below</p>\n<pre class=\"lang-dart prettyprint-override\"><code>//  ignore_for_file: avoid_catching_errors\n\nimport 'package:test/test.dart';\n\nvoid main() {\n  test(\n      'WHEN `AssertionError` is thrown '\n      'THEN `Error` is `AssertionError`'\n      '', () {\n    Type? type;\n\n    void fun() =&gt; throw AssertionError();\n\n    try {\n      fun();\n    } on Error catch (e) {\n      if (e is AssertionError) {\n        type = e.runtimeType;\n      }\n    }\n\n    expect(type, AssertionError);\n  });\n  test('WHEN `assertion` fails THEN throw `AssertionError`', () {\n    Type? type;\n\n    void fun() {\n      assert(false);\n    }\n\n    try {\n      fun();\n    } on Error catch (e) {\n      if (e is AssertionError) {\n        type = e.runtimeType;\n      }\n    }\n\n    expect(type, AssertionError);\n  });\n\n  test('WHEN `assertion fails THEN throwsA(AssertionError) should be true', () {\n    bool fun() {\n      assert(false);\n      return true;\n    }\n\n    expect(fun, throwsA(isA&lt;AssertionError&gt;()));\n  });\n}\n\n</code></pre>\n<p>outputs the following logs</p>\n<pre class=\"lang-sh prettyprint-override\"><code>00:00 +0: loading test/widget_test.dart                                                                                                                                                                \n00:01 +0: loading test/widget_test.dart                                                                                                                                                                \n00:01 +0: test/widget_test.dart: WHEN `AssertionError` is thrown THEN `Error` is `AssertionError`                                                                                                      \n00:01 +1: test/widget_test.dart: WHEN `AssertionError` is thrown THEN `Error` is `AssertionError`                                                                                                      \n00:01 +1: test/widget_test.dart: WHEN `assertion` fails THEN throw `AssertionError`                                                                                                                    \n00:01 +1 -1: test/widget_test.dart: WHEN `assertion` fails THEN throw `AssertionError` [E]                                                                                                             \n  Expected: Type:&lt;AssertionError&gt;\n    Actual: Type:&lt;_AssertionError&gt;\n\n  package:test_api            expect\n  test/widget_test.dart 39:5  main.&lt;fn&gt;\n\n\n00:01 +1 -1: test/widget_test.dart: WHEN `assertion fails THEN throwsA(AssertionError) should be true                                                                                                  \n00:01 +2 -1: test/widget_test.dart: WHEN `assertion fails THEN throwsA(AssertionError) should be true                                                                                                  \n00:01 +2 -1: Some tests failed.                                                                                                                                                                        \npub failed (1; 00:01 +2 -1: Some tests failed.\n)\n\n</code></pre>\n<p>note that attempting to use <code>_AssertionError</code> outputs the error</p>\n<blockquote>\n<p>The name '_AssertionError' isn't defined, so it can't be used in an\n'is' expression. Try changing the name to the name of an existing\ntype, or creating a type with the name '_AssertionError'.</p>\n</blockquote>\n<hr />\n<p>please avoid answering <code>you are not supposed to catch errors</code><br />\nthe code below is purely demonstrative<br />\nand I'm encountering the problem writing tests\nwhile expect(fun(), throwsA(AssertionError)); has been included in the code sample it won't fit my use case</p>\n<hr />\n<p>this is not a bug, but an intended behavior, see <a href=\"https://github.com/dart-lang/sdk/issues/45191\" rel=\"nofollow noreferrer\">issue 45191</a></p>\n<blockquote>\n<p>You shouldn't expect <code>assert(false)</code> to throw an object whose run-time type is <code>AssertionError</code>, it is only guaranteed to throw an object which is typable as such (that is, an object whose run-time type is a subtype of <code>AssertionError</code>), and that's probably the reason why the test <code>expect(type, AssertionError);</code> fails.</p>\n</blockquote>\n<hr />\n<p>my doctor and my pubspec below</p>\n<pre><code>[✓] Flutter (Channel master, 2.1.0-11.0.pre.97, on Linux, locale en_US.UTF-8)\n    • Flutter version 2.1.0-11.0.pre.97 at /home/francesco/snap/flutter/common/flutter\n    • Framework revision c14c8d8177 (2 hours ago), 2021-03-03 21:40:34 -0800\n    • Engine revision 72bbc5d92c\n    • Dart version 2.13.0 (build 2.13.0-93.0.dev)\n\n[✓] Android toolchain - develop for Android devices (Android SDK version 30.0.2)\n    • Android SDK at /home/francesco/Android/Sdk\n    • Platform android-30, build-tools 30.0.2\n    • ANDROID_SDK_ROOT = /home/francesco/Android/Sdk\n    • Java binary at: /usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/bin/java\n    • Java version OpenJDK Runtime Environment (build 1.8.0_282-8u282-b08-0ubuntu1~20.04-b08)\n    • All Android licenses accepted.\n\n[✓] Chrome - develop for the web\n    • CHROME_EXECUTABLE = /snap/bin/chromium\n\n[✓] Linux toolchain - develop for Linux desktop\n    • clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)\n    • cmake version 3.10.2\n    • ninja version 1.8.2\n    • pkg-config version 0.29.1\n\n[!] Android Studio (not installed)\n    • Android Studio not found; download from https://developer.android.com/studio/index.html\n      (or visit https://flutter.dev/docs/get-started/install/linux#android-setup for detailed instructions).\n\n[✓] Connected device (2 available)\n    • Linux (desktop) • linux  • linux-x64      • Linux\n    • Chrome (web)    • chrome • web-javascript • Chromium 89.0.4389.72 snap\n\n! Doctor found issues in 1 category.\nfrancesco@francesco-yoga720:~/project\n</code></pre>\n<pre class=\"lang-yaml prettyprint-override\"><code>name: issue\ndescription: A new Flutter project.\nversion: 1.0.0+1\n\nenvironment:\n  sdk: '&gt;=2.12.0 &lt;3.0.0'\n\ndev_dependencies:\n  test: ^1.16.5\n</code></pre>\n",
        "codigo": [
            "null-safety",
            "//  ignore_for_file: avoid_catching_errors\n\nimport 'package:test/test.dart';\n\nvoid main() {\n  test(\n      'WHEN `AssertionError` is thrown '\n      'THEN `Error` is `AssertionError`'\n      '', () {\n    Type? type;\n\n    void fun() => throw AssertionError();\n\n    try {\n      fun();\n    } on Error catch (e) {\n      if (e is AssertionError) {\n        type = e.runtimeType;\n      }\n    }\n\n    expect(type, AssertionError);\n  });\n  test('WHEN `assertion` fails THEN throw `AssertionError`', () {\n    Type? type;\n\n    void fun() {\n      assert(false);\n    }\n\n    try {\n      fun();\n    } on Error catch (e) {\n      if (e is AssertionError) {\n        type = e.runtimeType;\n      }\n    }\n\n    expect(type, AssertionError);\n  });\n\n  test('WHEN `assertion fails THEN throwsA(AssertionError) should be true', () {\n    bool fun() {\n      assert(false);\n      return true;\n    }\n\n    expect(fun, throwsA(isA<AssertionError>()));\n  });\n}\n\n",
            "00:00 +0: loading test/widget_test.dart                                                                                                                                                                \n00:01 +0: loading test/widget_test.dart                                                                                                                                                                \n00:01 +0: test/widget_test.dart: WHEN `AssertionError` is thrown THEN `Error` is `AssertionError`                                                                                                      \n00:01 +1: test/widget_test.dart: WHEN `AssertionError` is thrown THEN `Error` is `AssertionError`                                                                                                      \n00:01 +1: test/widget_test.dart: WHEN `assertion` fails THEN throw `AssertionError`                                                                                                                    \n00:01 +1 -1: test/widget_test.dart: WHEN `assertion` fails THEN throw `AssertionError` [E]                                                                                                             \n  Expected: Type:<AssertionError>\n    Actual: Type:<_AssertionError>\n\n  package:test_api            expect\n  test/widget_test.dart 39:5  main.<fn>\n\n\n00:01 +1 -1: test/widget_test.dart: WHEN `assertion fails THEN throwsA(AssertionError) should be true                                                                                                  \n00:01 +2 -1: test/widget_test.dart: WHEN `assertion fails THEN throwsA(AssertionError) should be true                                                                                                  \n00:01 +2 -1: Some tests failed.                                                                                                                                                                        \npub failed (1; 00:01 +2 -1: Some tests failed.\n)\n\n",
            "_AssertionError",
            "you are not supposed to catch errors",
            "assert(false)",
            "AssertionError",
            "AssertionError",
            "expect(type, AssertionError);",
            "[✓] Flutter (Channel master, 2.1.0-11.0.pre.97, on Linux, locale en_US.UTF-8)\n    • Flutter version 2.1.0-11.0.pre.97 at /home/francesco/snap/flutter/common/flutter\n    • Framework revision c14c8d8177 (2 hours ago), 2021-03-03 21:40:34 -0800\n    • Engine revision 72bbc5d92c\n    • Dart version 2.13.0 (build 2.13.0-93.0.dev)\n\n[✓] Android toolchain - develop for Android devices (Android SDK version 30.0.2)\n    • Android SDK at /home/francesco/Android/Sdk\n    • Platform android-30, build-tools 30.0.2\n    • ANDROID_SDK_ROOT = /home/francesco/Android/Sdk\n    • Java binary at: /usr/lib/jvm/java-1.8.0-openjdk-amd64/jre/bin/java\n    • Java version OpenJDK Runtime Environment (build 1.8.0_282-8u282-b08-0ubuntu1~20.04-b08)\n    • All Android licenses accepted.\n\n[✓] Chrome - develop for the web\n    • CHROME_EXECUTABLE = /snap/bin/chromium\n\n[✓] Linux toolchain - develop for Linux desktop\n    • clang version 6.0.0-1ubuntu2 (tags/RELEASE_600/final)\n    • cmake version 3.10.2\n    • ninja version 1.8.2\n    • pkg-config version 0.29.1\n\n[!] Android Studio (not installed)\n    • Android Studio not found; download from https://developer.android.com/studio/index.html\n      (or visit https://flutter.dev/docs/get-started/install/linux#android-setup for detailed instructions).\n\n[✓] Connected device (2 available)\n    • Linux (desktop) • linux  • linux-x64      • Linux\n    • Chrome (web)    • chrome • web-javascript • Chromium 89.0.4389.72 snap\n\n! Doctor found issues in 1 category.\nfrancesco@francesco-yoga720:~/project\n",
            "name: issue\ndescription: A new Flutter project.\nversion: 1.0.0+1\n\nenvironment:\n  sdk: '>=2.12.0 <3.0.0'\n\ndev_dependencies:\n  test: ^1.16.5\n"
        ]
    },
    {
        "titulo": "Error for flutter integration test using the new integration_test package to test exceptions",
        "score": 0,
        "views": 465,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "exception",
            "integration-testing"
        ],
        "link": "https://stackoverflow.com/questions/66241855/error-for-flutter-integration-test-using-the-new-integration-test-package-to-tes",
        "conteudo_html": "<p>I am writing an integration test to to try and catch an exception in my code but I am a bit stuck at where my code is going wrong. Please let me know if you have any ideas :-)</p>\n<p>Below is my code;</p>\n<pre><code>Future&lt;Null&gt; _signInPageUnrecognizedEmailProvided(\n\n    WidgetTester tester) async {\n  await tester\n      .pumpAndSettle(Duration(seconds: reasonableStartupTimeInSeconds));\n\n  expect(emailFormField, findsOneWidget);\n  expect(passwordFormField, findsOneWidget);\n  expect(loginButton, findsOneWidget);\n\n  await tester.enterText(emailFormField, unrecognizedUsername);\n  await tester.enterText(passwordFormField, validPassword);\n  await tester.pumpAndSettle();\n\n  await tester.tap(loginButton);\n\n  await tester.pumpAndSettle(\n      Duration(seconds: reasonableAuthenticationTimeInSeconds));\n\n  expect(tester.takeException(), isInstanceOf&lt;HandledException&gt;());\n\n  tester.resetTestTextInput();\n}\n</code></pre>\n<p>And here is my error;</p>\n<pre><code>I/flutter (22131): 💡  Router - generateRoute | name: LoginView arguments: null\nI/flutter (22131): ⚠️  AuthenticationApiService - The user name or password is incorrect. If you have not registered, please use\nthe Register New Account link below.\nI/flutter (22131): ⛔  LogService - identifier: AuthenticationService.getAndStoreAuthToken | exception: The user name or password\nis incorrect. If you have not registered, please use the Register New Account link below. | displayMessage: The user name or      \npassword is incorrect. If you have not registered, please use the Register New Account link below. | alertView: AlertView.Dialog |{email: d.sillyname@smartspaces.app}\nI/flutter (22131): ══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nI/flutter (22131): The following TestFailure object was thrown running a test:\nI/flutter (22131):   Expected: &lt;Instance of 'HandledException'&gt;\nI/flutter (22131):   Actual: &lt;null&gt;\nI/flutter (22131):    Which: is not an instance of 'HandledException'\nI/flutter (22131):\nI/flutter (22131): When the exception was thrown, this was the stack:\nI/flutter (22131): #4      main.&lt;anonymous closure&gt;._signInPageUnrecognizedEmailProvided```\n\n</code></pre>\n",
        "codigo": [
            "Future<Null> _signInPageUnrecognizedEmailProvided(\n\n    WidgetTester tester) async {\n  await tester\n      .pumpAndSettle(Duration(seconds: reasonableStartupTimeInSeconds));\n\n  expect(emailFormField, findsOneWidget);\n  expect(passwordFormField, findsOneWidget);\n  expect(loginButton, findsOneWidget);\n\n  await tester.enterText(emailFormField, unrecognizedUsername);\n  await tester.enterText(passwordFormField, validPassword);\n  await tester.pumpAndSettle();\n\n  await tester.tap(loginButton);\n\n  await tester.pumpAndSettle(\n      Duration(seconds: reasonableAuthenticationTimeInSeconds));\n\n  expect(tester.takeException(), isInstanceOf<HandledException>());\n\n  tester.resetTestTextInput();\n}\n",
            "I/flutter (22131): 💡  Router - generateRoute | name: LoginView arguments: null\nI/flutter (22131): ⚠️  AuthenticationApiService - The user name or password is incorrect. If you have not registered, please use\nthe Register New Account link below.\nI/flutter (22131): ⛔  LogService - identifier: AuthenticationService.getAndStoreAuthToken | exception: The user name or password\nis incorrect. If you have not registered, please use the Register New Account link below. | displayMessage: The user name or      \npassword is incorrect. If you have not registered, please use the Register New Account link below. | alertView: AlertView.Dialog |{email: d.sillyname@smartspaces.app}\nI/flutter (22131): ══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nI/flutter (22131): The following TestFailure object was thrown running a test:\nI/flutter (22131):   Expected: <Instance of 'HandledException'>\nI/flutter (22131):   Actual: <null>\nI/flutter (22131):    Which: is not an instance of 'HandledException'\nI/flutter (22131):\nI/flutter (22131): When the exception was thrown, this was the stack:\nI/flutter (22131): #4      main.<anonymous closure>._signInPageUnrecognizedEmailProvided```\n\n"
        ]
    },
    {
        "titulo": "How to verify a widget is &quot;offscreen&quot;",
        "score": 4,
        "views": 2832,
        "respostas": 3,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "widget-test-flutter"
        ],
        "link": "https://stackoverflow.com/questions/66046397/how-to-verify-a-widget-is-offscreen",
        "conteudo_html": "<p>bounty info: I'll accept your answer if:</p>\n<ul>\n<li>isn't something along the line <code>do this instead</code></li>\n<li>the code sample is mostly unchanged</li>\n<li>produce successful test, not just some quote from docs</li>\n<li>doesn't need any extra package</li>\n</ul>\n<hr />\n<blockquote>\n<p>[edit : 07/02/21]  following Miyoyo#5957 on <a href=\"https://discord.gg/N7Yshp4\" rel=\"nofollow noreferrer\">flutter community on\ndiscord</a> <code>@iapicca Convert widget position to global,  get width height, add both,  and see if the resulting bottom right position is on screen?</code> and using the following answers as reference:</p>\n<ul>\n<li><a href=\"https://stackoverflow.com/a/58788092/9836706\">test widget global position</a></li>\n<li><a href=\"https://stackoverflow.com/a/59043178/9836706\">test widget size</a></li>\n<li><a href=\"https://github.com/flutter/flutter/issues/12994\" rel=\"nofollow noreferrer\">flutter_test dimensions issue</a></li>\n</ul>\n</blockquote>\n<p>given the code sample below (also <a href=\"https://dartpad.dartlang.org/7f6a92d42106ce6ca2be6608b329909b\" rel=\"nofollow noreferrer\">runnable on dartpad</a>)</p>\n<pre class=\"lang-dart prettyprint-override\"><code>import 'package:flutter_test/flutter_test.dart';\nimport 'package:flutter/material.dart';\n\nfinal _testKey = GlobalKey();\nconst _fabKey = ValueKey('fab');\nfinal _onScreen = ValueNotifier&lt;bool&gt;(true);\n\nvoid main() =&gt; runApp(_myApp);\n\nconst _myApp = MaterialApp(\n  home: Scaffold(\n    body: MyStage(),\n    floatingActionButton: MyFAB(),\n  ),\n);\n\nclass MyFAB extends StatelessWidget {\n  const MyFAB() : super(key: const ValueKey('MyFAB'));\n\n  @override\n  Widget build(BuildContext context) =&gt; FloatingActionButton(\n        key: _fabKey,\n        onPressed: () =&gt; _onScreen.value = !_onScreen.value,\n      );\n}\n\nclass MyStage extends StatelessWidget {\n  const MyStage() : super(key: const ValueKey('MyStage'));\n\n  @override\n  Widget build(BuildContext context) =&gt; Stack(\n        children: [\n          ValueListenableBuilder(\n            child: FlutterLogo(\n              key: _testKey,\n            ),\n            valueListenable: _onScreen,\n            builder: (context, isOnStage, child) =&gt; AnimatedPositioned(\n              top: MediaQuery.of(context).size.height *\n                  (_onScreen.value ? .5 : -1),\n              child: child,\n              duration: const Duration(milliseconds: 100),\n            ),\n          ),\n        ],\n      );\n}\n\n</code></pre>\n<p>I want to test is the widget is <code>off screen</code>\nhere's the test code so far</p>\n<pre class=\"lang-dart prettyprint-override\"><code>void main() {\n  testWidgets('...', (tester) async {\n    await tester.pumpWidget(_myApp);\n    final rect = _testKey.currentContext.findRenderObject().paintBounds;\n\n    expect(tester.getSize(find.byKey(_testKey)), rect.size,\n        reason: 'size should match');\n\n    final lowestPointBefore = rect.bottomRight.dy;\n    print('lowest point **BEFORE** $lowestPointBefore ${DateTime.now()}');\n    expect(lowestPointBefore &gt; .0, true, reason: 'should be on-screen');\n\n    await tester.tap(find.byKey(_fabKey));\n    await tester.pump(const Duration(milliseconds: 300));\n    final lowestPointAfter =\n        _testKey.currentContext.findRenderObject().paintBounds.bottomRight.dy;\n\n    print('lowest point **AFTER** $lowestPointAfter ${DateTime.now()}');\n    expect(lowestPointAfter &gt; .0, false, reason: 'should be off-screen');\n  });\n}\n\n\n</code></pre>\n<p>and the logs produced</p>\n<pre class=\"lang-sh prettyprint-override\"><code>00:03 +0: ...                                                                                                                                                                                               \nlowest point **BEFORE** 24.0 2021-02-07 16:28:08.715558\nlowest point **AFTER** 24.0 2021-02-07 16:28:08.850733\n══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nThe following TestFailure object was thrown running a test:\n  Expected: &lt;false&gt;\n  Actual: &lt;true&gt;\n\nWhen the exception was thrown, this was the stack:\n#4      main.&lt;anonymous closure&gt; (file:///home/francesco/projects/issue/test/widget_test.dart:83:5)\n&lt;asynchronous suspension&gt;\n&lt;asynchronous suspension&gt;\n(elided one frame from package:stack_trace)\n...\n\nThis was caught by the test expectation on the following line:\n  file:///home/francesco/projects/issue/test/widget_test.dart line 83\nThe test description was:\n  ...\n════════════════════════════════════════════════════════════════════════════════════════════════════\n00:03 +0 -1: ... [E]                                                                                                                                                                                        \n  Test failed. See exception logs above.\n  The test description was: ...\n  \n00:03 +0 -1: Some tests failed.                                            \n</code></pre>\n<p>I'm not sure if my approach is correct\nand the time in the print suggest me that</p>\n<pre><code>lowest point **BEFORE** 24.0 2021-02-07 16:28:08.715558\nlowest point **AFTER** 24.0 2021-02-07 16:28:08.850733\n</code></pre>\n<p>suggest me that\n<code>await tester.pumpAndSettle(Duration(milliseconds: 300));</code>\ndoesn't do what I think it does</p>\n",
        "codigo": [
            "do this instead",
            "@iapicca Convert widget position to global,  get width height, add both,  and see if the resulting bottom right position is on screen?",
            "import 'package:flutter_test/flutter_test.dart';\nimport 'package:flutter/material.dart';\n\nfinal _testKey = GlobalKey();\nconst _fabKey = ValueKey('fab');\nfinal _onScreen = ValueNotifier<bool>(true);\n\nvoid main() => runApp(_myApp);\n\nconst _myApp = MaterialApp(\n  home: Scaffold(\n    body: MyStage(),\n    floatingActionButton: MyFAB(),\n  ),\n);\n\nclass MyFAB extends StatelessWidget {\n  const MyFAB() : super(key: const ValueKey('MyFAB'));\n\n  @override\n  Widget build(BuildContext context) => FloatingActionButton(\n        key: _fabKey,\n        onPressed: () => _onScreen.value = !_onScreen.value,\n      );\n}\n\nclass MyStage extends StatelessWidget {\n  const MyStage() : super(key: const ValueKey('MyStage'));\n\n  @override\n  Widget build(BuildContext context) => Stack(\n        children: [\n          ValueListenableBuilder(\n            child: FlutterLogo(\n              key: _testKey,\n            ),\n            valueListenable: _onScreen,\n            builder: (context, isOnStage, child) => AnimatedPositioned(\n              top: MediaQuery.of(context).size.height *\n                  (_onScreen.value ? .5 : -1),\n              child: child,\n              duration: const Duration(milliseconds: 100),\n            ),\n          ),\n        ],\n      );\n}\n\n",
            "off screen",
            "void main() {\n  testWidgets('...', (tester) async {\n    await tester.pumpWidget(_myApp);\n    final rect = _testKey.currentContext.findRenderObject().paintBounds;\n\n    expect(tester.getSize(find.byKey(_testKey)), rect.size,\n        reason: 'size should match');\n\n    final lowestPointBefore = rect.bottomRight.dy;\n    print('lowest point **BEFORE** $lowestPointBefore ${DateTime.now()}');\n    expect(lowestPointBefore > .0, true, reason: 'should be on-screen');\n\n    await tester.tap(find.byKey(_fabKey));\n    await tester.pump(const Duration(milliseconds: 300));\n    final lowestPointAfter =\n        _testKey.currentContext.findRenderObject().paintBounds.bottomRight.dy;\n\n    print('lowest point **AFTER** $lowestPointAfter ${DateTime.now()}');\n    expect(lowestPointAfter > .0, false, reason: 'should be off-screen');\n  });\n}\n\n\n",
            "00:03 +0: ...                                                                                                                                                                                               \nlowest point **BEFORE** 24.0 2021-02-07 16:28:08.715558\nlowest point **AFTER** 24.0 2021-02-07 16:28:08.850733\n══╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nThe following TestFailure object was thrown running a test:\n  Expected: <false>\n  Actual: <true>\n\nWhen the exception was thrown, this was the stack:\n#4      main.<anonymous closure> (file:///home/francesco/projects/issue/test/widget_test.dart:83:5)\n<asynchronous suspension>\n<asynchronous suspension>\n(elided one frame from package:stack_trace)\n...\n\nThis was caught by the test expectation on the following line:\n  file:///home/francesco/projects/issue/test/widget_test.dart line 83\nThe test description was:\n  ...\n════════════════════════════════════════════════════════════════════════════════════════════════════\n00:03 +0 -1: ... [E]                                                                                                                                                                                        \n  Test failed. See exception logs above.\n  The test description was: ...\n  \n00:03 +0 -1: Some tests failed.                                            \n",
            "lowest point **BEFORE** 24.0 2021-02-07 16:28:08.715558\nlowest point **AFTER** 24.0 2021-02-07 16:28:08.850733\n",
            "await tester.pumpAndSettle(Duration(milliseconds: 300));"
        ]
    },
    {
        "titulo": "Testing side effects in an async function that throw exception in Dart",
        "score": 0,
        "views": 295,
        "respostas": 1,
        "tags": [
            "unit-testing",
            "dart",
            "asynchronous",
            "testing",
            "async-await"
        ],
        "link": "https://stackoverflow.com/questions/65610922/testing-side-effects-in-an-async-function-that-throw-exception-in-dart",
        "conteudo_html": "<p>I want to test an async function for its exception behavior and side effects.</p>\n<pre><code>abstract class Async {\n  int count();\n\n  Future&lt;void&gt; throwExceptionAfter(int sec);\n}\n\nclass ImplAsync extends Async {\n  int _count = 0;\n  @override\n  int count() =&gt; _count;\n\n  @override\n  Future&lt;void&gt; throwExceptionAfter(int sec) async {\n    await Future.delayed(Duration(seconds: sec));\n\n    _count++;\n\n    throw Exception();\n  }\n}\n</code></pre>\n<p>The test:</p>\n<pre><code>void main() {\n  Async impl;\n  setUp(() {\n    impl = ImplAsync();\n  });\n  group('throwExeptionAfter', () {\n    test('simple call with waiting', () async {\n      expect(impl.throwExceptionAfter(0), throwsException);\n\n      await Future.delayed(Duration(seconds: 1));\n\n      var count = impl.count();\n      expect(count, 1);\n    });\n    test('simple call', () async {\n      expect(impl.throwExceptionAfter(1), throwsException);\n\n      var count = impl.count();\n      expect(count, 1);\n    });\n  });\n}\n</code></pre>\n<p>The first test 'simple call with waiting' works, but in this test i wait a certain time to make sure that the method is completed. the second test does not work because first the test of the count is checked before the method is completed.</p>\n<p>Is there a way to wait for the expect like that:</p>\n<pre><code>test('simple call', () async {\n  await expect(impl.throwExceptionAfter(1), throwsException);\n\n  var count = impl.count();\n  expect(count, 1);\n});\n</code></pre>\n<p>I have already tried several possibilities but could not find a solution so far. The documentation has not helped me either. <a href=\"https://pub.dev/packages/test#asynchronous-tests\" rel=\"nofollow noreferrer\">Asynchronous Tests</a></p>\n<p>My tests can be found here: <a href=\"https://github.com/GruppeGAM/dart_test_tester\" rel=\"nofollow noreferrer\">Github</a></p>\n<p>Thanks for your help.</p>\n",
        "codigo": [
            "abstract class Async {\n  int count();\n\n  Future<void> throwExceptionAfter(int sec);\n}\n\nclass ImplAsync extends Async {\n  int _count = 0;\n  @override\n  int count() => _count;\n\n  @override\n  Future<void> throwExceptionAfter(int sec) async {\n    await Future.delayed(Duration(seconds: sec));\n\n    _count++;\n\n    throw Exception();\n  }\n}\n",
            "void main() {\n  Async impl;\n  setUp(() {\n    impl = ImplAsync();\n  });\n  group('throwExeptionAfter', () {\n    test('simple call with waiting', () async {\n      expect(impl.throwExceptionAfter(0), throwsException);\n\n      await Future.delayed(Duration(seconds: 1));\n\n      var count = impl.count();\n      expect(count, 1);\n    });\n    test('simple call', () async {\n      expect(impl.throwExceptionAfter(1), throwsException);\n\n      var count = impl.count();\n      expect(count, 1);\n    });\n  });\n}\n",
            "test('simple call', () async {\n  await expect(impl.throwExceptionAfter(1), throwsException);\n\n  var count = impl.count();\n  expect(count, 1);\n});\n"
        ]
    },
    {
        "titulo": "How to set up tests for a Dart HTTP server",
        "score": 0,
        "views": 487,
        "respostas": 1,
        "tags": [
            "dart",
            "testing",
            "server"
        ],
        "link": "https://stackoverflow.com/questions/65518034/how-to-set-up-tests-for-a-dart-http-server",
        "conteudo_html": "<p>I'm trying to build a Dart HTTP server and I want to test the API. I'm not able to set up the tests, though.</p>\n<p>Here is what I have so far in <code>my_server_test.dart</code>:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>import 'dart:io';\n\nimport 'package:my_server/my_server.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  HttpServer server;\n  setUp(() async {\n    final server = await createServer();\n    await handleRequests(server);\n  });\n\n  tearDown(() async {\n    await server.close(force: true);\n    server = null;\n  });\n\n  test('First try', () async {\n    \n    final client = HttpClient();\n    final request = await client.get(InternetAddress.loopbackIPv4.host, 4040, '/');\n    final response = await request.close();\n    print(response);\n    \n  });\n}\n</code></pre>\n<p>And here is the server code in <code>my_server.dart</code>:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>import 'dart:io';\n\nimport 'package:hundetgel_server/routes/handle_get.dart';\n\nFuture&lt;HttpServer&gt; createServer() async {\n  final address = InternetAddress.loopbackIPv4;\n  const port = 4040;\n  return await HttpServer.bind(address, port);\n}\n\nFuture&lt;void&gt; handleRequests(HttpServer server) async {\n  await for (HttpRequest request in server) {\n    switch (request.method) {\n      case 'GET':\n        handleGet(request);\n        break;\n      default:\n        handleDefault(request);\n    }\n  }\n}\n\nvoid handleGet(HttpRequest request) {\n  request.response\n    ..write('Hello')\n    ..close();\n}\n\nvoid handleDefault(HttpRequest request) {\n  request.response\n    ..statusCode = HttpStatus.methodNotAllowed\n    ..write('Unsupported request: ${request.method}.')\n    ..close();\n}\n</code></pre>\n<p>When I run the test I just get a timeout:</p>\n<pre><code>TimeoutException after 0:00:30.000000: Test timed out after 30 seconds. See https://pub.dev/packages/test#timeouts\ndart:isolate  _RawReceivePortImpl._handleMessage\nNoSuchMethodError: The method 'close' was called on null.\nReceiver: null\nTried calling: close(force: true)\ndart:core                              Object.noSuchMethod\n2\nmain.&lt;fn&gt;\ntest/my_server_test.dart:15\n===== asynchronous gap ===========================\ndart:async                             _completeOnAsyncError\ntest/my_server_test.dart        main.&lt;fn&gt;\ntest/my_server_test.dart:1\nmain.&lt;fn&gt;\ntest/my_server_test.dart:14\n2\n\n✖ First try\nExited (1)\n</code></pre>\n<p>How do I set up the server so I can start testing it?</p>\n",
        "codigo": [
            "my_server_test.dart",
            "import 'dart:io';\n\nimport 'package:my_server/my_server.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  HttpServer server;\n  setUp(() async {\n    final server = await createServer();\n    await handleRequests(server);\n  });\n\n  tearDown(() async {\n    await server.close(force: true);\n    server = null;\n  });\n\n  test('First try', () async {\n    \n    final client = HttpClient();\n    final request = await client.get(InternetAddress.loopbackIPv4.host, 4040, '/');\n    final response = await request.close();\n    print(response);\n    \n  });\n}\n",
            "my_server.dart",
            "import 'dart:io';\n\nimport 'package:hundetgel_server/routes/handle_get.dart';\n\nFuture<HttpServer> createServer() async {\n  final address = InternetAddress.loopbackIPv4;\n  const port = 4040;\n  return await HttpServer.bind(address, port);\n}\n\nFuture<void> handleRequests(HttpServer server) async {\n  await for (HttpRequest request in server) {\n    switch (request.method) {\n      case 'GET':\n        handleGet(request);\n        break;\n      default:\n        handleDefault(request);\n    }\n  }\n}\n\nvoid handleGet(HttpRequest request) {\n  request.response\n    ..write('Hello')\n    ..close();\n}\n\nvoid handleDefault(HttpRequest request) {\n  request.response\n    ..statusCode = HttpStatus.methodNotAllowed\n    ..write('Unsupported request: ${request.method}.')\n    ..close();\n}\n",
            "TimeoutException after 0:00:30.000000: Test timed out after 30 seconds. See https://pub.dev/packages/test#timeouts\ndart:isolate  _RawReceivePortImpl._handleMessage\nNoSuchMethodError: The method 'close' was called on null.\nReceiver: null\nTried calling: close(force: true)\ndart:core                              Object.noSuchMethod\n2\nmain.<fn>\ntest/my_server_test.dart:15\n===== asynchronous gap ===========================\ndart:async                             _completeOnAsyncError\ntest/my_server_test.dart        main.<fn>\ntest/my_server_test.dart:1\nmain.<fn>\ntest/my_server_test.dart:14\n2\n\n✖ First try\nExited (1)\n"
        ]
    },
    {
        "titulo": "Widget test case is passing but i am getting error",
        "score": 1,
        "views": 951,
        "respostas": 0,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "widget-test-flutter"
        ],
        "link": "https://stackoverflow.com/questions/65435120/widget-test-case-is-passing-but-i-am-getting-error",
        "conteudo_html": "<p>I am getting error while testing my login file.\nThese test case are passing and i am getting green tick while testing it but getting this error message</p>\n<pre><code>void main() {\n  testWidgets('login page test', (WidgetTester tester) async {\n    await tester.pumpWidget(MaterialApp(home: Login()));\n    var usernameField = find.byKey(Key('username-field'));\n    var passwordField = find.byKey(Key('password-field'));\n    var loginButton = find.text('Login');\n    expect(usernameField, findsOneWidget);\n    expect(passwordField, findsOneWidget);\n    expect(loginButton, findsOneWidget);\n  });\n}\n</code></pre>\n<p>I am getting this error:</p>\n<blockquote>\n<p>flutter test ./test/login_test.dart</p>\n</blockquote>\n<pre><code>00:03 +0: login page test                                                                                                                                    Shell: [ERROR:flutter/shell/testing/tester_main.cc(302)] Unhandled exception\nShell: Exception: Stack Overflow\nShell: Stack trace: #0      _CustomZone.runUnaryGuarded (dart:async/zone.dart:1003:3)\nShell: #1      _BufferingStreamSubscription._sendData (dart:async/stream_impl.dart:357:11)       \nShell: #2      _BufferingStreamSubscription._add (dart:async/stream_impl.dart:285:7)\nShell: #3      _SyncStreamControllerDispatch._sendData (dart:async/stream_controller.dart:808:19)\nShell: #4      _StreamController._add (dart:async/stream_controller.dart:682:7)\nShell: #5      _StreamController.add (dart:async/stream_controller.dart:624:5)\nShell: #6      _rootRunUnary (dart:async/zone.dart:1206:13)\nShell: #7      _CustomZone.runUnary (dart:async/zone.dart:1100:19)\nShell: #8      _CustomZone.runUnaryGuarded (dart:async/zone.dart:1005:7)\nShell: #9      _BufferingStreamSubscription._sendData (dart:async/stream_impl.dart:357:11)       \nShell: #10     _BufferingStreamSubscription._add (dart:async/stream_impl.dart:285:7)\nShell: #11     _SyncStreamControllerDispatch._sendData (dart:async/stream_controller.dart:808:19)\nShell: #12     _StreamController._add (dart:async/stream_controller.dart:682:7)\nShell: #13     _StreamController.add (dart:async/stream_controller.dart:624:5)\nShell: #14     _StreamSinkWrapper.add (dart:async/stream_controller.dart:900:13)\nShell: #15     _GuaranteeSink.add (package:stream_channel/src/guarantee_channel.dart:125:12)\nShell: #16     _MultiChannel.virtualChannel.&lt;anonymous closure&gt; \n00:04 +0 -1: loading H:\\erpnext-flutter-app\\erpapp\\./test/login_test.dart [E]\nShell subprocess cleanly reported an error after tests finished. Check the logs above for an error message.\n  Test: H:\\erpnext-flutter-app\\erpapp\\./test/login_test.dart\n  Shell: C:\\Users\\Acer\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_tester.exe\n  dart:async/stream_controller.dart 634:44                       _StreamController.addError\n  dart:async/stream_controller.dart 904:13                       _StreamSinkWrapper.addError\n  package:stream_channel/src/guarantee_channel.dart 145:14       _GuaranteeSink._addError\n  package:stream_channel/src/guarantee_channel.dart 136:5        _GuaranteeSink.addError\n  package:flutter_tools/src/test/flutter_platform.dart 480:29    FlutterPlatform._startTest.&lt;fn&gt;\n  ===== asynchronous gap ===========================\n  dart:async/zone.dart 1121:19                                   _CustomZone.registerUnaryCallback\n  dart:async-patch/async_patch.dart 83:23                        _asyncThenWrapperHelper\n  package:flutter_tools/src/test/flutter_platform.dart           FlutterPlatform._startTest.&lt;fn&gt;\n  package:flutter_tools/src/test/flutter_platform.dart 658:26    FlutterPlatform._startTest\n00:04 +0 -1: login page test - did not complete [E]\n00:04 +0 -1: Some tests failed.\n</code></pre>\n",
        "codigo": [
            "void main() {\n  testWidgets('login page test', (WidgetTester tester) async {\n    await tester.pumpWidget(MaterialApp(home: Login()));\n    var usernameField = find.byKey(Key('username-field'));\n    var passwordField = find.byKey(Key('password-field'));\n    var loginButton = find.text('Login');\n    expect(usernameField, findsOneWidget);\n    expect(passwordField, findsOneWidget);\n    expect(loginButton, findsOneWidget);\n  });\n}\n",
            "00:03 +0: login page test                                                                                                                                    Shell: [ERROR:flutter/shell/testing/tester_main.cc(302)] Unhandled exception\nShell: Exception: Stack Overflow\nShell: Stack trace: #0      _CustomZone.runUnaryGuarded (dart:async/zone.dart:1003:3)\nShell: #1      _BufferingStreamSubscription._sendData (dart:async/stream_impl.dart:357:11)       \nShell: #2      _BufferingStreamSubscription._add (dart:async/stream_impl.dart:285:7)\nShell: #3      _SyncStreamControllerDispatch._sendData (dart:async/stream_controller.dart:808:19)\nShell: #4      _StreamController._add (dart:async/stream_controller.dart:682:7)\nShell: #5      _StreamController.add (dart:async/stream_controller.dart:624:5)\nShell: #6      _rootRunUnary (dart:async/zone.dart:1206:13)\nShell: #7      _CustomZone.runUnary (dart:async/zone.dart:1100:19)\nShell: #8      _CustomZone.runUnaryGuarded (dart:async/zone.dart:1005:7)\nShell: #9      _BufferingStreamSubscription._sendData (dart:async/stream_impl.dart:357:11)       \nShell: #10     _BufferingStreamSubscription._add (dart:async/stream_impl.dart:285:7)\nShell: #11     _SyncStreamControllerDispatch._sendData (dart:async/stream_controller.dart:808:19)\nShell: #12     _StreamController._add (dart:async/stream_controller.dart:682:7)\nShell: #13     _StreamController.add (dart:async/stream_controller.dart:624:5)\nShell: #14     _StreamSinkWrapper.add (dart:async/stream_controller.dart:900:13)\nShell: #15     _GuaranteeSink.add (package:stream_channel/src/guarantee_channel.dart:125:12)\nShell: #16     _MultiChannel.virtualChannel.<anonymous closure> \n00:04 +0 -1: loading H:\\erpnext-flutter-app\\erpapp\\./test/login_test.dart [E]\nShell subprocess cleanly reported an error after tests finished. Check the logs above for an error message.\n  Test: H:\\erpnext-flutter-app\\erpapp\\./test/login_test.dart\n  Shell: C:\\Users\\Acer\\flutter\\bin\\cache\\artifacts\\engine\\windows-x64\\flutter_tester.exe\n  dart:async/stream_controller.dart 634:44                       _StreamController.addError\n  dart:async/stream_controller.dart 904:13                       _StreamSinkWrapper.addError\n  package:stream_channel/src/guarantee_channel.dart 145:14       _GuaranteeSink._addError\n  package:stream_channel/src/guarantee_channel.dart 136:5        _GuaranteeSink.addError\n  package:flutter_tools/src/test/flutter_platform.dart 480:29    FlutterPlatform._startTest.<fn>\n  ===== asynchronous gap ===========================\n  dart:async/zone.dart 1121:19                                   _CustomZone.registerUnaryCallback\n  dart:async-patch/async_patch.dart 83:23                        _asyncThenWrapperHelper\n  package:flutter_tools/src/test/flutter_platform.dart           FlutterPlatform._startTest.<fn>\n  package:flutter_tools/src/test/flutter_platform.dart 658:26    FlutterPlatform._startTest\n00:04 +0 -1: login page test - did not complete [E]\n00:04 +0 -1: Some tests failed.\n"
        ]
    },
    {
        "titulo": "Flutter Bloc Testing not catching thenThrow WebException",
        "score": 1,
        "views": 917,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "bloc",
            "webexception"
        ],
        "link": "https://stackoverflow.com/questions/65391079/flutter-bloc-testing-not-catching-thenthrow-webexception",
        "conteudo_html": "<p>I'm trying to test the BLoCs in my Flutter App but I hit a wall with this problem below.</p>\n<pre><code>===== asynchronous gap ===========================\ndart:async                                                 _AsyncAwaitCompleter.completeError\npackage:bloc_test/src/bloc_test.dart                       runBlocTest.&lt;fn&gt;\ndart:async                                                 runZoned\npackage:bloc_test/src/bloc_test.dart 157:9                 runBlocTest\npackage:bloc_test/src/bloc_test.dart 127:11                blocTest.&lt;fn&gt;\n\nExpected: [\n            ChangePasswordLoading:ChangePasswordLoading,\n            ChangePasswordFailure:ChangePasswordFailure\n          ]\n  Actual: [\n            ChangePasswordLoading:ChangePasswordLoading,\n            ChangePasswordSuccess:ChangePasswordSuccess\n          ]\n   Which: at location [1] is ChangePasswordSuccess:&lt;ChangePasswordSuccess&gt; instead of ChangePasswordFailure:&lt;ChangePasswordFailure&gt;\n\npackage:test_api                             expect\npackage:bloc_test/src/bloc_test.dart 176:9   runBlocTest.&lt;fn&gt;\n===== asynchronous gap ===========================\ndart:async                                   _asyncThenWrapperHelper\npackage:bloc_test/src/bloc_test.dart         runBlocTest.&lt;fn&gt;\ndart:async                                   runZoned\npackage:bloc_test/src/bloc_test.dart 157:9   runBlocTest\npackage:bloc_test/src/bloc_test.dart 127:11  blocTest.&lt;fn&gt;\n</code></pre>\n<p>which is caused by this Failing BLoC test</p>\n<pre><code>blocTest&lt;ChangePasswordBloc, ChangePasswordState&gt;(\n      'emits [ChangePasswordLoading, ChangePasswordFailure] on failed ChangePassword',\n      build: () {\n        when(authenticationRepository.changePassword(\n          'token',\n          'oldPassword',\n          'newPassword',\n          'newPasswordConfirm',\n        )).thenThrow(WebException(403));\n        return changePasswordBloc;\n      },\n      act: (bloc) =&gt; bloc\n        ..add(ChangePassword(\n          oldPassword: 'oldPassword',\n          newPassword: 'newPassword',\n          newPasswordConfirm: 'newPasswordConfirm',\n        )),\n      expect: [\n        ChangePasswordLoading(),\n        ChangePasswordFailure(error: 'Old password is not correct'),\n      ],\n      errors: [isA&lt;WebException&gt;()],\n    );\n</code></pre>\n<p>This is the code I have used to test my ChangePasswordBloc (Notice all the other tests are passing successfully)</p>\n<pre><code>import 'package:bloc_test/bloc_test.dart';\nimport 'package:flutter_app/business_logic/blocs/change_password/change_password_bloc.dart';\nimport 'package:flutter_app/business_logic/blocs/change_password/change_password_event.dart';\nimport 'package:flutter_app/business_logic/blocs/change_password/change_password_state.dart';\nimport 'package:flutter_app/data/exceptions/web_exception.dart';\nimport 'package:flutter_app/data/repositories/authentication_repository.dart';\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\n\nclass MockAuthenticationRepository extends Mock\n    implements AuthenticationRepository {}\n\nclass MockSecureStorage extends Mock implements FlutterSecureStorage {}\n\nmain() {\n  ChangePasswordBloc changePasswordBloc;\n  MockSecureStorage secureStorage;\n  MockAuthenticationRepository authenticationRepository;\n\n  setUp(() {\n    secureStorage = MockSecureStorage();\n    authenticationRepository = MockAuthenticationRepository();\n    changePasswordBloc = ChangePasswordBloc(\n      authenticationRepository,\n      secureStorage,\n    );\n  });\n\n  tearDown(() {\n    changePasswordBloc?.close();\n  });\n\n  test(\n    'initial state is ChangePasswordInitial',\n    () =&gt; expect(changePasswordBloc.state, ChangePasswordInitial()),\n  );\n\n  group('ChangePassword process', () {\n    blocTest&lt;ChangePasswordBloc, ChangePasswordState&gt;(\n      'emits [ChangePasswordLoading, ChangePasswordSuccess] on successful ChangePassword',\n      build: () {\n        when(authenticationRepository.changePassword(\n          'token',\n          'oldPassword',\n          'newPassword',\n          'newPasswordConfirm',\n        )).thenAnswer((_) async =&gt; null);\n        return changePasswordBloc;\n      },\n      act: (bloc) =&gt; bloc\n        ..add(ChangePassword(\n          oldPassword: 'oldPassword',\n          newPassword: 'newPassword',\n          newPasswordConfirm: 'newPasswordConfirm',\n        )),\n      expect: [\n        ChangePasswordLoading(),\n        ChangePasswordSuccess(),\n      ],\n    );\n\n    blocTest&lt;ChangePasswordBloc, ChangePasswordState&gt;(\n      'emits [ChangePasswordLoading, ChangePasswordFailure] on failed ChangePassword',\n      build: () {\n        when(authenticationRepository.changePassword(\n          'token',\n          'oldPassword',\n          'newPassword',\n          'newPasswordConfirm',\n        )).thenThrow(WebException(403));\n        return changePasswordBloc;\n      },\n      act: (bloc) =&gt; bloc\n        ..add(ChangePassword(\n          oldPassword: 'oldPassword',\n          newPassword: 'newPassword',\n          newPasswordConfirm: 'newPasswordConfirm',\n        )),\n      expect: [\n        ChangePasswordLoading(),\n        ChangePasswordFailure(error: 'Old password is not correct'),\n      ],\n      errors: [isA&lt;WebException&gt;()],\n    );\n  });\n}\n</code></pre>\n<p>This is my ChangePasswordBloc code</p>\n<p><strong>ChangePasswordBloc</strong></p>\n<pre><code>import 'dart:async';\nimport 'package:flutter_app/data/exceptions/web_exception.dart';\nimport 'package:flutter_app/data/repositories/authentication_repository.dart';\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\nimport 'package:bloc/bloc.dart';\nimport 'change_password_event.dart';\nimport 'change_password_state.dart';\n\nclass ChangePasswordBloc\n    extends Bloc&lt;ChangePasswordEvent, ChangePasswordState&gt; {\n  final AuthenticationRepository _authenticationRepository;\n  final FlutterSecureStorage _secureStorage;\n\n  ChangePasswordBloc(AuthenticationRepository authenticationRepository,\n      FlutterSecureStorage secureStorage)\n      : _authenticationRepository = authenticationRepository,\n        _secureStorage = secureStorage,\n        super(ChangePasswordInitial());\n\n  @override\n  Stream&lt;ChangePasswordState&gt; mapEventToState(\n    ChangePasswordEvent event,\n  ) async* {\n    if (event is ChangePassword) {\n      yield* _mapChangePasswordToState(event);\n    }\n  }\n\n  Stream&lt;ChangePasswordState&gt; _mapChangePasswordToState(\n      ChangePassword event) async* {\n    yield ChangePasswordLoading();\n    try {\n      final accessToken = await _secureStorage.read(key: 'accessToken');\n\n      await _authenticationRepository.changePassword(\n        accessToken,\n        event.oldPassword,\n        event.newPassword,\n        event.newPasswordConfirm,\n      );\n      yield ChangePasswordSuccess();\n    } on WebException catch (e) {\n      String errorMessage;\n      if (e.statusCode == 422) {\n        errorMessage = 'Password must be 8 characters long';\n      } else if (e.statusCode == 419) {\n        errorMessage = 'New Password is not matching';\n      } else if (e.statusCode == 403) {\n        errorMessage = 'Old password is not correct';\n      }\n      yield ChangePasswordFailure(error: errorMessage ?? e.toString());\n    } catch (err) {\n      yield ChangePasswordFailure(\n          error: err.toString() ?? 'An unknown error occurred');\n    }\n  }\n}\n</code></pre>\n<p>As you can tell, if a WebException is thrown, I yield ChangePasswordFailure() with an error message. This does work on the actual app, so I am certain that logic works, yet the test does not seem to catch that thrown WebException.</p>\n<p><strong>ChangePasswordEvent</strong></p>\n<pre><code>import 'package:equatable/equatable.dart';\nimport 'package:meta/meta.dart';\n\nabstract class ChangePasswordEvent extends Equatable {\n  @override\n  List&lt;Object&gt; get props =&gt; [];\n}\n\nclass ChangePassword extends ChangePasswordEvent {\n  final String oldPassword;\n  final String newPassword;\n  final String newPasswordConfirm;\n\n  ChangePassword({\n    @required this.oldPassword,\n    @required this.newPassword,\n    @required this.newPasswordConfirm,\n  });\n\n  @override\n  List&lt;Object&gt; get props =&gt; [oldPassword, newPassword, newPasswordConfirm];\n}\n</code></pre>\n<p><strong>ChangePasswordState</strong></p>\n<pre><code>import 'package:meta/meta.dart';\nimport 'package:equatable/equatable.dart';\n\nabstract class ChangePasswordState extends Equatable {\n  @override\n  List&lt;Object&gt; get props =&gt; [];\n}\n\nclass ChangePasswordInitial extends ChangePasswordState {}\n\nclass ChangePasswordLoading extends ChangePasswordState {}\n\nclass ChangePasswordSuccess extends ChangePasswordState {}\n\nclass ChangePasswordFailure extends ChangePasswordState {\n  final String error;\n\n  ChangePasswordFailure({@required this.error});\n\n  @override\n  List&lt;Object&gt; get props =&gt; [error];\n}\n</code></pre>\n<p>Any suggestions or advice as to why .thenThrow(WebException(403)) is not actually being caught when it actually works on the real Flutter App (if a WebException is thrown, ChangePasswordFailure is always thrown)?</p>\n<p>I have another example with the <em>same</em> code which does work (The code for ClientInfoBloc is handles WebExceptions in the same way as ChangePasswordBloc and it also works in the real Flutter app)</p>\n<p><a href=\"https://i.sstatic.net/CztnY.png\" rel=\"nofollow noreferrer\">Working Test Example with thrown WebException</a></p>\n<p>I checked this related <a href=\"https://github.com/felangel/bloc/issues/1145\" rel=\"nofollow noreferrer\">issue</a> but it did not fix anything.</p>\n",
        "codigo": [
            "===== asynchronous gap ===========================\ndart:async                                                 _AsyncAwaitCompleter.completeError\npackage:bloc_test/src/bloc_test.dart                       runBlocTest.<fn>\ndart:async                                                 runZoned\npackage:bloc_test/src/bloc_test.dart 157:9                 runBlocTest\npackage:bloc_test/src/bloc_test.dart 127:11                blocTest.<fn>\n\nExpected: [\n            ChangePasswordLoading:ChangePasswordLoading,\n            ChangePasswordFailure:ChangePasswordFailure\n          ]\n  Actual: [\n            ChangePasswordLoading:ChangePasswordLoading,\n            ChangePasswordSuccess:ChangePasswordSuccess\n          ]\n   Which: at location [1] is ChangePasswordSuccess:<ChangePasswordSuccess> instead of ChangePasswordFailure:<ChangePasswordFailure>\n\npackage:test_api                             expect\npackage:bloc_test/src/bloc_test.dart 176:9   runBlocTest.<fn>\n===== asynchronous gap ===========================\ndart:async                                   _asyncThenWrapperHelper\npackage:bloc_test/src/bloc_test.dart         runBlocTest.<fn>\ndart:async                                   runZoned\npackage:bloc_test/src/bloc_test.dart 157:9   runBlocTest\npackage:bloc_test/src/bloc_test.dart 127:11  blocTest.<fn>\n",
            "blocTest<ChangePasswordBloc, ChangePasswordState>(\n      'emits [ChangePasswordLoading, ChangePasswordFailure] on failed ChangePassword',\n      build: () {\n        when(authenticationRepository.changePassword(\n          'token',\n          'oldPassword',\n          'newPassword',\n          'newPasswordConfirm',\n        )).thenThrow(WebException(403));\n        return changePasswordBloc;\n      },\n      act: (bloc) => bloc\n        ..add(ChangePassword(\n          oldPassword: 'oldPassword',\n          newPassword: 'newPassword',\n          newPasswordConfirm: 'newPasswordConfirm',\n        )),\n      expect: [\n        ChangePasswordLoading(),\n        ChangePasswordFailure(error: 'Old password is not correct'),\n      ],\n      errors: [isA<WebException>()],\n    );\n",
            "import 'package:bloc_test/bloc_test.dart';\nimport 'package:flutter_app/business_logic/blocs/change_password/change_password_bloc.dart';\nimport 'package:flutter_app/business_logic/blocs/change_password/change_password_event.dart';\nimport 'package:flutter_app/business_logic/blocs/change_password/change_password_state.dart';\nimport 'package:flutter_app/data/exceptions/web_exception.dart';\nimport 'package:flutter_app/data/repositories/authentication_repository.dart';\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\n\nclass MockAuthenticationRepository extends Mock\n    implements AuthenticationRepository {}\n\nclass MockSecureStorage extends Mock implements FlutterSecureStorage {}\n\nmain() {\n  ChangePasswordBloc changePasswordBloc;\n  MockSecureStorage secureStorage;\n  MockAuthenticationRepository authenticationRepository;\n\n  setUp(() {\n    secureStorage = MockSecureStorage();\n    authenticationRepository = MockAuthenticationRepository();\n    changePasswordBloc = ChangePasswordBloc(\n      authenticationRepository,\n      secureStorage,\n    );\n  });\n\n  tearDown(() {\n    changePasswordBloc?.close();\n  });\n\n  test(\n    'initial state is ChangePasswordInitial',\n    () => expect(changePasswordBloc.state, ChangePasswordInitial()),\n  );\n\n  group('ChangePassword process', () {\n    blocTest<ChangePasswordBloc, ChangePasswordState>(\n      'emits [ChangePasswordLoading, ChangePasswordSuccess] on successful ChangePassword',\n      build: () {\n        when(authenticationRepository.changePassword(\n          'token',\n          'oldPassword',\n          'newPassword',\n          'newPasswordConfirm',\n        )).thenAnswer((_) async => null);\n        return changePasswordBloc;\n      },\n      act: (bloc) => bloc\n        ..add(ChangePassword(\n          oldPassword: 'oldPassword',\n          newPassword: 'newPassword',\n          newPasswordConfirm: 'newPasswordConfirm',\n        )),\n      expect: [\n        ChangePasswordLoading(),\n        ChangePasswordSuccess(),\n      ],\n    );\n\n    blocTest<ChangePasswordBloc, ChangePasswordState>(\n      'emits [ChangePasswordLoading, ChangePasswordFailure] on failed ChangePassword',\n      build: () {\n        when(authenticationRepository.changePassword(\n          'token',\n          'oldPassword',\n          'newPassword',\n          'newPasswordConfirm',\n        )).thenThrow(WebException(403));\n        return changePasswordBloc;\n      },\n      act: (bloc) => bloc\n        ..add(ChangePassword(\n          oldPassword: 'oldPassword',\n          newPassword: 'newPassword',\n          newPasswordConfirm: 'newPasswordConfirm',\n        )),\n      expect: [\n        ChangePasswordLoading(),\n        ChangePasswordFailure(error: 'Old password is not correct'),\n      ],\n      errors: [isA<WebException>()],\n    );\n  });\n}\n",
            "import 'dart:async';\nimport 'package:flutter_app/data/exceptions/web_exception.dart';\nimport 'package:flutter_app/data/repositories/authentication_repository.dart';\nimport 'package:flutter_secure_storage/flutter_secure_storage.dart';\nimport 'package:bloc/bloc.dart';\nimport 'change_password_event.dart';\nimport 'change_password_state.dart';\n\nclass ChangePasswordBloc\n    extends Bloc<ChangePasswordEvent, ChangePasswordState> {\n  final AuthenticationRepository _authenticationRepository;\n  final FlutterSecureStorage _secureStorage;\n\n  ChangePasswordBloc(AuthenticationRepository authenticationRepository,\n      FlutterSecureStorage secureStorage)\n      : _authenticationRepository = authenticationRepository,\n        _secureStorage = secureStorage,\n        super(ChangePasswordInitial());\n\n  @override\n  Stream<ChangePasswordState> mapEventToState(\n    ChangePasswordEvent event,\n  ) async* {\n    if (event is ChangePassword) {\n      yield* _mapChangePasswordToState(event);\n    }\n  }\n\n  Stream<ChangePasswordState> _mapChangePasswordToState(\n      ChangePassword event) async* {\n    yield ChangePasswordLoading();\n    try {\n      final accessToken = await _secureStorage.read(key: 'accessToken');\n\n      await _authenticationRepository.changePassword(\n        accessToken,\n        event.oldPassword,\n        event.newPassword,\n        event.newPasswordConfirm,\n      );\n      yield ChangePasswordSuccess();\n    } on WebException catch (e) {\n      String errorMessage;\n      if (e.statusCode == 422) {\n        errorMessage = 'Password must be 8 characters long';\n      } else if (e.statusCode == 419) {\n        errorMessage = 'New Password is not matching';\n      } else if (e.statusCode == 403) {\n        errorMessage = 'Old password is not correct';\n      }\n      yield ChangePasswordFailure(error: errorMessage ?? e.toString());\n    } catch (err) {\n      yield ChangePasswordFailure(\n          error: err.toString() ?? 'An unknown error occurred');\n    }\n  }\n}\n",
            "import 'package:equatable/equatable.dart';\nimport 'package:meta/meta.dart';\n\nabstract class ChangePasswordEvent extends Equatable {\n  @override\n  List<Object> get props => [];\n}\n\nclass ChangePassword extends ChangePasswordEvent {\n  final String oldPassword;\n  final String newPassword;\n  final String newPasswordConfirm;\n\n  ChangePassword({\n    @required this.oldPassword,\n    @required this.newPassword,\n    @required this.newPasswordConfirm,\n  });\n\n  @override\n  List<Object> get props => [oldPassword, newPassword, newPasswordConfirm];\n}\n",
            "import 'package:meta/meta.dart';\nimport 'package:equatable/equatable.dart';\n\nabstract class ChangePasswordState extends Equatable {\n  @override\n  List<Object> get props => [];\n}\n\nclass ChangePasswordInitial extends ChangePasswordState {}\n\nclass ChangePasswordLoading extends ChangePasswordState {}\n\nclass ChangePasswordSuccess extends ChangePasswordState {}\n\nclass ChangePasswordFailure extends ChangePasswordState {\n  final String error;\n\n  ChangePasswordFailure({@required this.error});\n\n  @override\n  List<Object> get props => [error];\n}\n"
        ]
    },
    {
        "titulo": "what is the correct approach to test riverpod with mockito",
        "score": 4,
        "views": 3350,
        "respostas": 3,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "mockito",
            "riverpod"
        ],
        "link": "https://stackoverflow.com/questions/65278768/what-is-the-correct-approach-to-test-riverpod-with-mockito",
        "conteudo_html": "<p>what is the correct approach to test riverpod with mockito?</p>\n<p>running the code above,</p>\n<pre class=\"lang-dart prettyprint-override\"><code>\n/// ### edited snippets from production side ###\n/// not important, skip to the TEST below!\n\n/// this seems meaningless just because it is out of context\nmixin FutureDelegate&lt;T&gt; {\n  Future&lt;T&gt; call();\n}\n\n/// delegate implementation\n\nimport '../../shared/delegate/future_delegate.dart';\n\nconst k_STRING_DELEGATE = StringDelegate();\n\nclass StringDelegate implements FutureDelegate&lt;String&gt; {\n  const StringDelegate();\n  @override\n  Future&lt;String&gt; call() async {\n   /// ... returns a string at some point, not important now\n  }\n}\n\n\n\n/// the future provider\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\nimport '&lt;somewhere&gt;/delegate.dart'; /// the code above\n\nfinal stringProvider = FutureProvider&lt;String&gt;((ref) =&gt; k_STRING_DELEGATE());\n\n/// ### edited snippets from TEST side ###\n\n\n/// mocking the delegate\nimport 'package:mockito/mockito.dart';\nimport '&lt;see above&gt;/future_delegate.dart';\n\nclass MockDelegate extends Mock implements FutureDelegate&lt;String&gt; {}\n\n\n/// actual test \nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:hooks_riverpod/all.dart';\nimport 'package:mockito/mockito.dart';\nimport '&lt;somewhere in my project&gt;/provider.dart';\nimport '../../domain/&lt;somewhere&gt;/mock_delegate.dart'; // &lt;= the code above\n\nvoid main() {\n  group('`stringProvider`', () {\n    final _delegate = MockDelegate();\n    test('WHEN `delegate` throws THEN `provider`return exception',\n        () async {\n      when(_delegate.call()).thenAnswer((_) async {\n        await Future.delayed(const Duration(seconds: 1));\n        throw 'ops';\n      });\n\n      final container = ProviderContainer(\n        overrides: [\n          stringProvider\n              .overrideWithProvider(FutureProvider((ref) =&gt; _delegate()))\n        ],\n      );\n      expect(\n        container.read(stringProvider),\n        const AsyncValue&lt;String&gt;.loading(),\n      );\n      await Future&lt;void&gt;.value();\n      expect(container.read(stringProvider).data.value, [isA&lt;Exception&gt;()]);\n    });\n  });\n}\n\n</code></pre>\n<p>running the test returns</p>\n<pre class=\"lang-sh prettyprint-override\"><code>NoSuchMethodError: The getter 'value' was called on null.\n  Receiver: null\n  Tried calling: value\n  dart:core                                Object.noSuchMethod\n  src/logic/path/provider_test.dart 28:48  main.&lt;fn&gt;.&lt;fn&gt;\n</code></pre>\n<p>I'm new to riverpod, clearly I'm missing something\nI tried to follow <a href=\"https://riverpod.dev/docs/cookbooks/testing/\" rel=\"nofollow noreferrer\">this</a></p>\n",
        "codigo": [
            "\n/// ### edited snippets from production side ###\n/// not important, skip to the TEST below!\n\n/// this seems meaningless just because it is out of context\nmixin FutureDelegate<T> {\n  Future<T> call();\n}\n\n/// delegate implementation\n\nimport '../../shared/delegate/future_delegate.dart';\n\nconst k_STRING_DELEGATE = StringDelegate();\n\nclass StringDelegate implements FutureDelegate<String> {\n  const StringDelegate();\n  @override\n  Future<String> call() async {\n   /// ... returns a string at some point, not important now\n  }\n}\n\n\n\n/// the future provider\nimport 'package:hooks_riverpod/hooks_riverpod.dart';\nimport '<somewhere>/delegate.dart'; /// the code above\n\nfinal stringProvider = FutureProvider<String>((ref) => k_STRING_DELEGATE());\n\n/// ### edited snippets from TEST side ###\n\n\n/// mocking the delegate\nimport 'package:mockito/mockito.dart';\nimport '<see above>/future_delegate.dart';\n\nclass MockDelegate extends Mock implements FutureDelegate<String> {}\n\n\n/// actual test \nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:hooks_riverpod/all.dart';\nimport 'package:mockito/mockito.dart';\nimport '<somewhere in my project>/provider.dart';\nimport '../../domain/<somewhere>/mock_delegate.dart'; // <= the code above\n\nvoid main() {\n  group('`stringProvider`', () {\n    final _delegate = MockDelegate();\n    test('WHEN `delegate` throws THEN `provider`return exception',\n        () async {\n      when(_delegate.call()).thenAnswer((_) async {\n        await Future.delayed(const Duration(seconds: 1));\n        throw 'ops';\n      });\n\n      final container = ProviderContainer(\n        overrides: [\n          stringProvider\n              .overrideWithProvider(FutureProvider((ref) => _delegate()))\n        ],\n      );\n      expect(\n        container.read(stringProvider),\n        const AsyncValue<String>.loading(),\n      );\n      await Future<void>.value();\n      expect(container.read(stringProvider).data.value, [isA<Exception>()]);\n    });\n  });\n}\n\n",
            "NoSuchMethodError: The getter 'value' was called on null.\n  Receiver: null\n  Tried calling: value\n  dart:core                                Object.noSuchMethod\n  src/logic/path/provider_test.dart 28:48  main.<fn>.<fn>\n"
        ]
    },
    {
        "titulo": "Flutter pushReplacementNamed does not pass tests",
        "score": 0,
        "views": 477,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "replace",
            "navigator"
        ],
        "link": "https://stackoverflow.com/questions/65174554/flutter-pushreplacementnamed-does-not-pass-tests",
        "conteudo_html": "<p>I have two screens (log in and sign up) which have buttons linking to each other respectively. For the log in page a button triggers <code>pushReplacementNamed</code> to navigate to the sign up page. Similarly in the sign up page a different button triggers <code>pushReplacementNamed</code> to navigate to the log in page.</p>\n<p>login_screen.dart:</p>\n<pre><code>SecondaryButton(\n  onPressed: () {\n    Navigator.pushReplacementNamed(context, SignupScreen.id);\n  },\n  key: LoginScreen.signupBtnKey,\n  child: Text('Sign Up'),\n),\n</code></pre>\n<p>signup_screen.dart:</p>\n<pre><code>SecondaryButton(\n  onPressed: () {\n    Navigator.pushReplacementNamed(context, LoginScreen.id);\n  },\n  key: SignupScreen.loginBtnKey,\n  child: Text('Log In'),\n)\n</code></pre>\n<p>When testing on the emulator both buttons seem to work fine but when trying to run automated tests it doesn't work for the sign up screen.</p>\n<p>login_screen_test.dart</p>\n<pre><code>class MockNavigatorObserver extends Mock implements NavigatorObserver {}\n\nvoid main() {\n\n  group('Login Screen Widget Tests', () {\n\n    NavigatorObserver mockObserver;\n\n    setUp(() {\n      mockObserver = MockNavigatorObserver();\n    });\n\n    Widget createLoginScreen() {\n      return MaterialApp(\n        initialRoute: LoginScreen.id,\n        routes: {\n          LoginScreen.id: (context) =&gt; LoginScreen(),\n          SignupScreen.id: (context) =&gt; SignupScreen(),\n        },\n        navigatorObservers: [mockObserver],\n      );\n    }\n\n    testWidgets(\n      'Testing if sign up button shows up and triggers navigation after tapped',\n      (tester) async {\n        await tester.pumpWidget(createLoginScreen());\n        expect(find.byKey(LoginScreen.signupBtnKey), findsOneWidget);\n        await tester.tap(find.byKey(LoginScreen.signupBtnKey));\n        await tester.pumpAndSettle();\n        verify(\n          mockObserver.didReplace(\n            oldRoute: anyNamed('oldRoute'),\n            newRoute: anyNamed('newRoute'),\n          ),\n        );\n        expect(find.byType(SignupScreen), findsOneWidget);\n        expect(find.byType(LoginScreen), findsNothing);\n      },\n    );\n  });\n}\n</code></pre>\n<p>signup_screen_test.dart</p>\n<pre><code>class MockNavigatorObserver extends Mock implements NavigatorObserver {}\n\nvoid main() {\n\n  group('Signup Screen Widget Tests', () {\n\n    NavigatorObserver mockObserver;\n\n    setUp(() {\n      mockObserver = MockNavigatorObserver();\n    });\n\n    Widget createSignupScreen() {\n      return MaterialApp(\n        initialRoute: SignupScreen.id,\n        routes: {\n          LoginScreen.id: (context) =&gt; LoginScreen(),\n          SignupScreen.id: (context) =&gt; SignupScreen(),\n        },\n        navigatorObservers: [mockObserver],\n      );\n    }\n\n    testWidgets(\n      'Testing if log in button shows up and triggers navigation after tapped',\n      (tester) async {\n        await tester.pumpWidget(createSignupScreen());\n        expect(find.byKey(SignupScreen.loginBtnKey), findsOneWidget);\n        await tester.tap(find.byKey(SignupScreen.loginBtnKey));\n        await tester.pumpAndSettle();\n        verify(\n          mockObserver.didReplace(\n            oldRoute: anyNamed('oldRoute'),\n            newRoute: anyNamed('newRoute'),\n          ),\n        );\n        expect(find.byType(LoginScreen), findsOneWidget);\n        expect(find.byType(SignupScreen), findsNothing);\n      },\n    );\n  });\n}\n</code></pre>\n<p>This fails with the following exception:</p>\n<pre><code>The following TestFailure object was thrown running a test:\n  No matching calls. All calls: MockNavigatorObserver.navigator,\nMockNavigatorObserver._navigator==NavigatorState#03a3a(tickers: tracking 1 ticker),\nMockNavigatorObserver.didPush(MaterialPageRoute&lt;dynamic&gt;(RouteSettings(&quot;/signup&quot;, null), animation:\nAnimationController#9b7dc(⏭ 1.000; paused; for MaterialPageRoute&lt;dynamic&gt;(/signup))), null)\n</code></pre>\n<p>Which suggests that the didReplace() method isn't being triggered. The code is almost identical on each page and so I can't understand why one would pass but the other one fail.</p>\n<p>Would appreciate any insight, might be something obvious!</p>\n",
        "codigo": [
            "pushReplacementNamed",
            "pushReplacementNamed",
            "SecondaryButton(\n  onPressed: () {\n    Navigator.pushReplacementNamed(context, SignupScreen.id);\n  },\n  key: LoginScreen.signupBtnKey,\n  child: Text('Sign Up'),\n),\n",
            "SecondaryButton(\n  onPressed: () {\n    Navigator.pushReplacementNamed(context, LoginScreen.id);\n  },\n  key: SignupScreen.loginBtnKey,\n  child: Text('Log In'),\n)\n",
            "class MockNavigatorObserver extends Mock implements NavigatorObserver {}\n\nvoid main() {\n\n  group('Login Screen Widget Tests', () {\n\n    NavigatorObserver mockObserver;\n\n    setUp(() {\n      mockObserver = MockNavigatorObserver();\n    });\n\n    Widget createLoginScreen() {\n      return MaterialApp(\n        initialRoute: LoginScreen.id,\n        routes: {\n          LoginScreen.id: (context) => LoginScreen(),\n          SignupScreen.id: (context) => SignupScreen(),\n        },\n        navigatorObservers: [mockObserver],\n      );\n    }\n\n    testWidgets(\n      'Testing if sign up button shows up and triggers navigation after tapped',\n      (tester) async {\n        await tester.pumpWidget(createLoginScreen());\n        expect(find.byKey(LoginScreen.signupBtnKey), findsOneWidget);\n        await tester.tap(find.byKey(LoginScreen.signupBtnKey));\n        await tester.pumpAndSettle();\n        verify(\n          mockObserver.didReplace(\n            oldRoute: anyNamed('oldRoute'),\n            newRoute: anyNamed('newRoute'),\n          ),\n        );\n        expect(find.byType(SignupScreen), findsOneWidget);\n        expect(find.byType(LoginScreen), findsNothing);\n      },\n    );\n  });\n}\n",
            "class MockNavigatorObserver extends Mock implements NavigatorObserver {}\n\nvoid main() {\n\n  group('Signup Screen Widget Tests', () {\n\n    NavigatorObserver mockObserver;\n\n    setUp(() {\n      mockObserver = MockNavigatorObserver();\n    });\n\n    Widget createSignupScreen() {\n      return MaterialApp(\n        initialRoute: SignupScreen.id,\n        routes: {\n          LoginScreen.id: (context) => LoginScreen(),\n          SignupScreen.id: (context) => SignupScreen(),\n        },\n        navigatorObservers: [mockObserver],\n      );\n    }\n\n    testWidgets(\n      'Testing if log in button shows up and triggers navigation after tapped',\n      (tester) async {\n        await tester.pumpWidget(createSignupScreen());\n        expect(find.byKey(SignupScreen.loginBtnKey), findsOneWidget);\n        await tester.tap(find.byKey(SignupScreen.loginBtnKey));\n        await tester.pumpAndSettle();\n        verify(\n          mockObserver.didReplace(\n            oldRoute: anyNamed('oldRoute'),\n            newRoute: anyNamed('newRoute'),\n          ),\n        );\n        expect(find.byType(LoginScreen), findsOneWidget);\n        expect(find.byType(SignupScreen), findsNothing);\n      },\n    );\n  });\n}\n",
            "The following TestFailure object was thrown running a test:\n  No matching calls. All calls: MockNavigatorObserver.navigator,\nMockNavigatorObserver._navigator==NavigatorState#03a3a(tickers: tracking 1 ticker),\nMockNavigatorObserver.didPush(MaterialPageRoute<dynamic>(RouteSettings(\"/signup\", null), animation:\nAnimationController#9b7dc(⏭ 1.000; paused; for MaterialPageRoute<dynamic>(/signup))), null)\n"
        ]
    },
    {
        "titulo": "unit test fails with Failed assertion: line 17: &#39;&lt;optimized out&gt;&#39;: is not true",
        "score": 2,
        "views": 873,
        "respostas": 1,
        "tags": [
            "unit-testing",
            "flutter",
            "dart",
            "testing"
        ],
        "link": "https://stackoverflow.com/questions/65141489/unit-test-fails-with-failed-assertion-line-17-optimized-out-is-not-true",
        "conteudo_html": "<p>I'm stuck with a unit test and fairly new to testing.\nI tried to create a test for a class with toMap/fromMap methods and write tests for it.</p>\n<p>Within the class I have the following code, where I added the hashCode and == operator methods to prepare the class for the test.</p>\n<p>I have the exact same setup for other classes, where the test works..</p>\n<pre><code>  String uid;\n  String email;\n  String userName;\n  String diagnose;\n  bool surgery;\n  List&lt;Goal&gt; goals;\n  List&lt;KOS&gt; kos;\n\n  UserCase({\n    this.uid,\n    this.email,\n    this.userName,\n    this.diagnose,\n    this.surgery = false,\n    this.goals,\n    this.kos,\n  });\n\n  factory UserCase.fromData(Map&lt;String, dynamic&gt; data) {\n    if (data == null) {\n      print('UserCase fromData NULL');\n      return null;\n    }\n    final String uid = data['uid'] ?? '';\n    final String email = data['email'] ?? '';\n    final String userName = data['userName'] ?? '';\n    final String diagnose = data['diagnose'] ?? '';\n    final bool surgery = data['surgery'] ?? false;\n    final List&lt;Goal&gt; goals = data['goals'] == null\n        ? []\n        : List.from(data['goals'].map((e) =&gt; Goal.fromData(e)));\n    final List&lt;KOS&gt; kos = data['kos'] == null\n        ? []\n        : List.from(data['kos'].map((e) =&gt; KOS.fromData(e)));\n\n    return UserCase(\n      uid: uid,\n      email: email,\n      userName: userName,\n      diagnose: diagnose,\n      surgery: surgery,\n      goals: goals,\n      kos: kos,\n    );\n  }\n\n  Map&lt;String, dynamic&gt; toMap() {\n    return {\n      'uid': uid,\n      'email': email,\n      'userName': userName,\n      'diagnose': diagnose,\n      'surgery': surgery,\n      'goals': goals == null || goals.isEmpty\n          ? []\n          : goals.map((e) =&gt; e.toMap()).toList(),\n      'kos':\n          kos == null || kos.isEmpty ? [] : kos.map((e) =&gt; e.toMap()).toList(),\n    };\n  }\n\n**UPDATE: adding hashList to ListObjects**\n\n@override\nint get hashCode =&gt; hashValues(\n      uid, email, userName, diagnose, surgery, hashList(goals), hashList(kos));\n\nold:\n  *@override\n  int get hashCode {\n    return hashValues(uid, email, userName, diagnose, surgery, goals, kos);\n  }*\n\n  @override\n  bool operator ==(other) {\n    if (identical(this, other)) return true;\n    if (runtimeType != other.runtimeType) return false;\n    final UserCase otherCase = other;\n    return uid == otherCase.uid &amp;&amp;\n        email == otherCase.email &amp;&amp;\n        userName == otherCase.userName &amp;&amp;\n        diagnose == otherCase.diagnose &amp;&amp;\n        surgery == otherCase.surgery &amp;&amp;\n        goals == otherCase.goals &amp;&amp;\n        kos == otherCase.kos;\n  }\n}\n</code></pre>\n<p>And this is the test that fails:</p>\n<pre><code>      final userCase = UserCase.fromData({\n        'uid': 'id123',\n        'email': 'email123',\n        'userName': 'username',\n        'diagnose': 'ACL',\n        'surgery': true,\n        'goals': [],\n        'kos': [],\n      });\n      expect(\n          userCase,\n          UserCase(\n            uid: 'id123',\n            email: 'email123',\n            userName: 'username',\n            diagnose: 'ACL',\n            surgery: true,\n            goals: [],\n            kos: [],\n          ));\n    });\n\n</code></pre>\n<p>**UPDATED ERROR MESSAGE after hashList has been added **</p>\n<pre><code>test/usercase_test.dart: fromData case with all properties [E]                                                               \n  Expected: UserCase:&lt;uid: id123, email: email123, userName: username, diagnose: ACL, surgery: true, goals: [], kos: []&gt;\n    Actual: UserCase:&lt;uid: id123, email: email123, userName: username, diagnose: ACL, surgery: true, goals: [], kos: []&gt;\n  \n  package:test_api                                   expect\n  package:flutter_test/src/widget_tester.dart 431:3  expect\n  usercase_test.dart 21:7                            main.&lt;fn&gt;.&lt;fn&gt;```\n</code></pre>\n<p>And that is the error message - this one changed now to the one above, after adding the hashList method to the list properties.</p>\n<pre><code>.../test/usercase_test.dart: fromData case with all properties [E]                          \n  'dart:ui/hash_codes.dart': Failed assertion: line 17: '&lt;optimized out&gt;': is not true.\n  dart:ui                                            hashValues\n  ../lib/Classes/UserCase.dart 71:12                 UserCase.hashCode\n  dart:collection                                    _CompactLinkedHashSet.contains\n  package:matcher/src/pretty_print.dart 28:14        prettyPrint._prettyPrint\n  package:matcher/src/pretty_print.dart 119:22       prettyPrint\n  package:matcher/src/description.dart 49:11         StringDescription.addDescriptionOf\n  package:matcher/src/equals_matcher.dart 267:19     _DeepMatcher.describe\n  package:matcher/src/description.dart 47:13         StringDescription.addDescriptionOf\n  package:test_api                                   expect\n  package:flutter_test/src/widget_tester.dart 431:3  expect\n  usercase_test.dart 22:7                            main.&lt;fn&gt;.&lt;fn&gt;´´´\n</code></pre>\n",
        "codigo": [
            "  String uid;\n  String email;\n  String userName;\n  String diagnose;\n  bool surgery;\n  List<Goal> goals;\n  List<KOS> kos;\n\n  UserCase({\n    this.uid,\n    this.email,\n    this.userName,\n    this.diagnose,\n    this.surgery = false,\n    this.goals,\n    this.kos,\n  });\n\n  factory UserCase.fromData(Map<String, dynamic> data) {\n    if (data == null) {\n      print('UserCase fromData NULL');\n      return null;\n    }\n    final String uid = data['uid'] ?? '';\n    final String email = data['email'] ?? '';\n    final String userName = data['userName'] ?? '';\n    final String diagnose = data['diagnose'] ?? '';\n    final bool surgery = data['surgery'] ?? false;\n    final List<Goal> goals = data['goals'] == null\n        ? []\n        : List.from(data['goals'].map((e) => Goal.fromData(e)));\n    final List<KOS> kos = data['kos'] == null\n        ? []\n        : List.from(data['kos'].map((e) => KOS.fromData(e)));\n\n    return UserCase(\n      uid: uid,\n      email: email,\n      userName: userName,\n      diagnose: diagnose,\n      surgery: surgery,\n      goals: goals,\n      kos: kos,\n    );\n  }\n\n  Map<String, dynamic> toMap() {\n    return {\n      'uid': uid,\n      'email': email,\n      'userName': userName,\n      'diagnose': diagnose,\n      'surgery': surgery,\n      'goals': goals == null || goals.isEmpty\n          ? []\n          : goals.map((e) => e.toMap()).toList(),\n      'kos':\n          kos == null || kos.isEmpty ? [] : kos.map((e) => e.toMap()).toList(),\n    };\n  }\n\n**UPDATE: adding hashList to ListObjects**\n\n@override\nint get hashCode => hashValues(\n      uid, email, userName, diagnose, surgery, hashList(goals), hashList(kos));\n\nold:\n  *@override\n  int get hashCode {\n    return hashValues(uid, email, userName, diagnose, surgery, goals, kos);\n  }*\n\n  @override\n  bool operator ==(other) {\n    if (identical(this, other)) return true;\n    if (runtimeType != other.runtimeType) return false;\n    final UserCase otherCase = other;\n    return uid == otherCase.uid &&\n        email == otherCase.email &&\n        userName == otherCase.userName &&\n        diagnose == otherCase.diagnose &&\n        surgery == otherCase.surgery &&\n        goals == otherCase.goals &&\n        kos == otherCase.kos;\n  }\n}\n",
            "      final userCase = UserCase.fromData({\n        'uid': 'id123',\n        'email': 'email123',\n        'userName': 'username',\n        'diagnose': 'ACL',\n        'surgery': true,\n        'goals': [],\n        'kos': [],\n      });\n      expect(\n          userCase,\n          UserCase(\n            uid: 'id123',\n            email: 'email123',\n            userName: 'username',\n            diagnose: 'ACL',\n            surgery: true,\n            goals: [],\n            kos: [],\n          ));\n    });\n\n",
            "test/usercase_test.dart: fromData case with all properties [E]                                                               \n  Expected: UserCase:<uid: id123, email: email123, userName: username, diagnose: ACL, surgery: true, goals: [], kos: []>\n    Actual: UserCase:<uid: id123, email: email123, userName: username, diagnose: ACL, surgery: true, goals: [], kos: []>\n  \n  package:test_api                                   expect\n  package:flutter_test/src/widget_tester.dart 431:3  expect\n  usercase_test.dart 21:7                            main.<fn>.<fn>```\n",
            ".../test/usercase_test.dart: fromData case with all properties [E]                          \n  'dart:ui/hash_codes.dart': Failed assertion: line 17: '<optimized out>': is not true.\n  dart:ui                                            hashValues\n  ../lib/Classes/UserCase.dart 71:12                 UserCase.hashCode\n  dart:collection                                    _CompactLinkedHashSet.contains\n  package:matcher/src/pretty_print.dart 28:14        prettyPrint._prettyPrint\n  package:matcher/src/pretty_print.dart 119:22       prettyPrint\n  package:matcher/src/description.dart 49:11         StringDescription.addDescriptionOf\n  package:matcher/src/equals_matcher.dart 267:19     _DeepMatcher.describe\n  package:matcher/src/description.dart 47:13         StringDescription.addDescriptionOf\n  package:test_api                                   expect\n  package:flutter_test/src/widget_tester.dart 431:3  expect\n  usercase_test.dart 22:7                            main.<fn>.<fn>´´´\n"
        ]
    },
    {
        "titulo": "Flutter Mocktail Error: No matching calls. All calls: method(Instance of Object)",
        "score": 0,
        "views": 5153,
        "respostas": 2,
        "tags": [
            "flutter",
            "dart",
            "unit-testing",
            "testing",
            "mockito"
        ],
        "link": "https://stackoverflow.com/questions/65125484/flutter-mocktail-error-no-matching-calls-all-calls-methodinstance-of-object",
        "conteudo_html": "<p>I am trying to verify if my method is called with the arguments I am interested in. However, it seems to be working only with primitive types. Instead of returning my object, it just says <code>Instance of MyAnswer</code>. Why does this happen?</p>\n<pre><code>test('Compute answers', () async {\n    when(myService.submitAnswer(any, any)).thenAnswer((_) async {});\n    final model = MyModel();\n    model.submit(); // This calls myService.submitAnswer(MyAnswer(...), 123)).\n    verify(myService.submitAnswer(MyAnswer(...), 123).called(1);\n  });\n</code></pre>\n<p>This throws <code>No matching calls. All calls: MyService.submitAnswer(Instance of 'MyAnswer', 123)</code>.</p>\n",
        "codigo": [
            "Instance of MyAnswer",
            "test('Compute answers', () async {\n    when(myService.submitAnswer(any, any)).thenAnswer((_) async {});\n    final model = MyModel();\n    model.submit(); // This calls myService.submitAnswer(MyAnswer(...), 123)).\n    verify(myService.submitAnswer(MyAnswer(...), 123).called(1);\n  });\n",
            "No matching calls. All calls: MyService.submitAnswer(Instance of 'MyAnswer', 123)"
        ]
    },
    {
        "titulo": "Test onTap behaviour",
        "score": 1,
        "views": 2316,
        "respostas": 1,
        "tags": [
            "flutter",
            "testing",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/64592939/test-ontap-behaviour",
        "conteudo_html": "<p>I would like to test that when I am tapping a button, the user is routed to the next page. This works in the UI. I introduced the test but I get the following error:\n<code>The following TestFailure object was thrown running a test: Expected: exactly one matching node in the widget tree Actual: _WidgetTypeFinder:&lt;zero widgets with type &quot;MyNextView&quot; (ignoring offstage widgets)&gt; Which: means none were found but one was expected </code></p>\n<p>What am I doing wrong?</p>\n<pre><code>testWidgets('Button tap routes to next page', (WidgetTester tester) async {\n    final button = createButton();\n    await tester.pumpWidget(button);\n    \n    await tester.tap(find.byWidget(button));\n    expect(find.byType(MyNextView), findsOneWidget);\n  });\n</code></pre>\n",
        "codigo": [
            "The following TestFailure object was thrown running a test: Expected: exactly one matching node in the widget tree Actual: _WidgetTypeFinder:<zero widgets with type \"MyNextView\" (ignoring offstage widgets)> Which: means none were found but one was expected ",
            "testWidgets('Button tap routes to next page', (WidgetTester tester) async {\n    final button = createButton();\n    await tester.pumpWidget(button);\n    \n    await tester.tap(find.byWidget(button));\n    expect(find.byType(MyNextView), findsOneWidget);\n  });\n"
        ]
    },
    {
        "titulo": "Mock a Widget in Flutter tests",
        "score": 12,
        "views": 4499,
        "respostas": 3,
        "tags": [
            "flutter",
            "testing",
            "dart",
            "mocking",
            "flutter-test"
        ],
        "link": "https://stackoverflow.com/questions/64550007/mock-a-widget-in-flutter-tests",
        "conteudo_html": "<p>I am trying to create tests for my Flutter application. Simple example:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>class MyWidget extends StatelessWidget {\n   @override\n   build(BuildContext context) {\n      return MySecondWidget();\n   }\n}\n</code></pre>\n<p>I would like to verify that <code>MyWidget</code> is actually calling <code>MySecondWidget</code> without building <code>MySecondWidget</code>.</p>\n<pre class=\"lang-dart prettyprint-override\"><code>void main() {\n   testWidgets('It should call MySecondWidget', (WidgetTester tester) async {\n      await tester.pumpWidget(MyWidget());\n      expect(find.byType(MySecondWidget), findsOneWidget);\n   }\n}\n</code></pre>\n<p>In my case this will not work because <code>MySecondWidget</code> needs some specific and complex setup (like an API key, a value in a <code>Provider</code>...). What I would like is to <em>&quot;mock&quot;</em> <code>MySecondWidget</code> to be an empty <code>Container</code> (for example) so it doesn't raise any error during the test.</p>\n<p>How can I do something like that ?</p>\n",
        "codigo": [
            "class MyWidget extends StatelessWidget {\n   @override\n   build(BuildContext context) {\n      return MySecondWidget();\n   }\n}\n",
            "MyWidget",
            "MySecondWidget",
            "MySecondWidget",
            "void main() {\n   testWidgets('It should call MySecondWidget', (WidgetTester tester) async {\n      await tester.pumpWidget(MyWidget());\n      expect(find.byType(MySecondWidget), findsOneWidget);\n   }\n}\n",
            "MySecondWidget",
            "Provider",
            "MySecondWidget",
            "Container"
        ]
    },
    {
        "titulo": "type &#39;int&#39; is not a subtype of type &#39;String&#39; in flutter widget test in hacker news",
        "score": 1,
        "views": 490,
        "respostas": 2,
        "tags": [
            "json",
            "flutter",
            "testing",
            "dart",
            "flutter-test"
        ],
        "link": "https://stackoverflow.com/questions/63825064/type-int-is-not-a-subtype-of-type-string-in-flutter-widget-test-in-hacker-ne",
        "conteudo_html": "<p>As you already know there is a boring show of flutter where they made a flutter hacker news app. If I'm implementing the same to learn about the testing of the app. I came across this problem.\n<strong>type 'int' is not a subtype of type 'String'</strong>.\nI only implemented three test.\njson_test.dart</p>\n<pre><code>import 'package:flutter_test/flutter_test.dart';\nimport '../lib/jsonparsing.dart';\n\nvoid main() async {\n  test(&quot;parses topstories.json&quot;, () {\n    const jsonString =\n        &quot;[24429012,24426500,24426882,24422593,24426407,24427978,24420177,24428206,24426617,24427417,24428755,24422897,24410641,24424910,24422432,24423463,24424462,24428693,24421907,24427617,24426917,24423637,24426641,24425843,24411110,24404595,24428907,24424073,24409543,24422491,24425424,24403827,24422472,24428810,24423544,24423023,24421331,24428943,24422808,24420120,24427311,24427596,24402763,24425870,24426207,24422441,24419441,24423610,24424698,24427706,24428633,24424992,24426131,24426441,24422416,24413394,24421018,24422547,24419042,24423208,24421247,24427930,24428402,24420874,24417015,24408509,24412970,24419081,24407432,24401999,24422092,24406193,24424040,24417319,24416908,24413705,24416807,24402839,24422333,24427247,24419803,24412881,24422720,24415760,24428372,24414497,24402429,24425776,24419660,24426023,24419947,24425121,24428572,24424335,24403076,24428554,24417482,24402202,24401927,24416005,24419844,24425625,24410596,24404189,24414949,24417079,24423614,24423600,24414252,24425268,24418854,24425111,24411344,24407706,24424989,24422729,24423540,24410530,24412179,24410627,24415872,24421934,24407204,24423602,24423534,24419875,24401439,24427083,24406714,24424208,24418838,24426107,24401664,24411357,24424829,24420304,24404814,24419574,24410113,24416112,24427169,24427165,24422599,24422365,24422358,24404002,24412810,24411991,24421073,24427696,24422148,24406611,24401085,24411076,24421034,24421767,24424621,24427045,24425909,24404808,24409093,24412687,24425797,24423484,24407241,24424872,24414877,24413629,24408077,24409334,24404628,24407323,24411540,24425146,24426014,24420692,24403070,24408185,24421020,24408511,24407674,24405632,24426573,24401805,24408324,24406366,24403464,24402419,24411786,24405758,24407005,24426178,24424804,24426132,24426108,24426631,24407849,24407272,24402937,24413746,24403211,24401748,24410681,24405981,24401546,24404742,24411315,24405884,24407232,24421061,24405941,24403351,24423612,24420975,24405776,24425056,24418802,24407601,24411162,24426728,24407321,24410472,24407844,24422487,24402107,24401462,24423332,24401565,24418930,24415294,24415252,24403236,24402467,24423399,24416458,24401246,24403392,24401206,24404555,24414671,24406921,24406829,24408717,24422463,24412936,24404681,24408201,24412549,24418171,24405214,24425068,24411693,24411554,24403566,24419664,24416977,24407122,24409695,24404113,24417890,24425794,24418248,24420592,24408813,24403461,24420359,24415180,24407444,24410575,24403095,24401112,24402543,24409919,24411253,24404671,24416894,24402125,24404357,24406683,24413393,24413737,24406046,24409972,24405876,24413045,24405946,24413554,24405517,24418345,24418856,24408773,24405960,24401221,24410652,24418598,24409327,24418523,24404968,24410991,24411834,24401124,24414153,24413823,24406276,24424567,24423129,24425498,24415528,24422788,24403306,24403255,24414448,24405833,24414301,24401287,24411683,24406577,24403862,24406418,24416379,24421236,24412657,24404704,24420996,24420777,24406341,24405512,24402885,24405253,24404200,24414222,24421155,24408228,24419521,24407430,24411758,24405455,24421761,24405294,24401352,24411207,24403633,24411030,24406818,24402075,24405279,24418561,24401245,24405942,24420567,24405634,24405583,24413574,24404921,24401450,24405651,24410121,24401519,24403647,24406270,24413835,24412451,24405814,24405736,24402536,24405600,24422368,24405438,24425763,24404549,24404182,24410125,24413607,24408109,24406632,24410299,24401107,24405100,24402849,24406446,24404657,24426389,24425252,24409970,24402841,24402617,24401415,24405318,24402404,24403967,24415907,24407797,24412792,24428579,24424763]&quot;;\n    expect(\n      parseTopStories(jsonString).first,\n      24429012,\n    );\n  });\n  test(&quot;parses Articles.json&quot;, () {\n    const jsonString =\n        &quot;&quot;&quot;{&quot;by&quot;:&quot;dhouston&quot;,&quot;descendants&quot;:71,&quot;id&quot;:8863,&quot;kids&quot;:[9224,8917,8952,8958,8884,8887,8869,8940,8908,9005,8873,9671,9067,9055,8865,8881,8872,8955,10403,8903,8928,9125,8998,8901,8902,8907,8894,8870,8878,8980,8934,8943,8876],&quot;score&quot;:104,&quot;time&quot;:1175714200,&quot;title&quot;:&quot;My YC app: Dropbox - Throw away your USB drive&quot;,&quot;type&quot;:&quot;story&quot;,&quot;url&quot;:&quot;http://www.getdropbox.com/u/2/screencast.html&quot;}&quot;&quot;&quot;;\n    expect(\n      parseArticle(jsonString).by,\n      &quot;dhouston&quot;,\n    );\n  });\n}\n\n</code></pre>\n<p>json_parsing.dart</p>\n<pre><code>import './models/article.dart';\nimport 'dart:convert' as json;\n\nList&lt;int&gt; parseTopStories(String jsonStr) {\n  final parsed = json.jsonDecode(jsonStr);\n  final listofIds = List&lt;int&gt;.from(parsed);\n  return listofIds;\n}\n\nArticle parseArticle(String jsonStr) {\n  final parsed = json.jsonDecode(jsonStr);\n  Article article = Article.fromJson(parsed);\n  return article;\n}\n</code></pre>\n<p>article.dart</p>\n<pre><code>class Article {\n  final int id;\n  final String title;\n  final String url;\n  final String type;\n  final String by;\n  final int time;\n  final int score;\n  final int descendants;\n  final List&lt;int&gt; kids;\n\n  const Article({\n    this.id,\n    this.title,\n    this.url,\n    this.type,\n    this.by,\n    this.time,\n    this.score,\n    this.descendants,\n    this.kids,\n  });\n  factory Article.fromJson(Map&lt;String, dynamic&gt; json) {\n    if (json == null) return null;\n    return Article(\n      url: json['url'] ?? null,\n      by: json['by'],\n      id: json['id'],\n      time: json['time'],\n      title: json['score'],\n      descendants: json['descendants'],\n      kids: json['kids'],\n      score: json['score'],\n      type: json['type'],\n    );\n  }\n}\n</code></pre>\n<p>widget_test.dart</p>\n<pre><code>// This is a basic Flutter widget test.\n//\n// To perform an interaction with a widget in your test, use the WidgetTester\n// utility that Flutter provides. For example, you can send tap and scroll\n// gestures. You can also use WidgetTester to find child widgets in the widget\n// tree, read text, and verify that the values of widget properties are correct.\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nimport 'package:hacker_app/main.dart';\n\nvoid main() {\n  testWidgets('Hacker News', (WidgetTester tester) async {\n    // Build our app and trigger a frame.\n    await tester.pumpWidget(MyApp());\n    expect(find.byIcon(Icons.launch), findsNothing);\n\n    await tester.tap(find.byType(ExpansionTile).first);\n\n    await tester.pumpAndSettle();\n    expect(find.byIcon(Icons.launch), findsOneWidget);\n  });\n}\n\n</code></pre>\n<pre class=\"lang-none prettyprint-override\"><code>00:06 +1 -1: C:\\Users\\Shary\\Desktop\\Development\\practice\\hackerapp\\test\\json_test.dart: parses item.json [E]\n  type 'int' is not a subtype of type 'String'\n  ..\\lib\\models\\article.dart 30:18  new Article.fromJson\n  ..\\lib\\jsonparsing.dart 12:29     parseArticle\n  json_test.dart 17:7               main.&lt;fn&gt;\n</code></pre>\n",
        "codigo": [
            "import 'package:flutter_test/flutter_test.dart';\nimport '../lib/jsonparsing.dart';\n\nvoid main() async {\n  test(\"parses topstories.json\", () {\n    const jsonString =\n        \"[24429012,24426500,24426882,24422593,24426407,24427978,24420177,24428206,24426617,24427417,24428755,24422897,24410641,24424910,24422432,24423463,24424462,24428693,24421907,24427617,24426917,24423637,24426641,24425843,24411110,24404595,24428907,24424073,24409543,24422491,24425424,24403827,24422472,24428810,24423544,24423023,24421331,24428943,24422808,24420120,24427311,24427596,24402763,24425870,24426207,24422441,24419441,24423610,24424698,24427706,24428633,24424992,24426131,24426441,24422416,24413394,24421018,24422547,24419042,24423208,24421247,24427930,24428402,24420874,24417015,24408509,24412970,24419081,24407432,24401999,24422092,24406193,24424040,24417319,24416908,24413705,24416807,24402839,24422333,24427247,24419803,24412881,24422720,24415760,24428372,24414497,24402429,24425776,24419660,24426023,24419947,24425121,24428572,24424335,24403076,24428554,24417482,24402202,24401927,24416005,24419844,24425625,24410596,24404189,24414949,24417079,24423614,24423600,24414252,24425268,24418854,24425111,24411344,24407706,24424989,24422729,24423540,24410530,24412179,24410627,24415872,24421934,24407204,24423602,24423534,24419875,24401439,24427083,24406714,24424208,24418838,24426107,24401664,24411357,24424829,24420304,24404814,24419574,24410113,24416112,24427169,24427165,24422599,24422365,24422358,24404002,24412810,24411991,24421073,24427696,24422148,24406611,24401085,24411076,24421034,24421767,24424621,24427045,24425909,24404808,24409093,24412687,24425797,24423484,24407241,24424872,24414877,24413629,24408077,24409334,24404628,24407323,24411540,24425146,24426014,24420692,24403070,24408185,24421020,24408511,24407674,24405632,24426573,24401805,24408324,24406366,24403464,24402419,24411786,24405758,24407005,24426178,24424804,24426132,24426108,24426631,24407849,24407272,24402937,24413746,24403211,24401748,24410681,24405981,24401546,24404742,24411315,24405884,24407232,24421061,24405941,24403351,24423612,24420975,24405776,24425056,24418802,24407601,24411162,24426728,24407321,24410472,24407844,24422487,24402107,24401462,24423332,24401565,24418930,24415294,24415252,24403236,24402467,24423399,24416458,24401246,24403392,24401206,24404555,24414671,24406921,24406829,24408717,24422463,24412936,24404681,24408201,24412549,24418171,24405214,24425068,24411693,24411554,24403566,24419664,24416977,24407122,24409695,24404113,24417890,24425794,24418248,24420592,24408813,24403461,24420359,24415180,24407444,24410575,24403095,24401112,24402543,24409919,24411253,24404671,24416894,24402125,24404357,24406683,24413393,24413737,24406046,24409972,24405876,24413045,24405946,24413554,24405517,24418345,24418856,24408773,24405960,24401221,24410652,24418598,24409327,24418523,24404968,24410991,24411834,24401124,24414153,24413823,24406276,24424567,24423129,24425498,24415528,24422788,24403306,24403255,24414448,24405833,24414301,24401287,24411683,24406577,24403862,24406418,24416379,24421236,24412657,24404704,24420996,24420777,24406341,24405512,24402885,24405253,24404200,24414222,24421155,24408228,24419521,24407430,24411758,24405455,24421761,24405294,24401352,24411207,24403633,24411030,24406818,24402075,24405279,24418561,24401245,24405942,24420567,24405634,24405583,24413574,24404921,24401450,24405651,24410121,24401519,24403647,24406270,24413835,24412451,24405814,24405736,24402536,24405600,24422368,24405438,24425763,24404549,24404182,24410125,24413607,24408109,24406632,24410299,24401107,24405100,24402849,24406446,24404657,24426389,24425252,24409970,24402841,24402617,24401415,24405318,24402404,24403967,24415907,24407797,24412792,24428579,24424763]\";\n    expect(\n      parseTopStories(jsonString).first,\n      24429012,\n    );\n  });\n  test(\"parses Articles.json\", () {\n    const jsonString =\n        \"\"\"{\"by\":\"dhouston\",\"descendants\":71,\"id\":8863,\"kids\":[9224,8917,8952,8958,8884,8887,8869,8940,8908,9005,8873,9671,9067,9055,8865,8881,8872,8955,10403,8903,8928,9125,8998,8901,8902,8907,8894,8870,8878,8980,8934,8943,8876],\"score\":104,\"time\":1175714200,\"title\":\"My YC app: Dropbox - Throw away your USB drive\",\"type\":\"story\",\"url\":\"http://www.getdropbox.com/u/2/screencast.html\"}\"\"\";\n    expect(\n      parseArticle(jsonString).by,\n      \"dhouston\",\n    );\n  });\n}\n\n",
            "import './models/article.dart';\nimport 'dart:convert' as json;\n\nList<int> parseTopStories(String jsonStr) {\n  final parsed = json.jsonDecode(jsonStr);\n  final listofIds = List<int>.from(parsed);\n  return listofIds;\n}\n\nArticle parseArticle(String jsonStr) {\n  final parsed = json.jsonDecode(jsonStr);\n  Article article = Article.fromJson(parsed);\n  return article;\n}\n",
            "class Article {\n  final int id;\n  final String title;\n  final String url;\n  final String type;\n  final String by;\n  final int time;\n  final int score;\n  final int descendants;\n  final List<int> kids;\n\n  const Article({\n    this.id,\n    this.title,\n    this.url,\n    this.type,\n    this.by,\n    this.time,\n    this.score,\n    this.descendants,\n    this.kids,\n  });\n  factory Article.fromJson(Map<String, dynamic> json) {\n    if (json == null) return null;\n    return Article(\n      url: json['url'] ?? null,\n      by: json['by'],\n      id: json['id'],\n      time: json['time'],\n      title: json['score'],\n      descendants: json['descendants'],\n      kids: json['kids'],\n      score: json['score'],\n      type: json['type'],\n    );\n  }\n}\n",
            "// This is a basic Flutter widget test.\n//\n// To perform an interaction with a widget in your test, use the WidgetTester\n// utility that Flutter provides. For example, you can send tap and scroll\n// gestures. You can also use WidgetTester to find child widgets in the widget\n// tree, read text, and verify that the values of widget properties are correct.\n\nimport 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nimport 'package:hacker_app/main.dart';\n\nvoid main() {\n  testWidgets('Hacker News', (WidgetTester tester) async {\n    // Build our app and trigger a frame.\n    await tester.pumpWidget(MyApp());\n    expect(find.byIcon(Icons.launch), findsNothing);\n\n    await tester.tap(find.byType(ExpansionTile).first);\n\n    await tester.pumpAndSettle();\n    expect(find.byIcon(Icons.launch), findsOneWidget);\n  });\n}\n\n",
            "00:06 +1 -1: C:\\Users\\Shary\\Desktop\\Development\\practice\\hackerapp\\test\\json_test.dart: parses item.json [E]\n  type 'int' is not a subtype of type 'String'\n  ..\\lib\\models\\article.dart 30:18  new Article.fromJson\n  ..\\lib\\jsonparsing.dart 12:29     parseArticle\n  json_test.dart 17:7               main.<fn>\n"
        ]
    },
    {
        "titulo": "Dart tests are executed after normal code",
        "score": 1,
        "views": 23,
        "respostas": 0,
        "tags": [
            "unit-testing",
            "testing",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/63691737/dart-tests-are-executed-after-normal-code",
        "conteudo_html": "<p>I think this is poorly documented (if not a bug).</p>\n<p>Dart first completes the code in <code>main()</code>, then the tests in functions <code>test()</code>.</p>\n<p>This code explains:</p>\n<pre><code>import 'package:test/test.dart';\nvoid main() {\n  test('',() {print('1');});\n  print('2');\n  test('',() {print('3');});\n}\n</code></pre>\n<p>Output: 213</p>\n<p>Is there a way to return an error or suppress the execution of spurious code not pertaining to tests? Or maybe a way to have a lint warning from the analyzer?</p>\n",
        "codigo": [
            "main()",
            "test()",
            "import 'package:test/test.dart';\nvoid main() {\n  test('',() {print('1');});\n  print('2');\n  test('',() {print('3');});\n}\n"
        ]
    },
    {
        "titulo": "Testing my bloc fails when using yield and Either in the mapEventToState",
        "score": 2,
        "views": 1792,
        "respostas": 2,
        "tags": [
            "flutter",
            "testing",
            "dart",
            "yield",
            "bloc"
        ],
        "link": "https://stackoverflow.com/questions/63562053/testing-my-bloc-fails-when-using-yield-and-either-in-the-mapeventtostate",
        "conteudo_html": "<p>I'm following a course on clean architecture and I'm stuck with the following error.</p>\n<p>The following test fails.</p>\n<pre><code>test('should emit [Error] when the input is invalid', () async {\n  final tNumberString = '1';\n  when(mockInputConverter.stringToUnsignedInteger(any))\n    .thenReturn(Left(InvalidInputFailure()));\n\n  final expected = [\n    Empty(),\n    Error(message: invalidInput),\n   ];\n   expectLater(bloc.state, emitsInOrder(expected));\n\n   bloc.add(GetTriviaForConcreteNumberEvent(tNumberString));\n});\n</code></pre>\n<p>My NumberTriviaBloc is as follows</p>\n<pre><code>part 'number_trivia_event.dart';\npart 'number_trivia_state.dart';\n\nconst String serverFailureMessage = 'Server Failure';\nconst String cacheFailureMessage = 'Cache Failure';\nconst String invalidInput =\n    'Invalid input - the number should be a positive integer';\n\nclass NumberTriviaBloc extends Bloc&lt;NumberTriviaEvent, NumberTriviaState&gt; {\n  NumberTriviaBloc(\n      {@required GetConcreteNumberTrivia concrete,\n      @required GetRandomNumberTrivia random,\n      @required this.inputConverter})\n      : assert(concrete != null),\n        assert(random != null),\n        assert(inputConverter != null),\n        _getConcreteNumberTrivia = concrete,\n        _getRandomNumberTrivia = random,\n        super(Empty());\n\n  final GetConcreteNumberTrivia _getConcreteNumberTrivia;\n  final GetRandomNumberTrivia _getRandomNumberTrivia;\n  final InputConverter inputConverter;\n\n  @override\n  Stream&lt;NumberTriviaState&gt; mapEventToState(\n    NumberTriviaEvent event,\n  ) async* {\n    if (event is GetTriviaForConcreteNumberEvent) {\n      final inputEither =\n          inputConverter.stringToUnsignedInteger(event.numberString);\n\n      yield* inputEither.fold(\n        (l) async* {\n          yield Error(message: invalidInput);\n        },\n        (r) =&gt; throw UnimplementedError(),\n      );\n    }\n  }\n}\n</code></pre>\n<p>Im not that familiar with the bloc patern and the testing mechanisms of streams and states. Im guessing somehow the code isn't executed correctly because the fail message is as follows</p>\n<pre><code>ERROR: Expected: should do the following in order:\nemit an event that Empty:&lt;Empty&gt;\nemit an event that Error:&lt;Error&gt;\nActual: Empty:&lt;Empty&gt;\nWhich: was not a Stream or a StreamQueue\n</code></pre>\n",
        "codigo": [
            "test('should emit [Error] when the input is invalid', () async {\n  final tNumberString = '1';\n  when(mockInputConverter.stringToUnsignedInteger(any))\n    .thenReturn(Left(InvalidInputFailure()));\n\n  final expected = [\n    Empty(),\n    Error(message: invalidInput),\n   ];\n   expectLater(bloc.state, emitsInOrder(expected));\n\n   bloc.add(GetTriviaForConcreteNumberEvent(tNumberString));\n});\n",
            "part 'number_trivia_event.dart';\npart 'number_trivia_state.dart';\n\nconst String serverFailureMessage = 'Server Failure';\nconst String cacheFailureMessage = 'Cache Failure';\nconst String invalidInput =\n    'Invalid input - the number should be a positive integer';\n\nclass NumberTriviaBloc extends Bloc<NumberTriviaEvent, NumberTriviaState> {\n  NumberTriviaBloc(\n      {@required GetConcreteNumberTrivia concrete,\n      @required GetRandomNumberTrivia random,\n      @required this.inputConverter})\n      : assert(concrete != null),\n        assert(random != null),\n        assert(inputConverter != null),\n        _getConcreteNumberTrivia = concrete,\n        _getRandomNumberTrivia = random,\n        super(Empty());\n\n  final GetConcreteNumberTrivia _getConcreteNumberTrivia;\n  final GetRandomNumberTrivia _getRandomNumberTrivia;\n  final InputConverter inputConverter;\n\n  @override\n  Stream<NumberTriviaState> mapEventToState(\n    NumberTriviaEvent event,\n  ) async* {\n    if (event is GetTriviaForConcreteNumberEvent) {\n      final inputEither =\n          inputConverter.stringToUnsignedInteger(event.numberString);\n\n      yield* inputEither.fold(\n        (l) async* {\n          yield Error(message: invalidInput);\n        },\n        (r) => throw UnimplementedError(),\n      );\n    }\n  }\n}\n",
            "ERROR: Expected: should do the following in order:\nemit an event that Empty:<Empty>\nemit an event that Error:<Error>\nActual: Empty:<Empty>\nWhich: was not a Stream or a StreamQueue\n"
        ]
    },
    {
        "titulo": "How to test canvas with testWidgets in a flutter mobile app project",
        "score": 2,
        "views": 722,
        "respostas": 1,
        "tags": [
            "flutter",
            "testing",
            "dart",
            "flutter-test"
        ],
        "link": "https://stackoverflow.com/questions/63127015/how-to-test-canvas-with-testwidgets-in-a-flutter-mobile-app-project",
        "conteudo_html": "<p>I was reading about how to build tests for flutter app widgets with the testWidgets function, like this test which comes by default when creating a new flutter project:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>// &lt;project&gt;/test/widget_test.dart\nvoid main() {\n  testWidgets('Counter increments smoke test', (WidgetTester tester) async {\n    await tester.pumpWidget(CounterApp());\n    // validate counter starts at zero\n    expect(find.text('0'), findsOneWidget);\n    \n    await tester.tap(find.byIcon(Icons.add));\n    await tester.pump();\n\n    expect(find.text('0'), findsNothing);\n    expect(find.text('1'), findsOneWidget);\n  }\n}\n</code></pre>\n<p>But how would one test a canvas to see if the drawings/patterns and paragraphs are being displayed correctly? Does the finder object finds a Text widget if I draw a paragraph with <code>canvas.drawParagraph(...)</code>? I couldn't find info about this in the <a href=\"https://flutter.dev/docs/testing\" rel=\"nofollow noreferrer\">docs</a>.</p>\n",
        "codigo": [
            "// <project>/test/widget_test.dart\nvoid main() {\n  testWidgets('Counter increments smoke test', (WidgetTester tester) async {\n    await tester.pumpWidget(CounterApp());\n    // validate counter starts at zero\n    expect(find.text('0'), findsOneWidget);\n    \n    await tester.tap(find.byIcon(Icons.add));\n    await tester.pump();\n\n    expect(find.text('0'), findsNothing);\n    expect(find.text('1'), findsOneWidget);\n  }\n}\n",
            "canvas.drawParagraph(...)"
        ]
    },
    {
        "titulo": "How to test the order of multiple list items in Flutter / Dart?",
        "score": 6,
        "views": 5749,
        "respostas": 3,
        "tags": [
            "flutter",
            "testing",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/63115538/how-to-test-the-order-of-multiple-list-items-in-flutter-dart",
        "conteudo_html": "<p><strong>Intro</strong></p>\n<p>We have a <code>ListView</code> named OrganizationList which contains a <code>ListTile</code> widget for every item. We use a <code>Text</code> widget to display the name of the organization inside the <code>ListTile</code>.</p>\n<p>We would like to test if the organization name is displayed correctly and in the correct order.</p>\n<p><strong>Our current solution</strong></p>\n<p>We have the following assertions:</p>\n<pre><code>var organizationA = find\n    .descendant(\n        of: find.byType(OrganizationList),\n        matching: find.byKey(\n            Key('0'),\n        ),\n     )\n     .evaluate()\n     .first\n     .widget as Text;\nexpect(textOrganization.data, 'organization-a');\n\nvar organizationB = find\n    .descendant(\n        of: find.byType(OrganizationList),\n        matching: find.byKey(\n            Key('1'),\n        ),\n     )\n     .evaluate()\n     .first\n     .widget as Text;\nexpect(textOrganization.data, 'organization-b');\n</code></pre>\n<p>This feels like a very cumbersome way of testing if the right label is shown for the list items. But I fail to find a more elegant way.</p>\n<p><strong>Question</strong></p>\n<p>What is a more elegant way in Flutter / Dart to assert both the content of a list item and the order of all items?</p>\n",
        "codigo": [
            "ListView",
            "ListTile",
            "Text",
            "ListTile",
            "var organizationA = find\n    .descendant(\n        of: find.byType(OrganizationList),\n        matching: find.byKey(\n            Key('0'),\n        ),\n     )\n     .evaluate()\n     .first\n     .widget as Text;\nexpect(textOrganization.data, 'organization-a');\n\nvar organizationB = find\n    .descendant(\n        of: find.byType(OrganizationList),\n        matching: find.byKey(\n            Key('1'),\n        ),\n     )\n     .evaluate()\n     .first\n     .widget as Text;\nexpect(textOrganization.data, 'organization-b');\n"
        ]
    },
    {
        "titulo": "Testing BLoC that uses a reactive repository returning a Stream",
        "score": 1,
        "views": 1451,
        "respostas": 0,
        "tags": [
            "flutter",
            "testing",
            "dart",
            "bloc",
            "flutter-test"
        ],
        "link": "https://stackoverflow.com/questions/62755836/testing-bloc-that-uses-a-reactive-repository-returning-a-stream",
        "conteudo_html": "<p>I'm testing my Flutter mobile application. I'm using <code>flutter_bloc</code> as state management solution and <code>bloc_test</code> to test my BLoCs.</p>\n<p>My application interacts with a remote Cloud Firestore database to store data. The BLoC responsible for managing all interactions with the database, uses a repository which exposes all the methods for carrying out the CRUD operations.</p>\n<p>Here is the code for the <code>TripsRepository</code> interface:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>abstract class TripsRepository {\n  /// Deletes all the trips saved in the database.\n  Future&lt;void&gt; clear();\n\n  /// Deletes the given [trip] from the list of user's trips.\n  Future&lt;void&gt; delete({Trip trip});\n\n  /// Inserts the given [trip] into the list of user's trips.\n  Future&lt;void&gt; insert({Trip trip});\n\n  /// Returns a stream of containing a list of [Trip] objects sorted in descending order\n  /// according to starting time of the trip.\n  Stream&lt;List&lt;Trip&gt;&gt; trips();\n\n  /// Updates the given [trip] in the list of user's trips.\n  Future&lt;void&gt; update({Trip trip});\n}\n</code></pre>\n<p>As you can see, the <code>trips()</code> method returns a <code>Stream</code> containing the list of all <code>Trip</code> objects stored in the Firebase database. In the <code>TripsBloc</code> I subscribe to this <code>Stream</code> and I listen for changes.</p>\n<p>Here is the code for the <code>TripsBloc</code>:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>import 'dart:async';\n\nimport 'package:bloc/bloc.dart';\nimport 'package:equatable/equatable.dart';\nimport 'package:meta/meta.dart';\n\nimport '../../../data/trip.dart';\nimport '../../repositories/trips/trips_repository.dart';\n\npart 'trips_event.dart';\npart 'trips_state.dart';\n\nclass TripsBloc extends Bloc&lt;TripsEvent, TripsState&gt; {\n  /// Trips repository used to perform CRUD operations.\n  final TripsRepository tripsRepository;\n\n  /// Subscription to trips database changes.\n  StreamSubscription _tripsSubscription; // &lt;---------------- Stream subscription.\n\n  TripsBloc({@required this.tripsRepository})\n      : assert(tripsRepository != null),\n        super(TripsInitial());\n\n  @override\n  Stream&lt;TripsState&gt; mapEventToState(\n    TripsEvent event,\n  ) async* {\n    yield TripsLoadInProgress();\n\n    if (event is LoadTrips) {\n      yield* _mapLoadTripsToState();\n    } else if (event is AddTrip) {\n      yield* _mapAddTripToState(event);\n    } else if (event is UpdateTrip) {\n      yield* _mapUpdateTripToState(event);\n    } else if (event is DeleteTrip) {\n      yield* _mapDeleteTripToState(event);\n    } else if (event is TripsCleared) {\n      yield* _mapTripsClearedToState();\n    } else if (event is TripsUpdated) {\n      yield* _mapTripsUpdatedToState(event);\n    }\n  }\n\n  // Cancels the _tripsSubscription when the TripsBloc is closed.\n  @override\n  Future&lt;void&gt; close() {\n    _tripsSubscription?.cancel();\n    return super.close();\n  }\n\n  // This method subscribes to the Stream and listen for changes.............\n  Stream&lt;TripsState&gt; _mapLoadTripsToState() async* {\n    _tripsSubscription?.cancel();\n    try {\n      _tripsSubscription = tripsRepository.trips().listen(\n            (List&lt;Trip&gt; trips) =&gt; add(TripsUpdated(trips: trips)),\n          );\n    } catch (_) {\n      yield TripsLoadFailure();\n    }\n  }\n\n  Stream&lt;TripsState&gt; _mapAddTripToState(AddTrip event) async* {\n    try {\n      tripsRepository.insert(trip: event.trip);\n    } catch (_) {\n      yield TripsLoadFailure();\n    }\n  }\n\n  Stream&lt;TripsState&gt; _mapUpdateTripToState(UpdateTrip event) async* {\n    try {\n      tripsRepository.update(trip: event.trip);\n    } catch (_) {\n      yield TripsLoadFailure();\n    }\n  }\n\n  Stream&lt;TripsState&gt; _mapDeleteTripToState(DeleteTrip event) async* {\n    try {\n      tripsRepository.delete(trip: event.trip);\n    } catch (_) {\n      yield TripsLoadFailure();\n    }\n  }\n\n  Stream&lt;TripsState&gt; _mapTripsClearedToState() async* {\n    final currentState = state;\n    if (currentState is TripsLoadSuccess) {\n      List&lt;Trip&gt; trips = currentState.trips;\n      try {\n        trips.forEach((trip) =&gt; tripsRepository.delete(trip: trip));\n      } catch (_) {\n        yield TripsLoadFailure();\n      }\n    }\n  }\n\n  // When we load our trips, we are subscribing to the TripsRepository\n  // and every time a new trip comes in, we add a TripsUpdated event.\n  // We then handle all TodosUpdates via the following method.\n  Stream&lt;TripsState&gt; _mapTripsUpdatedToState(TripsUpdated event) async* {\n    if (event.trips.isEmpty) {\n      yield TripsLoadSuccessEmpty();\n    } else if (event.trips.last.arrivalTime == null) {\n      yield TripsLoadSuccessActive(trips: event.trips);\n    } else {\n      yield TripsLoadSuccessNotActive(trips: event.trips);\n    }\n  }\n}\n</code></pre>\n<p>To test <code>TripsBloc</code> I use the <code>bloc_test</code> library, and I use the <code>mockito</code> library to mock the <code>TripsRepository</code>. <strong>I think the error could be in the <code>setUp</code> method when I mock the <code>trips()</code> method of the repository, but I don't know what I'm getting wrong</strong>.</p>\n<p>These are the tests that I want to perform:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>import 'package:covtrack/business/blocs/trips/trips_bloc.dart';\nimport 'package:covtrack/business/repositories/trips/trips_repository.dart';\nimport 'package:covtrack/data/coordinates.dart';\nimport 'package:covtrack/data/place.dart';\nimport 'package:covtrack/data/trip.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\nimport 'package:bloc_test/bloc_test.dart';\n\nclass MockTripsRepository extends Mock implements TripsRepository {}\n\nvoid main() {\n  group('TripsBloc', () {\n    TripsRepository tripsRepository;\n    TripsBloc tripsBloc;\n    final trip1 = Trip(\n      tripId: 'ABCD1234',\n      reason: 'Proven work needs',\n      startingTime: DateTime.now(),\n      arrivalTime: null,\n      source: Place(\n        placeId: 'FGHU8976',\n        coords: Coordinates(latitude: 44.12345, longitude: 11.3456),\n        formattedAddress: 'via Rossi 1, Bologna (BO) Italy',\n        name: 'via Rossi 1, Bologna (BO) Italy',\n      ),\n      destination: Place(\n        placeId: 'QWPO4566',\n        coords: Coordinates(latitude: 44.8880, longitude: 11.4312),\n        formattedAddress: 'via Verdi 3, Bologna (BO) Italy',\n        name: 'Best Supermarket',\n      ),\n      stops: [],\n    );\n\n    setUp(() {\n      tripsRepository = MockTripsRepository();\n      when(tripsRepository.trips()).thenAnswer((_) =&gt; Stream.value(&lt;Trip&gt;[])); //&lt;--------------------- I THINK THE ERROR IS HERE!!!!!!!!!!!!!!!!!\n      tripsBloc = TripsBloc(tripsRepository: tripsRepository);\n    });\n\n\n\n    blocTest(\n      'should emit TripsLoadSuccessEmpty when trips loaded for the first time',\n      build: () async =&gt; tripsBloc,\n      act: (bloc) async =&gt; bloc.add(LoadTrips()),\n      expect: [\n        TripsLoadInProgress(),\n        TripsLoadSuccessEmpty(),\n      ],\n    );\n\n    blocTest(\n      'should add a trip to the list in response to an AddTrip event',\n      build: () async =&gt; tripsBloc,\n      act: (bloc) async =&gt; bloc..add(LoadTrips())..add(AddTrip(trip: trip1)),\n      expect: [\n        TripsLoadInProgress(),\n        TripsLoadSuccessEmpty(),\n        TripsLoadSuccessActive(trips: [trip1])\n      ],\n    );\n  });\n}\n</code></pre>\n<p>When I run the tests of the BLoC for the <code>LoadTrips</code> event or the sequence of events [<code>LoadTrips</code>, <code>AddTrip</code>] my tests fail with the following error, as if no status had been issued following the event.</p>\n<pre class=\"lang-dart prettyprint-override\"><code>Expected: [\n            TripsLoadInProgress:TripsLoadInProgress,\n            TripsLoadSuccessEmpty:TripsLoadSuccessEmpty\n          ]\n  Actual: [TripsLoadInProgress:TripsLoadInProgress]\n   Which: shorter than expected at location [1]\n\npackage:test_api                             expect\npackage:bloc_test/src/bloc_test.dart 143:29  blocTest.&lt;fn&gt;.&lt;fn&gt;\n===== asynchronous gap ===========================\ndart:async                                   _asyncThenWrapperHelper\npackage:bloc_test/src/bloc_test.dart         blocTest.&lt;fn&gt;.&lt;fn&gt;\ndart:async                                   runZoned\npackage:bloc_test/src/bloc_test.dart 135:11  blocTest.&lt;fn&gt;\n\n✖ TripsBloc should emit TripsLoadSuccessEmpty when trips loaded for the first time\nExpected: [\n            TripsLoadInProgress:TripsLoadInProgress,\n            TripsLoadSuccessEmpty:TripsLoadSuccessEmpty,\n            TripsLoadSuccessActive:TripsLoadSuccessActive { trips: [    Trip {  \n                tripId: ABCD1234,  \n                reason: Proven work needs,  \n                startingTime: 2020-07-06 14:03:05.726559,  \n                arrivalTime: null,  \n                source:     Place {  \n                placeId: FGHU8976,  \n                coords: Coordinates { latitude: 44.12345, longitude: 11.3456 },  \n                formattedAddress: via Rossi 1, Bologna (BO) Italy,  \n                name: via Rossi 1, Bologna (BO) Italy,  \n              },  \n                destination:     Place {  \n                placeId: QWPO4566,  \n                coords: Coordinates { latitude: 44.888, longitude: 11.4312 },  \n                formattedAddress: via Verdi 3, Bologna (BO) Italy,  \n                name: Best Supermarket,  \n              },  \n                stops: [],  \n              }] }\n          ]\n  Actual: [TripsLoadInProgress:TripsLoadInProgress]\n   Which: shorter than expected at location [1]\n\npackage:test_api                             expect\npackage:bloc_test/src/bloc_test.dart 143:29  blocTest.&lt;fn&gt;.&lt;fn&gt;\n===== asynchronous gap ===========================\ndart:async                                   _asyncThenWrapperHelper\npackage:bloc_test/src/bloc_test.dart         blocTest.&lt;fn&gt;.&lt;fn&gt;\ndart:async                                   runZoned\npackage:bloc_test/src/bloc_test.dart 135:11  blocTest.&lt;fn&gt;\n</code></pre>\n",
        "codigo": [
            "flutter_bloc",
            "bloc_test",
            "TripsRepository",
            "abstract class TripsRepository {\n  /// Deletes all the trips saved in the database.\n  Future<void> clear();\n\n  /// Deletes the given [trip] from the list of user's trips.\n  Future<void> delete({Trip trip});\n\n  /// Inserts the given [trip] into the list of user's trips.\n  Future<void> insert({Trip trip});\n\n  /// Returns a stream of containing a list of [Trip] objects sorted in descending order\n  /// according to starting time of the trip.\n  Stream<List<Trip>> trips();\n\n  /// Updates the given [trip] in the list of user's trips.\n  Future<void> update({Trip trip});\n}\n",
            "trips()",
            "Stream",
            "Trip",
            "TripsBloc",
            "Stream",
            "TripsBloc",
            "import 'dart:async';\n\nimport 'package:bloc/bloc.dart';\nimport 'package:equatable/equatable.dart';\nimport 'package:meta/meta.dart';\n\nimport '../../../data/trip.dart';\nimport '../../repositories/trips/trips_repository.dart';\n\npart 'trips_event.dart';\npart 'trips_state.dart';\n\nclass TripsBloc extends Bloc<TripsEvent, TripsState> {\n  /// Trips repository used to perform CRUD operations.\n  final TripsRepository tripsRepository;\n\n  /// Subscription to trips database changes.\n  StreamSubscription _tripsSubscription; // <---------------- Stream subscription.\n\n  TripsBloc({@required this.tripsRepository})\n      : assert(tripsRepository != null),\n        super(TripsInitial());\n\n  @override\n  Stream<TripsState> mapEventToState(\n    TripsEvent event,\n  ) async* {\n    yield TripsLoadInProgress();\n\n    if (event is LoadTrips) {\n      yield* _mapLoadTripsToState();\n    } else if (event is AddTrip) {\n      yield* _mapAddTripToState(event);\n    } else if (event is UpdateTrip) {\n      yield* _mapUpdateTripToState(event);\n    } else if (event is DeleteTrip) {\n      yield* _mapDeleteTripToState(event);\n    } else if (event is TripsCleared) {\n      yield* _mapTripsClearedToState();\n    } else if (event is TripsUpdated) {\n      yield* _mapTripsUpdatedToState(event);\n    }\n  }\n\n  // Cancels the _tripsSubscription when the TripsBloc is closed.\n  @override\n  Future<void> close() {\n    _tripsSubscription?.cancel();\n    return super.close();\n  }\n\n  // This method subscribes to the Stream and listen for changes.............\n  Stream<TripsState> _mapLoadTripsToState() async* {\n    _tripsSubscription?.cancel();\n    try {\n      _tripsSubscription = tripsRepository.trips().listen(\n            (List<Trip> trips) => add(TripsUpdated(trips: trips)),\n          );\n    } catch (_) {\n      yield TripsLoadFailure();\n    }\n  }\n\n  Stream<TripsState> _mapAddTripToState(AddTrip event) async* {\n    try {\n      tripsRepository.insert(trip: event.trip);\n    } catch (_) {\n      yield TripsLoadFailure();\n    }\n  }\n\n  Stream<TripsState> _mapUpdateTripToState(UpdateTrip event) async* {\n    try {\n      tripsRepository.update(trip: event.trip);\n    } catch (_) {\n      yield TripsLoadFailure();\n    }\n  }\n\n  Stream<TripsState> _mapDeleteTripToState(DeleteTrip event) async* {\n    try {\n      tripsRepository.delete(trip: event.trip);\n    } catch (_) {\n      yield TripsLoadFailure();\n    }\n  }\n\n  Stream<TripsState> _mapTripsClearedToState() async* {\n    final currentState = state;\n    if (currentState is TripsLoadSuccess) {\n      List<Trip> trips = currentState.trips;\n      try {\n        trips.forEach((trip) => tripsRepository.delete(trip: trip));\n      } catch (_) {\n        yield TripsLoadFailure();\n      }\n    }\n  }\n\n  // When we load our trips, we are subscribing to the TripsRepository\n  // and every time a new trip comes in, we add a TripsUpdated event.\n  // We then handle all TodosUpdates via the following method.\n  Stream<TripsState> _mapTripsUpdatedToState(TripsUpdated event) async* {\n    if (event.trips.isEmpty) {\n      yield TripsLoadSuccessEmpty();\n    } else if (event.trips.last.arrivalTime == null) {\n      yield TripsLoadSuccessActive(trips: event.trips);\n    } else {\n      yield TripsLoadSuccessNotActive(trips: event.trips);\n    }\n  }\n}\n",
            "TripsBloc",
            "bloc_test",
            "mockito",
            "TripsRepository",
            "setUp",
            "trips()",
            "import 'package:covtrack/business/blocs/trips/trips_bloc.dart';\nimport 'package:covtrack/business/repositories/trips/trips_repository.dart';\nimport 'package:covtrack/data/coordinates.dart';\nimport 'package:covtrack/data/place.dart';\nimport 'package:covtrack/data/trip.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\nimport 'package:bloc_test/bloc_test.dart';\n\nclass MockTripsRepository extends Mock implements TripsRepository {}\n\nvoid main() {\n  group('TripsBloc', () {\n    TripsRepository tripsRepository;\n    TripsBloc tripsBloc;\n    final trip1 = Trip(\n      tripId: 'ABCD1234',\n      reason: 'Proven work needs',\n      startingTime: DateTime.now(),\n      arrivalTime: null,\n      source: Place(\n        placeId: 'FGHU8976',\n        coords: Coordinates(latitude: 44.12345, longitude: 11.3456),\n        formattedAddress: 'via Rossi 1, Bologna (BO) Italy',\n        name: 'via Rossi 1, Bologna (BO) Italy',\n      ),\n      destination: Place(\n        placeId: 'QWPO4566',\n        coords: Coordinates(latitude: 44.8880, longitude: 11.4312),\n        formattedAddress: 'via Verdi 3, Bologna (BO) Italy',\n        name: 'Best Supermarket',\n      ),\n      stops: [],\n    );\n\n    setUp(() {\n      tripsRepository = MockTripsRepository();\n      when(tripsRepository.trips()).thenAnswer((_) => Stream.value(<Trip>[])); //<--------------------- I THINK THE ERROR IS HERE!!!!!!!!!!!!!!!!!\n      tripsBloc = TripsBloc(tripsRepository: tripsRepository);\n    });\n\n\n\n    blocTest(\n      'should emit TripsLoadSuccessEmpty when trips loaded for the first time',\n      build: () async => tripsBloc,\n      act: (bloc) async => bloc.add(LoadTrips()),\n      expect: [\n        TripsLoadInProgress(),\n        TripsLoadSuccessEmpty(),\n      ],\n    );\n\n    blocTest(\n      'should add a trip to the list in response to an AddTrip event',\n      build: () async => tripsBloc,\n      act: (bloc) async => bloc..add(LoadTrips())..add(AddTrip(trip: trip1)),\n      expect: [\n        TripsLoadInProgress(),\n        TripsLoadSuccessEmpty(),\n        TripsLoadSuccessActive(trips: [trip1])\n      ],\n    );\n  });\n}\n",
            "LoadTrips",
            "LoadTrips",
            "AddTrip",
            "Expected: [\n            TripsLoadInProgress:TripsLoadInProgress,\n            TripsLoadSuccessEmpty:TripsLoadSuccessEmpty\n          ]\n  Actual: [TripsLoadInProgress:TripsLoadInProgress]\n   Which: shorter than expected at location [1]\n\npackage:test_api                             expect\npackage:bloc_test/src/bloc_test.dart 143:29  blocTest.<fn>.<fn>\n===== asynchronous gap ===========================\ndart:async                                   _asyncThenWrapperHelper\npackage:bloc_test/src/bloc_test.dart         blocTest.<fn>.<fn>\ndart:async                                   runZoned\npackage:bloc_test/src/bloc_test.dart 135:11  blocTest.<fn>\n\n✖ TripsBloc should emit TripsLoadSuccessEmpty when trips loaded for the first time\nExpected: [\n            TripsLoadInProgress:TripsLoadInProgress,\n            TripsLoadSuccessEmpty:TripsLoadSuccessEmpty,\n            TripsLoadSuccessActive:TripsLoadSuccessActive { trips: [    Trip {  \n                tripId: ABCD1234,  \n                reason: Proven work needs,  \n                startingTime: 2020-07-06 14:03:05.726559,  \n                arrivalTime: null,  \n                source:     Place {  \n                placeId: FGHU8976,  \n                coords: Coordinates { latitude: 44.12345, longitude: 11.3456 },  \n                formattedAddress: via Rossi 1, Bologna (BO) Italy,  \n                name: via Rossi 1, Bologna (BO) Italy,  \n              },  \n                destination:     Place {  \n                placeId: QWPO4566,  \n                coords: Coordinates { latitude: 44.888, longitude: 11.4312 },  \n                formattedAddress: via Verdi 3, Bologna (BO) Italy,  \n                name: Best Supermarket,  \n              },  \n                stops: [],  \n              }] }\n          ]\n  Actual: [TripsLoadInProgress:TripsLoadInProgress]\n   Which: shorter than expected at location [1]\n\npackage:test_api                             expect\npackage:bloc_test/src/bloc_test.dart 143:29  blocTest.<fn>.<fn>\n===== asynchronous gap ===========================\ndart:async                                   _asyncThenWrapperHelper\npackage:bloc_test/src/bloc_test.dart         blocTest.<fn>.<fn>\ndart:async                                   runZoned\npackage:bloc_test/src/bloc_test.dart 135:11  blocTest.<fn>\n"
        ]
    },
    {
        "titulo": "Testing LoginBloc with bloc_test library and debounce time",
        "score": 3,
        "views": 1640,
        "respostas": 0,
        "tags": [
            "flutter",
            "testing",
            "dart",
            "bloc"
        ],
        "link": "https://stackoverflow.com/questions/62623290/testing-loginbloc-with-bloc-test-library-and-debounce-time",
        "conteudo_html": "<p>I'm testing my Flutter application and in particular the BLoC responsible of the logic behind the login form. I used the same code that can be found on the flutter_bloc library documentation examples (<a href=\"https://bloclibrary.dev/#/flutterfirebaselogintutorial\" rel=\"nofollow noreferrer\">https://bloclibrary.dev/#/flutterfirebaselogintutorial</a>).</p>\n<p>This is the code for the <strong>LoginState</strong>:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>part of 'login_bloc.dart';\n\n/// Here is a list of the possible [LoginState] in which the [LoginForm] can be:\n/// [empty]: initial state of the [LoginForm]\n/// [loading]: state of the [LoginForm] when we are validating credentials\n/// [failure]: state of the [LoginForm] when a login attempt has failed\n/// [success]: state of the [LoginForm] when a login attempt has succeeded\nclass LoginState extends Equatable {\n  final bool isEmailValid;\n  final bool isPasswordValid;\n  final bool isSubmitting;\n  final bool isSuccess;\n  final bool isFailure;\n\n  bool get isFormValid =&gt; isEmailValid &amp;&amp; isPasswordValid;\n\n  const LoginState({\n    @required this.isEmailValid,\n    @required this.isPasswordValid,\n    @required this.isSubmitting,\n    @required this.isSuccess,\n    @required this.isFailure,\n  });\n\n  factory LoginState.empty() {\n    return LoginState(\n      isEmailValid: true,\n      isPasswordValid: true,\n      isSubmitting: false,\n      isSuccess: false,\n      isFailure: false,\n    );\n  }\n\n  factory LoginState.loading() {\n    return LoginState(\n      isEmailValid: true,\n      isPasswordValid: true,\n      isSubmitting: true,\n      isSuccess: false,\n      isFailure: false,\n    );\n  }\n\n  factory LoginState.failure() {\n    return LoginState(\n      isEmailValid: true,\n      isPasswordValid: true,\n      isSubmitting: false,\n      isSuccess: false,\n      isFailure: true,\n    );\n  }\n\n  factory LoginState.success() {\n    return LoginState(\n      isEmailValid: true,\n      isPasswordValid: true,\n      isSubmitting: false,\n      isSuccess: true,\n      isFailure: false,\n    );\n  }\n\n  LoginState update({\n    bool isEmailValid,\n    bool isPasswordValid,\n  }) {\n    return copyWith(\n      isEmailValid: isEmailValid,\n      isPasswordValid: isPasswordValid,\n      isSubmitting: false,\n      isSuccess: false,\n      isFailure: false,\n    );\n  }\n\n  LoginState copyWith({\n    bool isEmailValid,\n    bool isPasswordValid,\n    bool isSubmitEnabled,\n    bool isSubmitting,\n    bool isSuccess,\n    bool isFailure,\n  }) {\n    return LoginState(\n      isEmailValid: isEmailValid ?? this.isEmailValid,\n      isPasswordValid: isPasswordValid ?? this.isPasswordValid,\n      isSubmitting: isSubmitting ?? this.isSubmitting,\n      isSuccess: isSuccess ?? this.isSuccess,\n      isFailure: isFailure ?? this.isFailure,\n    );\n  }\n\n  @override\n  List&lt;Object&gt; get props =&gt; [\n        isEmailValid,\n        isPasswordValid,\n        isSubmitting,\n        isSuccess,\n        isFailure,\n      ];\n\n  @override\n  String toString() {\n    return '''\n    LoginState {\n      isEmailValid: $isEmailValid,\n      isPasswordValid: $isPasswordValid,\n      isSubmitting: $isSubmitting,\n      isSuccess: $isSuccess,\n      isFailure: $isFailure,\n    }''';\n  }\n}\n</code></pre>\n<p>This is the code for the <strong>LoginEvent</strong>:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>part of 'login_bloc.dart';\n\n/// List of [LoginEvent] objects to which our [LoginBloc] will be reacting to:\n/// [EmailChanged] - notifies the BLoC that the user has changed the email.\n/// [PasswordChanged] - notifies the BLoC that the user has changed the password.\n/// [Submitted] - notifies the BLoC that the user has submitted the form.\n/// [LoginWithGooglePressed] - notifies the BLoC that the user has pressed the Google Sign In button.\n/// [LoginWithCredentialsPressed] - notifies the BLoC that the user has pressed the regular sign in button.\nabstract class LoginEvent extends Equatable {\n  const LoginEvent();\n\n  @override\n  List&lt;Object&gt; get props =&gt; [];\n}\n\nclass EmailChanged extends LoginEvent {\n  final String email;\n\n  const EmailChanged({@required this.email});\n\n  @override\n  List&lt;Object&gt; get props =&gt; [email];\n\n  @override\n  String toString() =&gt; 'EmailChanged { email :$email }';\n}\n\nclass PasswordChanged extends LoginEvent {\n  final String password;\n\n  const PasswordChanged({@required this.password});\n\n  @override\n  List&lt;Object&gt; get props =&gt; [password];\n\n  @override\n  String toString() =&gt; 'PasswordChanged { password: $password }';\n}\n\nclass Submitted extends LoginEvent {\n  final String email;\n  final String password;\n\n  const Submitted({\n    @required this.email,\n    @required this.password,\n  });\n\n  @override\n  List&lt;Object&gt; get props =&gt; [email, password];\n\n  @override\n  String toString() =&gt; 'Submitted { email: $email, password: $password }';\n}\n\nclass LoginWithGooglePressed extends LoginEvent {}\n\nclass LoginWithCredentialsPressed extends LoginEvent {\n  final String email;\n  final String password;\n\n  const LoginWithCredentialsPressed({\n    @required this.email,\n    @required this.password,\n  });\n\n  @override\n  List&lt;Object&gt; get props =&gt; [email, password];\n\n  @override\n  String toString() =&gt;\n      'LoginWithCredentialsPressed { email: $email, password: $password }';\n}\n</code></pre>\n<p>And this is the code for the <strong>LoginBloc</strong>:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>import 'dart:async';\n\nimport 'package:bloc/bloc.dart';\nimport 'package:equatable/equatable.dart';\nimport 'package:meta/meta.dart';\nimport 'package:rxdart/rxdart.dart';\n\nimport '../../../utils/validators.dart';\nimport '../../repositories/authentication/authentication_repository.dart';\n\npart 'login_event.dart';\npart 'login_state.dart';\n\n/// BLoC responsible for the business logic behind the login process. In particular this BLoC will\n/// map the incoming [LoginEvent] to the correct [LoginState].\nclass LoginBloc extends Bloc&lt;LoginEvent, LoginState&gt; {\n  /// Authentication repository that provides to the user the methods to sign-in\n  /// with credentials and to sign-in with a Google account.\n  final AuthenticationRepository authRepository;\n\n  LoginBloc({@required this.authRepository}) : assert(authRepository != null);\n\n  @override\n  LoginState get initialState =&gt; LoginState.empty();\n\n  // Overriding transformEvents in order to debounce the EmailChanged and PasswordChanged events\n  // so that we give the user some time to stop typing before validating the input.\n  @override\n  Stream&lt;Transition&lt;LoginEvent, LoginState&gt;&gt; transformEvents(\n    Stream&lt;LoginEvent&gt; events,\n    TransitionFunction&lt;LoginEvent, LoginState&gt; transitionFn,\n  ) {\n    final nonDebounceStream = events.where((event) {\n      return (event is! EmailChanged &amp;&amp; event is! PasswordChanged);\n    });\n    final debounceStream = events.where((event) {\n      return (event is EmailChanged || event is PasswordChanged);\n    }).debounceTime(Duration(milliseconds: 300));\n    return super.transformEvents(\n      nonDebounceStream.mergeWith([debounceStream]),\n      transitionFn,\n    );\n  }\n\n  @override\n  Stream&lt;LoginState&gt; mapEventToState(LoginEvent event) async* {\n    if (event is EmailChanged) {\n      yield* _mapEmailChangedToState(event.email);\n    } else if (event is PasswordChanged) {\n      yield* _mapPasswordChangedToState(event.password);\n    } else if (event is LoginWithGooglePressed) {\n      yield* _mapLoginWithGooglePressedToState();\n    } else if (event is LoginWithCredentialsPressed) {\n      yield* _mapLoginWithCredentialsPressedToState(\n        email: event.email,\n        password: event.password,\n      );\n    }\n  }\n\n  Stream&lt;LoginState&gt; _mapEmailChangedToState(String email) async* {\n    yield state.update(\n      isEmailValid: Validators.isValidEmail(email),\n    );\n  }\n\n  Stream&lt;LoginState&gt; _mapPasswordChangedToState(String password) async* {\n    yield state.update(\n      isPasswordValid: Validators.isValidPassword(password),\n    );\n  }\n\n  Stream&lt;LoginState&gt; _mapLoginWithGooglePressedToState() async* {\n    try {\n      await authRepository.signInWithGoogle();\n      yield LoginState.success();\n    } catch (_) {\n      yield LoginState.failure();\n    }\n  }\n\n  Stream&lt;LoginState&gt; _mapLoginWithCredentialsPressedToState({\n    String email,\n    String password,\n  }) async* {\n    yield LoginState.loading();\n    try {\n      await authRepository.signInWithCredentials(\n        email: email,\n        password: password,\n      );\n      yield LoginState.success();\n    } catch (_) {\n      yield LoginState.failure();\n    }\n  }\n}\n</code></pre>\n<p>Now I'm trying to test this bloc using the <code>bloc_test</code> library, and in particular I'm testing the <strong>EmailChanged</strong>. As you can see from the LoginBloc code I added a debounce time of 300 milliseconds before mapping this event to the correct state.</p>\n<p>For testing this event I used this code:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>import 'package:covtrack/business/blocs/login/login_bloc.dart';\nimport 'package:covtrack/business/repositories/authentication/authentication_repository.dart';\nimport 'package:covtrack/utils/validators.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\nimport 'package:bloc_test/bloc_test.dart';\n\nclass MockAuthenticationRepository extends Mock\n    implements AuthenticationRepository {}\n\nvoid main() {\n  group('LoginBloc', () {\n    AuthenticationRepository authRepository;\n    LoginBloc loginBloc;\n    String email;\n\n    setUp(() {\n      authRepository = MockAuthenticationRepository();\n      loginBloc = LoginBloc(authRepository: authRepository);\n      email = 'johndoe@mail.com';\n    });\n\n    test('throws AssertionError if AuthenticationRepository is null', () {\n      expect(\n        () =&gt; LoginBloc(authRepository: null),\n        throwsA(isAssertionError),\n      );\n    });\n\n    test('initial state is LoginState.empty()', () {\n      expect(loginBloc.initialState, LoginState.empty());\n    });\n\n    group('EmailChanged', () {\n      blocTest(\n        'emits [LoginState] with isEmailValid true',\n        build: () async =&gt; loginBloc,\n        act: (bloc) async =&gt; bloc.add(EmailChanged(email: email)),\n        wait: const Duration(milliseconds: 300),\n        expect: [LoginState.empty().update(isEmailValid: true)],\n      );\n    });\n  });\n}\n</code></pre>\n<p>When I run the test I get this error:</p>\n<pre><code>✓ LoginBloc throws AssertionError if AuthenticationRepository is null\n✓ LoginBloc initial state is LoginState.empty()\nExpected: [\n            LoginState:    LoginState {  \n                isEmailValid: true,  \n                isPasswordValid: true,  \n                isSubmitting: false,  \n                isSuccess: false,  \n                isFailure: false,  \n              }\n          ]\n  Actual: []\n   Which: shorter than expected at location [0]\n\npackage:test_api                             expect\npackage:bloc_test/src/bloc_test.dart 143:29  blocTest.&lt;fn&gt;.&lt;fn&gt;\n===== asynchronous gap ===========================\ndart:async                                   _asyncThenWrapperHelper\npackage:bloc_test/src/bloc_test.dart         blocTest.&lt;fn&gt;.&lt;fn&gt;\ndart:async                                   runZoned\npackage:bloc_test/src/bloc_test.dart 135:11  blocTest.&lt;fn&gt;\n\n✖ LoginBloc EmailChanged emits [LoginState] with isEmailValid true\n</code></pre>\n<p>I don't understand the reason why no state at all is emitted.</p>\n",
        "codigo": [
            "part of 'login_bloc.dart';\n\n/// Here is a list of the possible [LoginState] in which the [LoginForm] can be:\n/// [empty]: initial state of the [LoginForm]\n/// [loading]: state of the [LoginForm] when we are validating credentials\n/// [failure]: state of the [LoginForm] when a login attempt has failed\n/// [success]: state of the [LoginForm] when a login attempt has succeeded\nclass LoginState extends Equatable {\n  final bool isEmailValid;\n  final bool isPasswordValid;\n  final bool isSubmitting;\n  final bool isSuccess;\n  final bool isFailure;\n\n  bool get isFormValid => isEmailValid && isPasswordValid;\n\n  const LoginState({\n    @required this.isEmailValid,\n    @required this.isPasswordValid,\n    @required this.isSubmitting,\n    @required this.isSuccess,\n    @required this.isFailure,\n  });\n\n  factory LoginState.empty() {\n    return LoginState(\n      isEmailValid: true,\n      isPasswordValid: true,\n      isSubmitting: false,\n      isSuccess: false,\n      isFailure: false,\n    );\n  }\n\n  factory LoginState.loading() {\n    return LoginState(\n      isEmailValid: true,\n      isPasswordValid: true,\n      isSubmitting: true,\n      isSuccess: false,\n      isFailure: false,\n    );\n  }\n\n  factory LoginState.failure() {\n    return LoginState(\n      isEmailValid: true,\n      isPasswordValid: true,\n      isSubmitting: false,\n      isSuccess: false,\n      isFailure: true,\n    );\n  }\n\n  factory LoginState.success() {\n    return LoginState(\n      isEmailValid: true,\n      isPasswordValid: true,\n      isSubmitting: false,\n      isSuccess: true,\n      isFailure: false,\n    );\n  }\n\n  LoginState update({\n    bool isEmailValid,\n    bool isPasswordValid,\n  }) {\n    return copyWith(\n      isEmailValid: isEmailValid,\n      isPasswordValid: isPasswordValid,\n      isSubmitting: false,\n      isSuccess: false,\n      isFailure: false,\n    );\n  }\n\n  LoginState copyWith({\n    bool isEmailValid,\n    bool isPasswordValid,\n    bool isSubmitEnabled,\n    bool isSubmitting,\n    bool isSuccess,\n    bool isFailure,\n  }) {\n    return LoginState(\n      isEmailValid: isEmailValid ?? this.isEmailValid,\n      isPasswordValid: isPasswordValid ?? this.isPasswordValid,\n      isSubmitting: isSubmitting ?? this.isSubmitting,\n      isSuccess: isSuccess ?? this.isSuccess,\n      isFailure: isFailure ?? this.isFailure,\n    );\n  }\n\n  @override\n  List<Object> get props => [\n        isEmailValid,\n        isPasswordValid,\n        isSubmitting,\n        isSuccess,\n        isFailure,\n      ];\n\n  @override\n  String toString() {\n    return '''\n    LoginState {\n      isEmailValid: $isEmailValid,\n      isPasswordValid: $isPasswordValid,\n      isSubmitting: $isSubmitting,\n      isSuccess: $isSuccess,\n      isFailure: $isFailure,\n    }''';\n  }\n}\n",
            "part of 'login_bloc.dart';\n\n/// List of [LoginEvent] objects to which our [LoginBloc] will be reacting to:\n/// [EmailChanged] - notifies the BLoC that the user has changed the email.\n/// [PasswordChanged] - notifies the BLoC that the user has changed the password.\n/// [Submitted] - notifies the BLoC that the user has submitted the form.\n/// [LoginWithGooglePressed] - notifies the BLoC that the user has pressed the Google Sign In button.\n/// [LoginWithCredentialsPressed] - notifies the BLoC that the user has pressed the regular sign in button.\nabstract class LoginEvent extends Equatable {\n  const LoginEvent();\n\n  @override\n  List<Object> get props => [];\n}\n\nclass EmailChanged extends LoginEvent {\n  final String email;\n\n  const EmailChanged({@required this.email});\n\n  @override\n  List<Object> get props => [email];\n\n  @override\n  String toString() => 'EmailChanged { email :$email }';\n}\n\nclass PasswordChanged extends LoginEvent {\n  final String password;\n\n  const PasswordChanged({@required this.password});\n\n  @override\n  List<Object> get props => [password];\n\n  @override\n  String toString() => 'PasswordChanged { password: $password }';\n}\n\nclass Submitted extends LoginEvent {\n  final String email;\n  final String password;\n\n  const Submitted({\n    @required this.email,\n    @required this.password,\n  });\n\n  @override\n  List<Object> get props => [email, password];\n\n  @override\n  String toString() => 'Submitted { email: $email, password: $password }';\n}\n\nclass LoginWithGooglePressed extends LoginEvent {}\n\nclass LoginWithCredentialsPressed extends LoginEvent {\n  final String email;\n  final String password;\n\n  const LoginWithCredentialsPressed({\n    @required this.email,\n    @required this.password,\n  });\n\n  @override\n  List<Object> get props => [email, password];\n\n  @override\n  String toString() =>\n      'LoginWithCredentialsPressed { email: $email, password: $password }';\n}\n",
            "import 'dart:async';\n\nimport 'package:bloc/bloc.dart';\nimport 'package:equatable/equatable.dart';\nimport 'package:meta/meta.dart';\nimport 'package:rxdart/rxdart.dart';\n\nimport '../../../utils/validators.dart';\nimport '../../repositories/authentication/authentication_repository.dart';\n\npart 'login_event.dart';\npart 'login_state.dart';\n\n/// BLoC responsible for the business logic behind the login process. In particular this BLoC will\n/// map the incoming [LoginEvent] to the correct [LoginState].\nclass LoginBloc extends Bloc<LoginEvent, LoginState> {\n  /// Authentication repository that provides to the user the methods to sign-in\n  /// with credentials and to sign-in with a Google account.\n  final AuthenticationRepository authRepository;\n\n  LoginBloc({@required this.authRepository}) : assert(authRepository != null);\n\n  @override\n  LoginState get initialState => LoginState.empty();\n\n  // Overriding transformEvents in order to debounce the EmailChanged and PasswordChanged events\n  // so that we give the user some time to stop typing before validating the input.\n  @override\n  Stream<Transition<LoginEvent, LoginState>> transformEvents(\n    Stream<LoginEvent> events,\n    TransitionFunction<LoginEvent, LoginState> transitionFn,\n  ) {\n    final nonDebounceStream = events.where((event) {\n      return (event is! EmailChanged && event is! PasswordChanged);\n    });\n    final debounceStream = events.where((event) {\n      return (event is EmailChanged || event is PasswordChanged);\n    }).debounceTime(Duration(milliseconds: 300));\n    return super.transformEvents(\n      nonDebounceStream.mergeWith([debounceStream]),\n      transitionFn,\n    );\n  }\n\n  @override\n  Stream<LoginState> mapEventToState(LoginEvent event) async* {\n    if (event is EmailChanged) {\n      yield* _mapEmailChangedToState(event.email);\n    } else if (event is PasswordChanged) {\n      yield* _mapPasswordChangedToState(event.password);\n    } else if (event is LoginWithGooglePressed) {\n      yield* _mapLoginWithGooglePressedToState();\n    } else if (event is LoginWithCredentialsPressed) {\n      yield* _mapLoginWithCredentialsPressedToState(\n        email: event.email,\n        password: event.password,\n      );\n    }\n  }\n\n  Stream<LoginState> _mapEmailChangedToState(String email) async* {\n    yield state.update(\n      isEmailValid: Validators.isValidEmail(email),\n    );\n  }\n\n  Stream<LoginState> _mapPasswordChangedToState(String password) async* {\n    yield state.update(\n      isPasswordValid: Validators.isValidPassword(password),\n    );\n  }\n\n  Stream<LoginState> _mapLoginWithGooglePressedToState() async* {\n    try {\n      await authRepository.signInWithGoogle();\n      yield LoginState.success();\n    } catch (_) {\n      yield LoginState.failure();\n    }\n  }\n\n  Stream<LoginState> _mapLoginWithCredentialsPressedToState({\n    String email,\n    String password,\n  }) async* {\n    yield LoginState.loading();\n    try {\n      await authRepository.signInWithCredentials(\n        email: email,\n        password: password,\n      );\n      yield LoginState.success();\n    } catch (_) {\n      yield LoginState.failure();\n    }\n  }\n}\n",
            "bloc_test",
            "import 'package:covtrack/business/blocs/login/login_bloc.dart';\nimport 'package:covtrack/business/repositories/authentication/authentication_repository.dart';\nimport 'package:covtrack/utils/validators.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\nimport 'package:bloc_test/bloc_test.dart';\n\nclass MockAuthenticationRepository extends Mock\n    implements AuthenticationRepository {}\n\nvoid main() {\n  group('LoginBloc', () {\n    AuthenticationRepository authRepository;\n    LoginBloc loginBloc;\n    String email;\n\n    setUp(() {\n      authRepository = MockAuthenticationRepository();\n      loginBloc = LoginBloc(authRepository: authRepository);\n      email = 'johndoe@mail.com';\n    });\n\n    test('throws AssertionError if AuthenticationRepository is null', () {\n      expect(\n        () => LoginBloc(authRepository: null),\n        throwsA(isAssertionError),\n      );\n    });\n\n    test('initial state is LoginState.empty()', () {\n      expect(loginBloc.initialState, LoginState.empty());\n    });\n\n    group('EmailChanged', () {\n      blocTest(\n        'emits [LoginState] with isEmailValid true',\n        build: () async => loginBloc,\n        act: (bloc) async => bloc.add(EmailChanged(email: email)),\n        wait: const Duration(milliseconds: 300),\n        expect: [LoginState.empty().update(isEmailValid: true)],\n      );\n    });\n  });\n}\n",
            "✓ LoginBloc throws AssertionError if AuthenticationRepository is null\n✓ LoginBloc initial state is LoginState.empty()\nExpected: [\n            LoginState:    LoginState {  \n                isEmailValid: true,  \n                isPasswordValid: true,  \n                isSubmitting: false,  \n                isSuccess: false,  \n                isFailure: false,  \n              }\n          ]\n  Actual: []\n   Which: shorter than expected at location [0]\n\npackage:test_api                             expect\npackage:bloc_test/src/bloc_test.dart 143:29  blocTest.<fn>.<fn>\n===== asynchronous gap ===========================\ndart:async                                   _asyncThenWrapperHelper\npackage:bloc_test/src/bloc_test.dart         blocTest.<fn>.<fn>\ndart:async                                   runZoned\npackage:bloc_test/src/bloc_test.dart 135:11  blocTest.<fn>\n\n✖ LoginBloc EmailChanged emits [LoginState] with isEmailValid true\n"
        ]
    },
    {
        "titulo": "Flutter Widget test cannot emulate different screen size properly",
        "score": 11,
        "views": 7054,
        "respostas": 4,
        "tags": [
            "unit-testing",
            "flutter",
            "testing",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/62447898/flutter-widget-test-cannot-emulate-different-screen-size-properly",
        "conteudo_html": "<p>Before deploying my Flutter app, I wanted to test it on multiple screen sizes to check if there is any <code>Renderflex overflow</code> for smaller screens.</p>\n<p>But I when first modified the screen size during widget testing to match the device I was using during the development, I realized that the widget test is throwing <code>Render overflow</code> errors already, even though it did not have such errors on the real device. So I asked this questions <a href=\"https://stackoverflow.com/questions/62444634/how-to-fix-a-renderflex-overflowed-by-72-pixels-on-the-right-in-flutter\">How to fix A RenderFlex overflowed during Widget Test</a></p>\n<p>But I after further investigation and using Flutter golden feature test which snaps png out of widget tests, I narrowed down the problem to a discrepancy in <strong>text size</strong>.</p>\n<p>You can see clearly in the reproducible step below that the text during the widget text is <strong>WAY BIGGER</strong> (on the right) than the actual text in the real device (on the left).</p>\n<p><a href=\"https://i.sstatic.net/OpEgJ.png\" rel=\"noreferrer\"><img src=\"https://i.sstatic.net/OpEgJ.png\" alt=\"enter image description here\" /></a></p>\n<p>The bigger text size during Widget test causes the <code>RenderFlex error</code> in my app.</p>\n<h1>Steps to reproduce:</h1>\n<ol>\n<li>Now connect a real device and run this code with <code>flutter run</code></li>\n</ol>\n<p><code>lib/main.dart</code></p>\n<pre><code>import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      home: TextScaleComparaison(),\n    ),\n  );\n}\n\nclass TextScaleComparaison extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final widget = Scaffold(\n      body: LayoutBuilder(\n        builder: (BuildContext context, BoxConstraints constraints) {\n          final width = MediaQuery.of(context).size.width;\n          final height = MediaQuery.of(context).size.height;\n          final dpr = MediaQuery.of(context).devicePixelRatio;\n          final textScale = MediaQuery.of(context).textScaleFactor;\n          final vi = MediaQuery.of(context).viewInsets;\n          final vip = MediaQuery.of(context).viewPadding;\n          final font = DefaultTextStyle.of(context).style.fontFamily;\n          print(&quot;width is $width and height is $height and dpi is $dpr txtScale is $textScale vi is $vi vip is $vip font is $font&quot;);\n          return Center(child: Text(&quot;This cannot be that long!!&quot;));\n        },\n      ),\n    );\n    return widget;\n  }\n}\n</code></pre>\n<ol start=\"2\">\n<li>Check the logs and you should see device screen info:</li>\n</ol>\n<p>For me I got :</p>\n<p><code>I/flutter (27450): width is 411.42857142857144 and height is 797.7142857142857 and dpi is 2.625 txtScale is 1.1 vi is EdgeInsets.zero vip is EdgeInsets(0.0, 24.0, 0.0, 0.0) font is Roboto</code></p>\n<p>Copy the screen <code>width</code> and <code>height</code> to and <code>textScale</code> and <code>devicePixelRatio</code> to the next step in the code below.</p>\n<ol start=\"3\">\n<li>Edit the code below to add the above setting because we want to simulate this exact screensize in the test.</li>\n</ol>\n<p><code>test/test.dart</code></p>\n<pre><code>import 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:my_app/main.dart';\nvoid main() {\n\n  testWidgets(\n    &quot;Emulate real screen size&quot;,\n    (WidgetTester tester) async {\n      // Adjust these to match your actual device screen specs\n      final width = 414;\n      final height = 846;\n      tester.binding.window.devicePixelRatioTestValue = (2.625);\n      tester.binding.window.textScaleFactorTestValue = (1.1);\n      final dpi = tester.binding.window.devicePixelRatio;\n      tester.binding.window.physicalSizeTestValue = Size(width * dpi, height * dpi);\n      await tester.pumpWidget(\n        MediaQuery(\n          data: MediaQueryData(),\n          child: MaterialApp(\n            home: TextScaleComparaison(),\n          ),\n        ),\n      );\n      await expectLater(\n        find.byType(TextScaleComparaison),\n        matchesGoldenFile(&quot;text.png&quot;),\n      );\n    },\n  );\n}\n</code></pre>\n<p>Run <code>test.dart</code> with <code>flutter test --update-goldens test/test.dart</code></p>\n<p>This will create a png file at <code>test/text.png</code></p>\n<p>Check the logs: For me it printed:</p>\n<p><code>width is 414.0 and height is 846.0 and dpi is 2.625 txtScale is 1.1 vi is EdgeInsets.zero vip is EdgeInsets.zero font is Roboto</code></p>\n<h1>What I am missing ? Why can't the text show exactly the same as the real device?</h1>\n",
        "codigo": [
            "Renderflex overflow",
            "Render overflow",
            "RenderFlex error",
            "flutter run",
            "lib/main.dart",
            "import 'package:flutter/material.dart';\n\nvoid main() {\n  runApp(\n    MaterialApp(\n      home: TextScaleComparaison(),\n    ),\n  );\n}\n\nclass TextScaleComparaison extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    final widget = Scaffold(\n      body: LayoutBuilder(\n        builder: (BuildContext context, BoxConstraints constraints) {\n          final width = MediaQuery.of(context).size.width;\n          final height = MediaQuery.of(context).size.height;\n          final dpr = MediaQuery.of(context).devicePixelRatio;\n          final textScale = MediaQuery.of(context).textScaleFactor;\n          final vi = MediaQuery.of(context).viewInsets;\n          final vip = MediaQuery.of(context).viewPadding;\n          final font = DefaultTextStyle.of(context).style.fontFamily;\n          print(\"width is $width and height is $height and dpi is $dpr txtScale is $textScale vi is $vi vip is $vip font is $font\");\n          return Center(child: Text(\"This cannot be that long!!\"));\n        },\n      ),\n    );\n    return widget;\n  }\n}\n",
            "I/flutter (27450): width is 411.42857142857144 and height is 797.7142857142857 and dpi is 2.625 txtScale is 1.1 vi is EdgeInsets.zero vip is EdgeInsets(0.0, 24.0, 0.0, 0.0) font is Roboto",
            "width",
            "height",
            "textScale",
            "devicePixelRatio",
            "test/test.dart",
            "import 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:my_app/main.dart';\nvoid main() {\n\n  testWidgets(\n    \"Emulate real screen size\",\n    (WidgetTester tester) async {\n      // Adjust these to match your actual device screen specs\n      final width = 414;\n      final height = 846;\n      tester.binding.window.devicePixelRatioTestValue = (2.625);\n      tester.binding.window.textScaleFactorTestValue = (1.1);\n      final dpi = tester.binding.window.devicePixelRatio;\n      tester.binding.window.physicalSizeTestValue = Size(width * dpi, height * dpi);\n      await tester.pumpWidget(\n        MediaQuery(\n          data: MediaQueryData(),\n          child: MaterialApp(\n            home: TextScaleComparaison(),\n          ),\n        ),\n      );\n      await expectLater(\n        find.byType(TextScaleComparaison),\n        matchesGoldenFile(\"text.png\"),\n      );\n    },\n  );\n}\n",
            "test.dart",
            "flutter test --update-goldens test/test.dart",
            "test/text.png",
            "width is 414.0 and height is 846.0 and dpi is 2.625 txtScale is 1.1 vi is EdgeInsets.zero vip is EdgeInsets.zero font is Roboto"
        ]
    },
    {
        "titulo": "How can I test / mock Hive (Flutter) open box logic in repo?",
        "score": 15,
        "views": 9857,
        "respostas": 3,
        "tags": [
            "unit-testing",
            "flutter",
            "testing",
            "dart",
            "mockito"
        ],
        "link": "https://stackoverflow.com/questions/62332566/how-can-i-test-mock-hive-flutter-open-box-logic-in-repo",
        "conteudo_html": "<p>Sorry if this seems a dumb question.  I'm learning clean architecture as dictated by Rob Martin, and I've having a tiny bit of trouble writing one of my tests.</p>\n\n<p>I wrote a couple functions in a Hive repo.  Here's the code</p>\n\n<pre><code>import 'package:hive/hive.dart';\nimport 'package:movie_browser/features/SearchMovie/domain/entities/movie_detailed_entity.dart';\n\nabstract class HiveMovieSearchRepoAbstract {\n  Future&lt;void&gt; cacheMovieDetails(MovieDetailed movie);\n  Future&lt;MovieDetailed&gt; getCachedMovieDetails(String id);\n}\n\n// const vars to prevent misspellings\nconst String MOVIEDETAILSBOX = \"MovieDetailedBox\";\nconst String SEARCHBOX = \"SearchBox\";\n\nclass HiveMovieSearchRepo implements HiveMovieSearchRepoAbstract {\n  Box movieDetailsBox = Hive.box(MOVIEDETAILSBOX) ?? null;\n  // TODO implement searchbox\n  // final searchBox = Hive.box(SEARCHBOX);\n\n  Future&lt;void&gt; cacheMovieDetails(MovieDetailed movie) async {\n    /// expects a MovieDetailed to cache.  Will cache that movie\n    movieDetailsBox ?? await _openBox(movieDetailsBox, MOVIEDETAILSBOX);\n\n    movieDetailsBox.put('${movie.id}', movie);\n  }\n\n  Future&lt;MovieDetailed&gt; getCachedMovieDetails(String id) async {\n    /// expects a string id as input\n    /// returns the MovieDetailed if cached previously\n    /// returns null otherwise\n    movieDetailsBox ?? await _openBox(movieDetailsBox, MOVIEDETAILSBOX);\n\n    return await movieDetailsBox.get('$id');\n  }\n\n  _openBox(Box box, String type) async {\n    await Hive.openBox(type);\n    return Hive.box(type);\n  }\n}\n</code></pre>\n\n<p>I can't think of how to test this?  I want two cases, one where the box is already opened, and one case where it isn't.  </p>\n\n<p>Specifically, it's these lines I want to test</p>\n\n<pre><code>movieDetailsBox ?? await _openBox(movieDetailsBox, MOVIEDETAILSBOX);\n\n_openBox(Box box, String type) async {\n    await Hive.openBox(type);\n    return Hive.box(type);\n  }\n</code></pre>\n\n<p>I thought about mocking the Box object then doing something like....</p>\n\n<pre><code>when(mockHiveMovieSearchRepo.getCachedMovieDetails(some_id)).thenAnswer((_) async =&gt; object)\n</code></pre>\n\n<p>but wouldn't that bypass the code I want tested and always show as positive?</p>\n\n<p>Thanks so much for the help</p>\n",
        "codigo": [
            "import 'package:hive/hive.dart';\nimport 'package:movie_browser/features/SearchMovie/domain/entities/movie_detailed_entity.dart';\n\nabstract class HiveMovieSearchRepoAbstract {\n  Future<void> cacheMovieDetails(MovieDetailed movie);\n  Future<MovieDetailed> getCachedMovieDetails(String id);\n}\n\n// const vars to prevent misspellings\nconst String MOVIEDETAILSBOX = \"MovieDetailedBox\";\nconst String SEARCHBOX = \"SearchBox\";\n\nclass HiveMovieSearchRepo implements HiveMovieSearchRepoAbstract {\n  Box movieDetailsBox = Hive.box(MOVIEDETAILSBOX) ?? null;\n  // TODO implement searchbox\n  // final searchBox = Hive.box(SEARCHBOX);\n\n  Future<void> cacheMovieDetails(MovieDetailed movie) async {\n    /// expects a MovieDetailed to cache.  Will cache that movie\n    movieDetailsBox ?? await _openBox(movieDetailsBox, MOVIEDETAILSBOX);\n\n    movieDetailsBox.put('${movie.id}', movie);\n  }\n\n  Future<MovieDetailed> getCachedMovieDetails(String id) async {\n    /// expects a string id as input\n    /// returns the MovieDetailed if cached previously\n    /// returns null otherwise\n    movieDetailsBox ?? await _openBox(movieDetailsBox, MOVIEDETAILSBOX);\n\n    return await movieDetailsBox.get('$id');\n  }\n\n  _openBox(Box box, String type) async {\n    await Hive.openBox(type);\n    return Hive.box(type);\n  }\n}\n",
            "movieDetailsBox ?? await _openBox(movieDetailsBox, MOVIEDETAILSBOX);\n\n_openBox(Box box, String type) async {\n    await Hive.openBox(type);\n    return Hive.box(type);\n  }\n",
            "when(mockHiveMovieSearchRepo.getCachedMovieDetails(some_id)).thenAnswer((_) async => object)\n"
        ]
    },
    {
        "titulo": "Run same test with multiple values - Dart",
        "score": 4,
        "views": 468,
        "respostas": 0,
        "tags": [
            "unit-testing",
            "testing",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/62201473/run-same-test-with-multiple-values-dart",
        "conteudo_html": "<p>I need to run a test with different values, and in C# I would something like this</p>\n\n<pre class=\"lang-cs prettyprint-override\"><code>        [Theory]\n        [InlineData(\"hello\")]\n        [InlineData(\"world\")]\n        public void my_test(string value)\n        {\n            var myClass = MyClass(value);\n            //Assert...\n        }\n</code></pre>\n\n<p>but in Dart I need to do:</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>    test('MyTest', () {\n      var myClass1 = MyClass('hello');\n      var myClass2 = MyClass('word');\n      //Assert ...\n    });\n</code></pre>\n\n<p>which seems like a little too verbose, I know I could do something like</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>      var values = ['hello', 'world'];\n      values.forEach((value) { /* run test here*/});\n</code></pre>\n\n<p>but does not seem reliable either.</p>\n\n<p>Is there any other way to run a single test with difference values in Dart?</p>\n",
        "codigo": [
            "        [Theory]\n        [InlineData(\"hello\")]\n        [InlineData(\"world\")]\n        public void my_test(string value)\n        {\n            var myClass = MyClass(value);\n            //Assert...\n        }\n",
            "    test('MyTest', () {\n      var myClass1 = MyClass('hello');\n      var myClass2 = MyClass('word');\n      //Assert ...\n    });\n",
            "      var values = ['hello', 'world'];\n      values.forEach((value) { /* run test here*/});\n"
        ]
    },
    {
        "titulo": "Dart StreamController: Test timed out after 30 seconds",
        "score": 2,
        "views": 2217,
        "respostas": 1,
        "tags": [
            "flutter",
            "dart",
            "testing",
            "stream"
        ],
        "link": "https://stackoverflow.com/questions/61845549/dart-streamcontroller-test-timed-out-after-30-seconds",
        "conteudo_html": "<p>I'm trying to create a reactive <code>SharedPreferences</code> utility but I'm stuck with this issue.\nThis is my class</p>\n\n<pre><code>class SPUtil {\n    final _workoutsStreamController = StreamController&lt;\n          Result&lt;Iterable&lt;PreferencesWorkout&gt;, Exception&gt;&gt;.broadcast();\n\n    @override\n    Stream&lt;Result&lt;Iterable&lt;PreferencesWorkout&gt;, Exception&gt;&gt; getWorkouts() async* {\n      final prefs = await SharedPreferences.getInstance();\n      _workoutsStreamController.sink.add(success(_getStoredWorkouts(prefs)));\n      yield* _workoutsStreamController.stream;\n    }\n}\n</code></pre>\n\n<p>And this is my test</p>\n\n<pre><code>test(\"getWorkouts SHOULD return empty list WHEN nothing is stored\",\n        () async {\n      SharedPreferences.setMockInitialValues({});\n\n      final actual = await _sut.getWorkouts().first;\n\n      expect((actual as Success).value, []);\n    });\n</code></pre>\n\n<p>Whenever I run this test it loops for 30 seconds and it returns this error</p>\n\n<pre><code>dart:async  _startMicrotaskLoop\n\nTimeoutException after 0:00:30.000000: Test timed out after 30 seconds. See https://pub.dev/packages/test#timeouts\n</code></pre>\n\n<p>Everything works fine if I use this implementation instead</p>\n\n<pre><code>class SPUtil {\n    @override\n    Stream&lt;Result&lt;Iterable&lt;PreferencesWorkout&gt;, Exception&gt;&gt; getWorkouts() async* {\n      final prefs = await SharedPreferences.getInstance();\n      yield success(_getStoredWorkouts(prefs));\n    }\n}\n</code></pre>\n\n<p>So I assume my test is correct.\nThanks in advance.</p>\n",
        "codigo": [
            "SharedPreferences",
            "class SPUtil {\n    final _workoutsStreamController = StreamController<\n          Result<Iterable<PreferencesWorkout>, Exception>>.broadcast();\n\n    @override\n    Stream<Result<Iterable<PreferencesWorkout>, Exception>> getWorkouts() async* {\n      final prefs = await SharedPreferences.getInstance();\n      _workoutsStreamController.sink.add(success(_getStoredWorkouts(prefs)));\n      yield* _workoutsStreamController.stream;\n    }\n}\n",
            "test(\"getWorkouts SHOULD return empty list WHEN nothing is stored\",\n        () async {\n      SharedPreferences.setMockInitialValues({});\n\n      final actual = await _sut.getWorkouts().first;\n\n      expect((actual as Success).value, []);\n    });\n",
            "dart:async  _startMicrotaskLoop\n\nTimeoutException after 0:00:30.000000: Test timed out after 30 seconds. See https://pub.dev/packages/test#timeouts\n",
            "class SPUtil {\n    @override\n    Stream<Result<Iterable<PreferencesWorkout>, Exception>> getWorkouts() async* {\n      final prefs = await SharedPreferences.getInstance();\n      yield success(_getStoredWorkouts(prefs));\n    }\n}\n"
        ]
    },
    {
        "titulo": "Getitng &#39;_InternalLinkedHashMap&lt;String, dynamic&gt;&#39; is not a subtype of type &#39;List&lt;dynamic&gt;&#39; Error while testing",
        "score": 0,
        "views": 34,
        "respostas": 0,
        "tags": [
            "flutter",
            "testing",
            "dart",
            "mockito"
        ],
        "link": "https://stackoverflow.com/questions/61771772/getitng-internallinkedhashmapstring-dynamic-is-not-a-subtype-of-type-list",
        "conteudo_html": "<p>I'm trying to fetch categories data from API which works as expected. When I am trying to test it and I am running into the following error</p>\n\n<blockquote>\n  <p>type '_InternalLinkedHashMap' is not a subtype of type 'List' </p>\n  \n  <p>package:test_flutter/service.dart 32:12  CategoryService.getCats</p>\n</blockquote>\n\n<p>service.dart</p>\n\n<pre><code>class Service {\n  String apiUrl = \"...\";\n\n\n  http.Client _client;\n\n  service() {\n   _client = IOClient();\n  }\n\n Service.customClient(this._client);\n\n  Future&lt;List&lt;Categories&gt;&gt; getCats() async {\n    final response = await _client.get(\n      apiUrl + \"/categories\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $token',\n      },\n    );\n\n    if(response.statusCode == 200 || response.statusCode == 201) {\n      print('Response status: ${response.statusCode}');\n      print('Response body: ${response.body}');\n      List jsonList = json.decode(response.body);\n\n      List&lt;Categories&gt; catList = [];\n      for (var json in jsonList) {\n  Categories temp = Categories.fromJson(json);\n        print (temp);\n        catList.add(temp);\n      }\n      return catList;\n    } else {\n      print('Response status: ${response.statusCode}');\n      throw Exception(\"error getting categories\");\n    }\n  }\n}\n</code></pre>\n\n<p>model.dart</p>\n\n<pre><code>class Categories {\n\n  String _id;\n  String _name;\n\n\n  Categories(String id, String name) {\n    this._id = id;\n    this._name = name;\n\n  }\n\n  factory Categories.fromJson(Map&lt;String, dynamic&gt; json) {\n    return Categories.full(\n        json['id'], json['name']);\n  }\nString getId() {\n    return _id;\n  }\n\n  void setId(String id) {\n    this._id = id;\n  }\n\n  String getName() {\n    return _name;\n  }\n\n  void setName(String name) {\n    this._name = name;\n  }\n\n}\n</code></pre>\n\n<p>category_test.dart</p>\n\n<pre><code>class MockClient extends Mock implements http.Client {}\nmain() {\n  group('test categories', ()\n  {\n    test(\n        'returns list of categories if the http call completes successfully', () async {\n      final client = MockClient();\n      when(client.get('....',\n\n\n        headers: anyNamed('headers'),\n      )\n      ).thenAnswer((_) async {\n        return http.Response(\n            '{\"id\":\"123\",\"name\":\"Health\"}',\n            200);\n      });\n\n      List&lt;Categories&gt; value = await Service.customClient(client).getCats();\n\n      expect(value, const TypeMatcher&lt;List&lt;Categories&gt;&gt;());\n\n         expect(value[1].getId, \"123\");\n         expect(value[1].getName, \"Health\");\n    });\n});\n}\n</code></pre>\n\n<p>I am not exactly sure why I am getting this error.I need to write the test files and Im not sure what I am doing wrong.</p>\n",
        "codigo": [
            "class Service {\n  String apiUrl = \"...\";\n\n\n  http.Client _client;\n\n  service() {\n   _client = IOClient();\n  }\n\n Service.customClient(this._client);\n\n  Future<List<Categories>> getCats() async {\n    final response = await _client.get(\n      apiUrl + \"/categories\",\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer $token',\n      },\n    );\n\n    if(response.statusCode == 200 || response.statusCode == 201) {\n      print('Response status: ${response.statusCode}');\n      print('Response body: ${response.body}');\n      List jsonList = json.decode(response.body);\n\n      List<Categories> catList = [];\n      for (var json in jsonList) {\n  Categories temp = Categories.fromJson(json);\n        print (temp);\n        catList.add(temp);\n      }\n      return catList;\n    } else {\n      print('Response status: ${response.statusCode}');\n      throw Exception(\"error getting categories\");\n    }\n  }\n}\n",
            "class Categories {\n\n  String _id;\n  String _name;\n\n\n  Categories(String id, String name) {\n    this._id = id;\n    this._name = name;\n\n  }\n\n  factory Categories.fromJson(Map<String, dynamic> json) {\n    return Categories.full(\n        json['id'], json['name']);\n  }\nString getId() {\n    return _id;\n  }\n\n  void setId(String id) {\n    this._id = id;\n  }\n\n  String getName() {\n    return _name;\n  }\n\n  void setName(String name) {\n    this._name = name;\n  }\n\n}\n",
            "class MockClient extends Mock implements http.Client {}\nmain() {\n  group('test categories', ()\n  {\n    test(\n        'returns list of categories if the http call completes successfully', () async {\n      final client = MockClient();\n      when(client.get('....',\n\n\n        headers: anyNamed('headers'),\n      )\n      ).thenAnswer((_) async {\n        return http.Response(\n            '{\"id\":\"123\",\"name\":\"Health\"}',\n            200);\n      });\n\n      List<Categories> value = await Service.customClient(client).getCats();\n\n      expect(value, const TypeMatcher<List<Categories>>());\n\n         expect(value[1].getId, \"123\");\n         expect(value[1].getName, \"Health\");\n    });\n});\n}\n"
        ]
    },
    {
        "titulo": "How to `setUp` a `WidgetTester` for Multiple Tests in Flutter",
        "score": 21,
        "views": 9769,
        "respostas": 2,
        "tags": [
            "testing",
            "flutter",
            "dart",
            "widget"
        ],
        "link": "https://stackoverflow.com/questions/60355792/how-to-setup-a-widgettester-for-multiple-tests-in-flutter",
        "conteudo_html": "<h1>1. The Problem</h1>\n\n<p>The <code>testWidgets</code> function is apparently only a subcase of the <code>test</code> function.</p>\n\n<p>A use case I'm trying to solve right now is to pump the same widget for multiple <code>testWidgets</code>, a <code>setUp</code> for multiple <code>testWidgets</code>. However, how can I do this if it creates a new instance inside each test?</p>\n\n<p>I've tried to initialize a <code>WidgetTester</code> outside the tests, in the <code>main()</code>, but <code>WidgetTester</code> has only a private constructor: </p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>class WidgetTester \n  extends WidgetController \n    implements HitTestDispatcher, TickerProvider {\n  WidgetTester._(TestWidgetsFlutterBinding binding) : super(binding) {\n    if (binding is LiveTestWidgetsFlutterBinding)\n      binding.deviceEventDispatcher = this;\n}\n</code></pre>\n\n<p>I don't quite get how the Flutter team made this work, but initializing a <code>WidgetTester</code> in the same way they did inside the <code>testWidgets</code> function isn't working for me:</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>final TestWidgetsFlutterBinding binding \n  = TestWidgetsFlutterBinding.ensureInitialized() \n    as TestWidgetsFlutterBinding;\nfinal WidgetTester tester = WidgetTester._(binding);\n</code></pre>\n\n<h1>2. An Example</h1>\n\n<p>A simple example would be to try to break down the tests of the Flutter demo that is created with each new Flutter project from <code>flutter create</code>. In it, we could try to separate the initial setup test of the app from the tapping action test:</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>testWidgets('Initial setup', (WidgetTester tester) async {\n  await tester.pumpWidget(MyApp());\n\n  expect(find.text('0'), findsOneWidget);\n  expect(find.text('1'), findsNothing);\n});\n\ntestWidgets('Increment the counter on tap', (WidgetTester tester) async {\n  await tester.pumpWidget(MyApp());\n\n  await tester.tap(find.byIcon(Icons.add));\n  await tester.pump();\n\n  expect(find.text('0'), findsNothing);\n  expect(find.text('1'), findsOneWidget);\n});\n</code></pre>\n\n<p>The idea would be to try to move the <code>await tester.pumpWidget(MyApp());</code> into a <code>setUp</code> function.</p>\n",
        "codigo": [
            "testWidgets",
            "test",
            "testWidgets",
            "setUp",
            "testWidgets",
            "WidgetTester",
            "main()",
            "WidgetTester",
            "class WidgetTester \n  extends WidgetController \n    implements HitTestDispatcher, TickerProvider {\n  WidgetTester._(TestWidgetsFlutterBinding binding) : super(binding) {\n    if (binding is LiveTestWidgetsFlutterBinding)\n      binding.deviceEventDispatcher = this;\n}\n",
            "WidgetTester",
            "testWidgets",
            "final TestWidgetsFlutterBinding binding \n  = TestWidgetsFlutterBinding.ensureInitialized() \n    as TestWidgetsFlutterBinding;\nfinal WidgetTester tester = WidgetTester._(binding);\n",
            "flutter create",
            "testWidgets('Initial setup', (WidgetTester tester) async {\n  await tester.pumpWidget(MyApp());\n\n  expect(find.text('0'), findsOneWidget);\n  expect(find.text('1'), findsNothing);\n});\n\ntestWidgets('Increment the counter on tap', (WidgetTester tester) async {\n  await tester.pumpWidget(MyApp());\n\n  await tester.tap(find.byIcon(Icons.add));\n  await tester.pump();\n\n  expect(find.text('0'), findsNothing);\n  expect(find.text('1'), findsOneWidget);\n});\n",
            "await tester.pumpWidget(MyApp());",
            "setUp"
        ]
    },
    {
        "titulo": "How to test main.dart",
        "score": 0,
        "views": 1226,
        "respostas": 2,
        "tags": [
            "testing",
            "flutter",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/60133692/how-to-test-main-dart",
        "conteudo_html": "<p>main.dart</p>\n\n<pre><code>int sumInt(int a, int b) {\n  return a + b;\n}\nint main(List&lt;String&gt; args) {\n  var result;\n  var a = 10;\n\n  result = sumInt(a, 50);\n  return result;\n}\n</code></pre>\n\n<p>gao.dart</p>\n\n<pre><code>int calculate() {\n  return 6 +10;\n}\n\n</code></pre>\n\n<p>gao_test.dart</p>\n\n<pre><code>import 'package:gao/gao.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  test(\"test to check add method\", () {\n    expect(calculate, result );\n  });\n}\n\n</code></pre>\n\n<p>The question is, how do I test main.dart? I think importing main.dart in gao_test.dart, but there was an error importing. Please help me.</p>\n",
        "codigo": [
            "int sumInt(int a, int b) {\n  return a + b;\n}\nint main(List<String> args) {\n  var result;\n  var a = 10;\n\n  result = sumInt(a, 50);\n  return result;\n}\n",
            "int calculate() {\n  return 6 +10;\n}\n\n",
            "import 'package:gao/gao.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  test(\"test to check add method\", () {\n    expect(calculate, result );\n  });\n}\n\n"
        ]
    },
    {
        "titulo": "WidgetTest navigation in flutter with mockito not working",
        "score": 0,
        "views": 2840,
        "respostas": 1,
        "tags": [
            "testing",
            "flutter",
            "dart",
            "mockito"
        ],
        "link": "https://stackoverflow.com/questions/59565961/widgettest-navigation-in-flutter-with-mockito-not-working",
        "conteudo_html": "<p>Super new to flutter testing. I don't understand why I get the following error on </p>\n\n<p><code>verify(mockNavigationObserver.didPush(any, any));</code> </p>\n\n<pre><code>════════════════════════════════════════════════════════════════════════════════════════════════╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nThe following TestFailure object was thrown running a test:\n  No matching calls (actually, no calls at all).\n(If you called `verify(...).called(0);`, please instead use `verifyNever(...);`.)\n\nWhen the exception was thrown, this was the stack:\n#0      fail (package:test_api/src/frontend/expect.dart:153:30)\n#1      _VerifyCall._checkWith (package:mockito/src/mock.dart:648:7)\n#2      _makeVerify.&lt;anonymous closure&gt; (package:mockito/src/mock.dart:935:18)\n#3      main.&lt;anonymous closure&gt;.&lt;anonymous closure&gt; (file:&lt;my_project_path&gt;/test/navigation_test.dart:53:13)\n&lt;asynchronous suspension&gt;\n#4      testWidgets.&lt;anonymous closure&gt;.&lt;anonymous closure&gt; (package:flutter_test/src/widget_tester.dart:124:25)\n#5      TestWidgetsFlutterBinding._runTestBody (package:flutter_test/src/binding.dart:696:19)\n&lt;asynchronous suspension&gt;\n#8      TestWidgetsFlutterBinding._runTest (package:flutter_test/src/binding.dart:679:14)\n#9      AutomatedTestWidgetsFlutterBinding.runTest.&lt;anonymous closure&gt; (package:flutter_test/src/binding.dart:1050:24)\n#15     AutomatedTestWidgetsFlutterBinding.runTest (package:flutter_test/src/binding.dart:1047:15)\n#16     testWidgets.&lt;anonymous closure&gt; (package:flutter_test/src/widget_tester.dart:121:22)\n#17     Declarer.test.&lt;anonymous closure&gt;.&lt;anonymous closure&gt;.&lt;anonymous closure&gt; (package:test_api/src/backend/declarer.dart:171:27)\n&lt;asynchronous suspension&gt;\n#18     Invoker.waitForOutstandingCallbacks.&lt;anonymous closure&gt; (package:test_api/src/backend/invoker.dart:242:15)\n#23     Invoker.waitForOutstandingCallbacks (package:test_api/src/backend/invoker.dart:239:5)\n#24     Declarer.test.&lt;anonymous closure&gt;.&lt;anonymous closure&gt; (package:test_api/src/backend/declarer.dart:169:33)\n#29     Declarer.test.&lt;anonymous closure&gt; (package:test_api/src/backend/declarer.dart:168:13)\n#30     Invoker._onRun.&lt;anonymous closure&gt;.&lt;anonymous closure&gt;.&lt;anonymous closure&gt;.&lt;anonymous closure&gt; (package:test_api/src/backend/invoker.dart:392:25)\n#44     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:384:19)\n#45     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:418:5)\n#46     _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:174:12)\n(elided 28 frames from class _FakeAsync, package dart:async, package dart:async-patch, and package stack_trace)\n\nThe test description was:\n  StartPage .. LogInButton -&gt; LogIn Screen\n\n</code></pre>\n\n<p>my navigation_test.dart below:</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>import 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\nimport 'package:project/auth/provider/auth_provider.dart';\nimport 'package:project/auth/screens/start_screen.dart';\nimport 'package:project/common/config/finders.dart';\nimport 'package:project/common/config/key_strings.dart';\nimport 'package:project/common/config/route_config.dart';\nimport 'package:provider/provider.dart';\n\n// Mock class\nclass MockNavigatorObserver extends Mock implements NavigatorObserver {}\n\nclass MockAuthProvider extends Mock implements AuthProvider {}\n\nvoid main() {\n  group('StartPage navigation tests', () {\n    NavigatorObserver mockNavigationObserver;\n    AuthProvider mockAuthProvider;\n\n    setUp(() {\n      mockNavigationObserver = MockNavigatorObserver();\n      mockAuthProvider = MockAuthProvider();\n    });\n\n    Widget createWidgetForTesting({Widget child}) {\n      return MaterialApp(\n        home: child,\n        routes: RouteConfig.routes,\n      );\n    }\n\n    Future&lt;Null&gt; _buildStartScreen(WidgetTester tester) async {\n      await tester.pumpWidget(\n          ChangeNotifierProvider&lt;AuthProvider&gt;.value(\n        value: mockAuthProvider,\n        child: createWidgetForTesting(child: StartScreen()),\n      ));\n\n      verify(mockNavigationObserver.didPush(any, any));\n    }\n\n    Future&lt;Null&gt; _navigateToPageByButtonKey(\n        WidgetTester tester, String buttonKey) async {\n\n      Finder buttonFinder = find.byKey(Key(buttonKey));\n      expect(buttonFinder, findsOneWidget);\n\n      await tester.tap(buttonFinder);\n      await tester.pumpAndSettle();\n    }\n\n    testWidgets('StartPage .. RegisterButton -&gt; CreateProfile Screen',\n        (WidgetTester tester) async {\n      await _buildWidget(tester, StartScreen());\n      await _navigateToPageByButtonKey(tester, START_SCREEN_REGISTER_BUTTON_KEY);\n      verify(mockNavigationObserver.didPush(any, any));\n      expect(find.byKey(Key(CREATE_PROFILE_SCREEN_KEY)), findsOneWidget);\n    });\n  });\n}\n\n</code></pre>\n",
        "codigo": [
            "verify(mockNavigationObserver.didPush(any, any));",
            "════════════════════════════════════════════════════════════════════════════════════════════════╡ EXCEPTION CAUGHT BY FLUTTER TEST FRAMEWORK ╞════════════════════════════════════════════════════\nThe following TestFailure object was thrown running a test:\n  No matching calls (actually, no calls at all).\n(If you called `verify(...).called(0);`, please instead use `verifyNever(...);`.)\n\nWhen the exception was thrown, this was the stack:\n#0      fail (package:test_api/src/frontend/expect.dart:153:30)\n#1      _VerifyCall._checkWith (package:mockito/src/mock.dart:648:7)\n#2      _makeVerify.<anonymous closure> (package:mockito/src/mock.dart:935:18)\n#3      main.<anonymous closure>.<anonymous closure> (file:<my_project_path>/test/navigation_test.dart:53:13)\n<asynchronous suspension>\n#4      testWidgets.<anonymous closure>.<anonymous closure> (package:flutter_test/src/widget_tester.dart:124:25)\n#5      TestWidgetsFlutterBinding._runTestBody (package:flutter_test/src/binding.dart:696:19)\n<asynchronous suspension>\n#8      TestWidgetsFlutterBinding._runTest (package:flutter_test/src/binding.dart:679:14)\n#9      AutomatedTestWidgetsFlutterBinding.runTest.<anonymous closure> (package:flutter_test/src/binding.dart:1050:24)\n#15     AutomatedTestWidgetsFlutterBinding.runTest (package:flutter_test/src/binding.dart:1047:15)\n#16     testWidgets.<anonymous closure> (package:flutter_test/src/widget_tester.dart:121:22)\n#17     Declarer.test.<anonymous closure>.<anonymous closure>.<anonymous closure> (package:test_api/src/backend/declarer.dart:171:27)\n<asynchronous suspension>\n#18     Invoker.waitForOutstandingCallbacks.<anonymous closure> (package:test_api/src/backend/invoker.dart:242:15)\n#23     Invoker.waitForOutstandingCallbacks (package:test_api/src/backend/invoker.dart:239:5)\n#24     Declarer.test.<anonymous closure>.<anonymous closure> (package:test_api/src/backend/declarer.dart:169:33)\n#29     Declarer.test.<anonymous closure> (package:test_api/src/backend/declarer.dart:168:13)\n#30     Invoker._onRun.<anonymous closure>.<anonymous closure>.<anonymous closure>.<anonymous closure> (package:test_api/src/backend/invoker.dart:392:25)\n#44     _Timer._runTimers (dart:isolate-patch/timer_impl.dart:384:19)\n#45     _Timer._handleMessage (dart:isolate-patch/timer_impl.dart:418:5)\n#46     _RawReceivePortImpl._handleMessage (dart:isolate-patch/isolate_patch.dart:174:12)\n(elided 28 frames from class _FakeAsync, package dart:async, package dart:async-patch, and package stack_trace)\n\nThe test description was:\n  StartPage .. LogInButton -> LogIn Screen\n\n",
            "import 'package:flutter/material.dart';\nimport 'package:flutter_test/flutter_test.dart';\nimport 'package:mockito/mockito.dart';\nimport 'package:project/auth/provider/auth_provider.dart';\nimport 'package:project/auth/screens/start_screen.dart';\nimport 'package:project/common/config/finders.dart';\nimport 'package:project/common/config/key_strings.dart';\nimport 'package:project/common/config/route_config.dart';\nimport 'package:provider/provider.dart';\n\n// Mock class\nclass MockNavigatorObserver extends Mock implements NavigatorObserver {}\n\nclass MockAuthProvider extends Mock implements AuthProvider {}\n\nvoid main() {\n  group('StartPage navigation tests', () {\n    NavigatorObserver mockNavigationObserver;\n    AuthProvider mockAuthProvider;\n\n    setUp(() {\n      mockNavigationObserver = MockNavigatorObserver();\n      mockAuthProvider = MockAuthProvider();\n    });\n\n    Widget createWidgetForTesting({Widget child}) {\n      return MaterialApp(\n        home: child,\n        routes: RouteConfig.routes,\n      );\n    }\n\n    Future<Null> _buildStartScreen(WidgetTester tester) async {\n      await tester.pumpWidget(\n          ChangeNotifierProvider<AuthProvider>.value(\n        value: mockAuthProvider,\n        child: createWidgetForTesting(child: StartScreen()),\n      ));\n\n      verify(mockNavigationObserver.didPush(any, any));\n    }\n\n    Future<Null> _navigateToPageByButtonKey(\n        WidgetTester tester, String buttonKey) async {\n\n      Finder buttonFinder = find.byKey(Key(buttonKey));\n      expect(buttonFinder, findsOneWidget);\n\n      await tester.tap(buttonFinder);\n      await tester.pumpAndSettle();\n    }\n\n    testWidgets('StartPage .. RegisterButton -> CreateProfile Screen',\n        (WidgetTester tester) async {\n      await _buildWidget(tester, StartScreen());\n      await _navigateToPageByButtonKey(tester, START_SCREEN_REGISTER_BUTTON_KEY);\n      verify(mockNavigationObserver.didPush(any, any));\n      expect(find.byKey(Key(CREATE_PROFILE_SCREEN_KEY)), findsOneWidget);\n    });\n  });\n}\n\n"
        ]
    },
    {
        "titulo": "Flutter UnitTest: Two different mocks for the same class",
        "score": 1,
        "views": 1410,
        "respostas": 1,
        "tags": [
            "android",
            "unit-testing",
            "testing",
            "flutter",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/59555349/flutter-unittest-two-different-mocks-for-the-same-class",
        "conteudo_html": "<p>currently I am writing Unit tests for my mobile web application (Android app). The unit tests refer to my login system built upon Google Firebase Auth. </p>\n\n<p>With one of the latest releases of the <code>firebase authentication</code> plugins, the return type of some functions have been changed. For example, the method <code>firebaseAuth.signInWithEmailAndPassword</code> has been changed from <code>FirebaseUser</code> to <code>AuthResult</code></p>\n\n<p>I have a <strong>login</strong> function in a <code>AuthService.dart</code> with the following content:</p>\n\n<pre><code>Future&lt;bool&gt; login(LoginUserData userData) async {\n    try {\n      _checkUserDataValidity(userData);\n      final AuthResult authResult= await firebaseAuth.signInWithEmailAndPassword(email: userData.email, password: userData.password);\n      return authResult.user != null;\n    } catch (exception) {\n      return false;\n    }\n  }\n</code></pre>\n\n<p>So, as you can see I am only checking whether the data of the user is correct or not - I am returning a boolean to check this in another file (if true is returned, the <code>Navigator</code> routes to another site, if wrong is returned an error message pops up).</p>\n\n<p>My Unit tests for example checks for a few cases:</p>\n\n<ol>\n<li>Correct data</li>\n<li>Incorrect data (userData is not empty or null)</li>\n<li>Empty data</li>\n</ol>\n\n<p>Example code of a test:</p>\n\n<pre><code>test('Login should work with valid user data', () async {\n      when(\n        firebaseAuthMock.signInWithEmailAndPassword(\n          email: testValidUserData.email,\n          password: testValidUserData.password,\n        )\n      ).thenAnswer(\n        (_) =&gt; Future&lt;AuthResultMock&gt;.value(firebaseAuthResultMock)\n      );\n\n      final bool actionSuccess = await authService.login(testValidUserData);\n\n      verify(\n        firebaseAuthMock.signInWithEmailAndPassword(\n          email: testValidUserData.email,\n          password: testValidUserData.password,\n        )\n      ).called(1);\n\n      expect(actionSuccess, true);\n    });\n</code></pre>\n\n<p>To cover case one and two of my list above, I'd like to use two different Mocks. One Mock to contain a user, the other mock has no user in it.</p>\n\n<p>Current issue:</p>\n\n<pre><code>(_) =&gt; Future&lt;AuthResultMock&gt;.value(firebaseAuthResultMock)\n</code></pre>\n\n<p>in my test is in conflict with this code from the <code>AuthServie.dart</code></p>\n\n<pre><code>return authResult.user != null;\n</code></pre>\n\n<p>The mock is having null as user. How can I change this? :) Bt.w I am using Mockito.</p>\n\n<p>My idea was:</p>\n\n<ol>\n<li>For correct data, to return a mock, that contains a user.</li>\n<li>For invalid data, to return a mock, that has null as user.</li>\n</ol>\n\n<p>Thank you so much. :)</p>\n",
        "codigo": [
            "firebase authentication",
            "firebaseAuth.signInWithEmailAndPassword",
            "FirebaseUser",
            "AuthResult",
            "AuthService.dart",
            "Future<bool> login(LoginUserData userData) async {\n    try {\n      _checkUserDataValidity(userData);\n      final AuthResult authResult= await firebaseAuth.signInWithEmailAndPassword(email: userData.email, password: userData.password);\n      return authResult.user != null;\n    } catch (exception) {\n      return false;\n    }\n  }\n",
            "Navigator",
            "test('Login should work with valid user data', () async {\n      when(\n        firebaseAuthMock.signInWithEmailAndPassword(\n          email: testValidUserData.email,\n          password: testValidUserData.password,\n        )\n      ).thenAnswer(\n        (_) => Future<AuthResultMock>.value(firebaseAuthResultMock)\n      );\n\n      final bool actionSuccess = await authService.login(testValidUserData);\n\n      verify(\n        firebaseAuthMock.signInWithEmailAndPassword(\n          email: testValidUserData.email,\n          password: testValidUserData.password,\n        )\n      ).called(1);\n\n      expect(actionSuccess, true);\n    });\n",
            "(_) => Future<AuthResultMock>.value(firebaseAuthResultMock)\n",
            "AuthServie.dart",
            "return authResult.user != null;\n"
        ]
    },
    {
        "titulo": "With a dart class that has a parameter of type list, how is it possible to make it equatable",
        "score": 3,
        "views": 994,
        "respostas": 1,
        "tags": [
            "testing",
            "flutter",
            "dart",
            "bloc",
            "equatable"
        ],
        "link": "https://stackoverflow.com/questions/59469428/with-a-dart-class-that-has-a-parameter-of-type-list-how-is-it-possible-to-make",
        "conteudo_html": "<p>I'm playing around with the new library bloc_test for flutter and I implemented the following test</p>\n\n<pre><code>blocTest('should return ReservationsLoadSucess when the use case returns a list of reservationsList',\n\n    build: () {\n      when(mockGetReservations(any)).thenAnswer((_) async =&gt; Right(reservationsList));\n      return ReservationBloc(getReservations: mockGetReservations);\n    },\n    act: (bloc) async {\n      bloc.add(ReservationsRequested(user));\n    },\n    expect: [\n      ReservationsInitial(),\n      ReservationsLoadInProgress(),\n      ReservationsLoadSuccess(reservationsList),\n    ],\n  );\n</code></pre>\n\n<p>This is the implementation of ReservationsLoadSuccess</p>\n\n<pre><code>class ReservationsLoadSuccess extends ReservationState {\n  final List&lt;Reservation&gt; list;\n\n  ReservationsLoadSuccess(this.list);\n\n  @override\n  List&lt;Object&gt; get props =&gt; [list];\n}\n</code></pre>\n\n<p>Where ReservationState extends Equatable\nNow, when running the test, you get the following error</p>\n\n<pre><code>should return ReservationsLoadSucess when the use case returns a list of reservationsList:\n\nERROR: Expected: [\n            ReservationsInitial:ReservationsInitial,\n            ReservationsLoadInProgress:ReservationsLoadInProgress,\n            ReservationsLoadSuccess:ReservationsLoadSuccess\n          ]\n  Actual: [\n            ReservationsInitial:ReservationsInitial,\n            ReservationsLoadInProgress:ReservationsLoadInProgress,\n            ReservationsLoadSuccess:ReservationsLoadSuccess\n          ]\n   Which: was ReservationsLoadSuccess:&lt;ReservationsLoadSuccess&gt; instead of ReservationsLoadSuccess:&lt;ReservationsLoadSuccess&gt; at location [2]\n</code></pre>\n\n<p>Basically saying that the state ReservationsLoadSuccess at position 2 in the actual list is not equal to its peer in the expected list.</p>\n\n<p>I tried overriding the == operator in the ReservationsLoadSuccess class as follows</p>\n\n<pre><code>class ReservationsLoadSuccess extends ReservationState {\n  final List&lt;Reservation&gt; list;\n\n  ReservationsLoadSuccess(this.list);\n\n  final Function eq = const ListEquality().equals;\n  @override\n  List&lt;Object&gt; get props =&gt; [];\n\n  @override\n  bool operator ==(Object other) =&gt;\n      identical(this, other) ||\n      other is ReservationsLoadSuccess &amp;&amp;\n          runtimeType == other.runtimeType &amp;&amp;\n          eq(list, other.list);\n}\n</code></pre>\n\n<p>But that didn't seem to work and running the test still outputted the same error. The only way I got it to work is to leave the props method returning an empty list or adding any other dummy variable and pass it to the props list.</p>\n\n<p>Is there any way I can make the class equatable in regards to the list parameter?</p>\n",
        "codigo": [
            "blocTest('should return ReservationsLoadSucess when the use case returns a list of reservationsList',\n\n    build: () {\n      when(mockGetReservations(any)).thenAnswer((_) async => Right(reservationsList));\n      return ReservationBloc(getReservations: mockGetReservations);\n    },\n    act: (bloc) async {\n      bloc.add(ReservationsRequested(user));\n    },\n    expect: [\n      ReservationsInitial(),\n      ReservationsLoadInProgress(),\n      ReservationsLoadSuccess(reservationsList),\n    ],\n  );\n",
            "class ReservationsLoadSuccess extends ReservationState {\n  final List<Reservation> list;\n\n  ReservationsLoadSuccess(this.list);\n\n  @override\n  List<Object> get props => [list];\n}\n",
            "should return ReservationsLoadSucess when the use case returns a list of reservationsList:\n\nERROR: Expected: [\n            ReservationsInitial:ReservationsInitial,\n            ReservationsLoadInProgress:ReservationsLoadInProgress,\n            ReservationsLoadSuccess:ReservationsLoadSuccess\n          ]\n  Actual: [\n            ReservationsInitial:ReservationsInitial,\n            ReservationsLoadInProgress:ReservationsLoadInProgress,\n            ReservationsLoadSuccess:ReservationsLoadSuccess\n          ]\n   Which: was ReservationsLoadSuccess:<ReservationsLoadSuccess> instead of ReservationsLoadSuccess:<ReservationsLoadSuccess> at location [2]\n",
            "class ReservationsLoadSuccess extends ReservationState {\n  final List<Reservation> list;\n\n  ReservationsLoadSuccess(this.list);\n\n  final Function eq = const ListEquality().equals;\n  @override\n  List<Object> get props => [];\n\n  @override\n  bool operator ==(Object other) =>\n      identical(this, other) ||\n      other is ReservationsLoadSuccess &&\n          runtimeType == other.runtimeType &&\n          eq(list, other.list);\n}\n"
        ]
    },
    {
        "titulo": "Flutter&#39;s WidgetTester.pumpAndSettle() does not wait for rendering finished?",
        "score": 1,
        "views": 2998,
        "respostas": 1,
        "tags": [
            "unit-testing",
            "testing",
            "flutter",
            "dart",
            "widget"
        ],
        "link": "https://stackoverflow.com/questions/59339054/flutters-widgettester-pumpandsettle-does-not-wait-for-rendering-finished",
        "conteudo_html": "<p>I have a <code>StatefulWidget</code> which state renders different <code>Widget</code> depending on loading state (Loading -> Loaded/Error):</p>\n\n<pre><code>// widget\nclass ListNotesScreen extends StatefulWidget {\n  static const route = '/listNotes';\n  static navigateTo(BuildContext context, [bool cleanStack = true]) =&gt;\n      Navigator.pushNamedAndRemoveUntil(context, route, (_) =&gt; !cleanStack);\n\n  final String title;\n  final ListNotesUseCase _useCase;\n  final VoidCallback _addNoteCallback;\n  ListNotesScreen(this._useCase, this._addNoteCallback, {Key key, this.title}) : super(key: key);\n\n  @override\n  _ListNotesScreenState createState() =&gt; _ListNotesScreenState();\n}\n\n// state\nclass _ListNotesScreenState extends State&lt;ListNotesScreen&gt; {\n  ListNotesLoadState _state;\n\n  Future&lt;ListNotesResponse&gt; _fetchNotes() async {\n    return widget._useCase.listNotes();\n  }\n\n  @override\n  initState() {\n    super.initState();\n    _loadNotes();\n  }\n\n  _loadNotes() {\n    setState(() {\n      _state = ListNotesLoadingState();\n    });\n\n    _fetchNotes().then((response) {\n      setState(() {\n        _state = ListNotesLoadedState(response.notes);\n      });\n    }).catchError((error) {\n      setState(() {\n        _state = ListNotesLoadErrorState(error);\n      });\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) =&gt; Scaffold(\n    appBar: AppBar(\n      title: Text('Notes list'),\n      actions: &lt;Widget&gt;[\n        IconButton(icon: Icon(Icons.add), onPressed: widget._addNoteCallback),\n        IconButton(icon: Icon(Icons.refresh), onPressed: () =&gt; _loadNotes())\n      ],\n    ),\n    body: _state.getWidget());\n}\n\n// loading states\n// State:\n@sealed\nabstract class ListNotesLoadState {\n  Widget getWidget();\n}\n\n// Loading\nclass ListNotesLoadingState extends ListNotesLoadState {\n  @override\n  Widget getWidget() =&gt; Center(child: CircularProgressIndicator(value: null));\n}\n\n// Loaded\nclass ListNotesLoadedState extends ListNotesLoadState {\n  final List&lt;Note&gt; _notes;\n  ListNotesLoadedState(this._notes);\n\n  @override\n  Widget getWidget() =&gt; ListView.builder(\n    itemBuilder: (_, int index) =&gt; NoteItemWidget(this._notes[index]),\n    itemCount: this._notes.length,\n    padding: EdgeInsets.all(18.0));\n}\n</code></pre>\n\n<p>Here is the test for the widget:</p>\n\n<pre><code>void main() {\n  testWidgets('Notes list is shown', (WidgetTester tester) async {\n    final title1 = 'Title1';\n    final title2 = 'Title2';\n    final body1 = 'Body1';\n    final body2 = 'Body2';\n    var notes = [\n      Note('1', title1, body1),\n      Note('2', title2, body2),\n    ];\n    final listUseCase = TestListNotesInteractor(notes);\n    final widget = ListNotesScreen(listUseCase, null, title: 'List notes');\n    await tester.pumpWidget(widget);\n    await tester.pumpAndSettle();\n\n    expect(find.text('someInvalidString'), findsNothing);\n    expect(find.text(title1), findsOneWidget);\n    expect(find.text(title2), findsOneWidget);\n    expect(find.text(body1), findsOneWidget);\n    expect(find.text(body2), findsOneWidget);\n\n    // TODO: fix the test (tested manually and it works)\n  });\n}\n</code></pre>\n\n<p>So widget tester is expected to wait until the state it set to loading in <code>initState()</code>, then <code>_loadNotes</code> moves it to <code>ListNotesLoadedState</code> and <code>ListNotesLoadedState.getWidget()</code> to return <code>ListView</code> with expected string (<code>NoteItemWidget</code> root and few <code>Text</code> with expected string).</p>\n\n<p>However the test fails. What's the reason (i was able to use test interactors in the app and visually see expected texts)? How can i analyze the actual Widgets tree on test failure?</p>\n\n<p>I tend to think that WidgetTester did not wait for <code>Future</code> to be completed (though it's expected to be mocked and be sync behind the scenes, please correct me).</p>\n\n<p>One can find the <a href=\"https://github.com/4ntoine/NotesClientApp/tree/issue-6-flutter/app-flutter/lib\" rel=\"nofollow noreferrer\">project on Github</a> (make sure to call <code>flutter packages pub run build_runner build</code> to generate json de-/serialize code).</p>\n",
        "codigo": [
            "StatefulWidget",
            "Widget",
            "// widget\nclass ListNotesScreen extends StatefulWidget {\n  static const route = '/listNotes';\n  static navigateTo(BuildContext context, [bool cleanStack = true]) =>\n      Navigator.pushNamedAndRemoveUntil(context, route, (_) => !cleanStack);\n\n  final String title;\n  final ListNotesUseCase _useCase;\n  final VoidCallback _addNoteCallback;\n  ListNotesScreen(this._useCase, this._addNoteCallback, {Key key, this.title}) : super(key: key);\n\n  @override\n  _ListNotesScreenState createState() => _ListNotesScreenState();\n}\n\n// state\nclass _ListNotesScreenState extends State<ListNotesScreen> {\n  ListNotesLoadState _state;\n\n  Future<ListNotesResponse> _fetchNotes() async {\n    return widget._useCase.listNotes();\n  }\n\n  @override\n  initState() {\n    super.initState();\n    _loadNotes();\n  }\n\n  _loadNotes() {\n    setState(() {\n      _state = ListNotesLoadingState();\n    });\n\n    _fetchNotes().then((response) {\n      setState(() {\n        _state = ListNotesLoadedState(response.notes);\n      });\n    }).catchError((error) {\n      setState(() {\n        _state = ListNotesLoadErrorState(error);\n      });\n    });\n  }\n\n  @override\n  Widget build(BuildContext context) => Scaffold(\n    appBar: AppBar(\n      title: Text('Notes list'),\n      actions: <Widget>[\n        IconButton(icon: Icon(Icons.add), onPressed: widget._addNoteCallback),\n        IconButton(icon: Icon(Icons.refresh), onPressed: () => _loadNotes())\n      ],\n    ),\n    body: _state.getWidget());\n}\n\n// loading states\n// State:\n@sealed\nabstract class ListNotesLoadState {\n  Widget getWidget();\n}\n\n// Loading\nclass ListNotesLoadingState extends ListNotesLoadState {\n  @override\n  Widget getWidget() => Center(child: CircularProgressIndicator(value: null));\n}\n\n// Loaded\nclass ListNotesLoadedState extends ListNotesLoadState {\n  final List<Note> _notes;\n  ListNotesLoadedState(this._notes);\n\n  @override\n  Widget getWidget() => ListView.builder(\n    itemBuilder: (_, int index) => NoteItemWidget(this._notes[index]),\n    itemCount: this._notes.length,\n    padding: EdgeInsets.all(18.0));\n}\n",
            "void main() {\n  testWidgets('Notes list is shown', (WidgetTester tester) async {\n    final title1 = 'Title1';\n    final title2 = 'Title2';\n    final body1 = 'Body1';\n    final body2 = 'Body2';\n    var notes = [\n      Note('1', title1, body1),\n      Note('2', title2, body2),\n    ];\n    final listUseCase = TestListNotesInteractor(notes);\n    final widget = ListNotesScreen(listUseCase, null, title: 'List notes');\n    await tester.pumpWidget(widget);\n    await tester.pumpAndSettle();\n\n    expect(find.text('someInvalidString'), findsNothing);\n    expect(find.text(title1), findsOneWidget);\n    expect(find.text(title2), findsOneWidget);\n    expect(find.text(body1), findsOneWidget);\n    expect(find.text(body2), findsOneWidget);\n\n    // TODO: fix the test (tested manually and it works)\n  });\n}\n",
            "initState()",
            "_loadNotes",
            "ListNotesLoadedState",
            "ListNotesLoadedState.getWidget()",
            "ListView",
            "NoteItemWidget",
            "Text",
            "Future",
            "flutter packages pub run build_runner build"
        ]
    },
    {
        "titulo": "How to test not equal with matcher in flutter",
        "score": 51,
        "views": 27304,
        "respostas": 2,
        "tags": [
            "testing",
            "flutter",
            "dart",
            "matcher"
        ],
        "link": "https://stackoverflow.com/questions/59100937/how-to-test-not-equal-with-matcher-in-flutter",
        "conteudo_html": "<p>I'm doing testing on render objects in Flutter. I'd like to check for inequality like this (simplified):</p>\n\n<pre><code>testWidgets('render object heights not equal', (WidgetTester tester) async {\n\n  final renderObjectOneHeight = 10;\n  final renderObjectTwoHeight = 11;\n\n  expect(renderObjectOneHeight, notEqual(renderObjectTwoHeight));\n});\n</code></pre>\n\n<p>I made up <code>notEqual</code> because it doesn't exist. This doesn't work either:</p>\n\n<ul>\n<li><code>!equals</code></li>\n</ul>\n\n<p><em>I found a solution that works so I am posting my answer below Q&amp;A style. I welcome any better solutions, though.</em></p>\n",
        "codigo": [
            "testWidgets('render object heights not equal', (WidgetTester tester) async {\n\n  final renderObjectOneHeight = 10;\n  final renderObjectTwoHeight = 11;\n\n  expect(renderObjectOneHeight, notEqual(renderObjectTwoHeight));\n});\n",
            "notEqual",
            "!equals"
        ]
    },
    {
        "titulo": "How to test file upload with Aqueduct harness?",
        "score": 0,
        "views": 351,
        "respostas": 2,
        "tags": [
            "testing",
            "dart",
            "aqueduct"
        ],
        "link": "https://stackoverflow.com/questions/58839496/how-to-test-file-upload-with-aqueduct-harness",
        "conteudo_html": "<p>I followed the Aqueduct tutorial for creating tests, but it was missing one example that I am in a dire need; I am unable to test a file uploading endpoint with my controller.</p>\n\n<p>I have implemented a controller as such:</p>\n\n<pre><code>class FileController extends ResourceController {\n\n  FileController() {\n    acceptedContentTypes = [ContentType(\"multipart\", \"form-data\")];\n  }\n\n  @Operation.post()\n  Future&lt;Response&gt; postForm() async {\n\n    final transformer = MimeMultipartTransformer(request.raw.headers.contentType.parameters[\"boundary\"]);\n    final bodyStream = Stream.fromIterable([await request.body.decode&lt;List&lt;int&gt;&gt;()]);\n    final parts = await transformer.bind(bodyStream).toList();\n\n    for (var part in parts) {\n      final headers = part.headers;\n\n      HttpMultipartFormData multipart = HttpMultipartFormData.parse(part);\n      final content = multipart.cast&lt;List&lt;int&gt;&gt;();\n\n      final filePath = \"uploads/test.txt\";\n\n      await new File(filePath).create(recursive: true);\n\n      IOSink sink = File(filePath).openWrite();\n      await content.forEach(sink.add);\n\n      await sink.flush();\n      await sink.close();\n    }\n\n    return Response.ok({});   \n  }\n}\n</code></pre>\n\n<p>And it works fine when using Postman for a file upload.</p>\n\n<p>Now I am trying to write a test for this endpoint:</p>\n\n<pre><code>test(\"POST /upload-file uploads a file to the server\", () async {\n\n    final file = File('test.txt');\n    final sink = file.openWrite();\n    sink.write('test');\n    await sink.close();\n\n    final bytes = file.readAsBytesSync();\n\n    harness.agent.headers['Content-Type'] = 'multipart/form-data; boundary=MultipartBoundry';\n    harness.agent.headers['Content-Disposition'] = 'form-data; name=\"file\"; filename=\"test.txt\"';\n\n\n    final response = await harness.agent.post(\"/upload-file\", body: bytes);\n\n    expectResponse(response, 200);\n  });\n</code></pre>\n\n<p>And get this in the vscode debugger:</p>\n\n<pre><code>Expected: --- HTTP Response ---\n          - Status code must be 200\n          - Headers can be anything\n          - Body can be anything\n          ---------------------\n  Actual: TestResponse:&lt;-----------\n          - Status code is 415\n          - Headers are the following:\n            - x-frame-options: SAMEORIGIN\n            - x-xss-protection: 1; mode=block\n            - x-content-type-options: nosniff\n            - server: aqueduct/1\n            - content-length: 0\n          - Body is empty\n          -------------------------\n          &gt;\n   Which: Status codes are different. Expected: 200. Actual: 415\n</code></pre>\n",
        "codigo": [
            "class FileController extends ResourceController {\n\n  FileController() {\n    acceptedContentTypes = [ContentType(\"multipart\", \"form-data\")];\n  }\n\n  @Operation.post()\n  Future<Response> postForm() async {\n\n    final transformer = MimeMultipartTransformer(request.raw.headers.contentType.parameters[\"boundary\"]);\n    final bodyStream = Stream.fromIterable([await request.body.decode<List<int>>()]);\n    final parts = await transformer.bind(bodyStream).toList();\n\n    for (var part in parts) {\n      final headers = part.headers;\n\n      HttpMultipartFormData multipart = HttpMultipartFormData.parse(part);\n      final content = multipart.cast<List<int>>();\n\n      final filePath = \"uploads/test.txt\";\n\n      await new File(filePath).create(recursive: true);\n\n      IOSink sink = File(filePath).openWrite();\n      await content.forEach(sink.add);\n\n      await sink.flush();\n      await sink.close();\n    }\n\n    return Response.ok({});   \n  }\n}\n",
            "test(\"POST /upload-file uploads a file to the server\", () async {\n\n    final file = File('test.txt');\n    final sink = file.openWrite();\n    sink.write('test');\n    await sink.close();\n\n    final bytes = file.readAsBytesSync();\n\n    harness.agent.headers['Content-Type'] = 'multipart/form-data; boundary=MultipartBoundry';\n    harness.agent.headers['Content-Disposition'] = 'form-data; name=\"file\"; filename=\"test.txt\"';\n\n\n    final response = await harness.agent.post(\"/upload-file\", body: bytes);\n\n    expectResponse(response, 200);\n  });\n",
            "Expected: --- HTTP Response ---\n          - Status code must be 200\n          - Headers can be anything\n          - Body can be anything\n          ---------------------\n  Actual: TestResponse:<-----------\n          - Status code is 415\n          - Headers are the following:\n            - x-frame-options: SAMEORIGIN\n            - x-xss-protection: 1; mode=block\n            - x-content-type-options: nosniff\n            - server: aqueduct/1\n            - content-length: 0\n          - Body is empty\n          -------------------------\n          >\n   Which: Status codes are different. Expected: 200. Actual: 415\n"
        ]
    },
    {
        "titulo": "How to test a callback function in a Flutter widget",
        "score": 4,
        "views": 4834,
        "respostas": 2,
        "tags": [
            "testing",
            "flutter",
            "dart",
            "widget"
        ],
        "link": "https://stackoverflow.com/questions/58633492/how-to-test-a-callback-function-in-a-flutter-widget",
        "conteudo_html": "<p>I have a custom Flutter widget, RadioSelect, which accepts an array of options and a callback function when one of those options is pressed. The callback is called with the selected option passed as it's only parameter. I'm trying to write a test which verifies that the callback was called and checks that the returned parameter is correct but I'm not sure how to structure it. What's a sensible way to check that a standalone callback function was called?</p>\n\n<pre><code>  await tester.pumpWidget(\n    StatefulBuilder(\n      builder: (BuildContext context, StateSetter setState) {\n        return MaterialApp(\n          home:  RadioSelect(\n                                [\"option1\",\"option2\", \"option3\"], \n                                // callback function passed here\n                                ),\n            );\n      },\n    ),\n  );\n\nexpect(find.text('option1'), findsOneWidget);\n\nawait tester.press(find.text('option2'));\n\nawait tester.pump();\n\n// test for callback here\n</code></pre>\n",
        "codigo": [
            "  await tester.pumpWidget(\n    StatefulBuilder(\n      builder: (BuildContext context, StateSetter setState) {\n        return MaterialApp(\n          home:  RadioSelect(\n                                [\"option1\",\"option2\", \"option3\"], \n                                // callback function passed here\n                                ),\n            );\n      },\n    ),\n  );\n\nexpect(find.text('option1'), findsOneWidget);\n\nawait tester.press(find.text('option2'));\n\nawait tester.pump();\n\n// test for callback here\n"
        ]
    },
    {
        "titulo": "Mockito: Unable to add data to stream; when i call stream sink function it throws function call on null",
        "score": 0,
        "views": 336,
        "respostas": 1,
        "tags": [
            "testing",
            "flutter",
            "dart",
            "mockito"
        ],
        "link": "https://stackoverflow.com/questions/58534516/mockito-unable-to-add-data-to-stream-when-i-call-stream-sink-function-it-throw",
        "conteudo_html": "<p>Unable to add data to stream while testing using mockito. When I call stream sink function then it throws function call on null.\nThe auth.changeShowProgress(true) return function call on null. How can I add data to the stream in the bloc?</p>\n\n<pre><code>testWidgets('Correct email and password gives success',\n  (WidgetTester widgetTester) async {\nfinal AuthBloc auth = MockAuthBloc();\n\nwhen(auth.showProgress).thenReturn(null);\n\nwhen(auth.changeShowProgress(true)).thenAnswer((_) {\n  Future.value(null);\n});\n\nawait widgetTester.pumpWidget(\n  makeTestableWidget(\n    authbloc: auth,\n    child: MaterialApp(home: LoginPage()),\n  ),\n);\n\nawait widgetTester.pump(Duration.zero);\n\nverify(auth.showProgress).called(1);\n\nexpect(find.byType(CircularProgressIndicator), findsOneWidget);\n\nawait widgetTester.enterText(\n    find.bySemanticsLabel(\"Email address\"), \"admin@admin.com\");\n\nawait widgetTester.enterText(find.bySemanticsLabel(\"Password\"), \"password\");\n\nawait widgetTester.tap(find.widgetWithText(PRaisedButton, \"Login\"));\n\nawait widgetTester.pump();\n});\n</code></pre>\n",
        "codigo": [
            "testWidgets('Correct email and password gives success',\n  (WidgetTester widgetTester) async {\nfinal AuthBloc auth = MockAuthBloc();\n\nwhen(auth.showProgress).thenReturn(null);\n\nwhen(auth.changeShowProgress(true)).thenAnswer((_) {\n  Future.value(null);\n});\n\nawait widgetTester.pumpWidget(\n  makeTestableWidget(\n    authbloc: auth,\n    child: MaterialApp(home: LoginPage()),\n  ),\n);\n\nawait widgetTester.pump(Duration.zero);\n\nverify(auth.showProgress).called(1);\n\nexpect(find.byType(CircularProgressIndicator), findsOneWidget);\n\nawait widgetTester.enterText(\n    find.bySemanticsLabel(\"Email address\"), \"admin@admin.com\");\n\nawait widgetTester.enterText(find.bySemanticsLabel(\"Password\"), \"password\");\n\nawait widgetTester.tap(find.widgetWithText(PRaisedButton, \"Login\"));\n\nawait widgetTester.pump();\n});\n"
        ]
    },
    {
        "titulo": "Unit testing a stream that returns a stream",
        "score": 2,
        "views": 509,
        "respostas": 1,
        "tags": [
            "testing",
            "flutter",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/58105343/unit-testing-a-stream-that-returns-a-stream",
        "conteudo_html": "<p>I'm currently trying to unit test my BLoC Flutter code but I've got a failed test because of what I'll describe as a 'nested' stream.</p>\n\n<p>Here is the test code:</p>\n\n<pre><code>test('fetch carbon events successfully', () async {\n      final List&lt;CarbonAction&gt; actions = [];\n      final List expected = [\n        StateA(),\n        StateB(),\n        StateC()\n      ];\n\n\n      when(repo.getActions()).thenAnswer((_) =&gt; Stream.value(actions));\n\n      expectLater(\n        homeBloc.state,\n        emitsInOrder(expected),\n      );\n\n      homeBloc.dispatch(FetchActionsEvent());\n    });\n</code></pre>\n\n<p>It is failing with this error:</p>\n\n<pre><code>Expected: should do the following in order:\n          • emit an event that StateA:&lt;StateA&gt;\n          • emit an event that StateB:&lt;StateB&gt;\n          • emit an event that StateC:&lt;StateC&gt;\n  Actual: &lt;Instance of 'BehaviorSubject&lt;State&gt;'&gt;\n   Which: emitted • StateA\n                  • StateB\n                  • StateC\n            which didn't emit an event that StateC:&lt;StateC&gt;\n</code></pre>\n\n<p>I believe this is happening because StateC actually comes a stream that is emitted using <code>async*</code> and <code>yield*</code>. In my code all of this is working currently. </p>\n",
        "codigo": [
            "test('fetch carbon events successfully', () async {\n      final List<CarbonAction> actions = [];\n      final List expected = [\n        StateA(),\n        StateB(),\n        StateC()\n      ];\n\n\n      when(repo.getActions()).thenAnswer((_) => Stream.value(actions));\n\n      expectLater(\n        homeBloc.state,\n        emitsInOrder(expected),\n      );\n\n      homeBloc.dispatch(FetchActionsEvent());\n    });\n",
            "Expected: should do the following in order:\n          • emit an event that StateA:<StateA>\n          • emit an event that StateB:<StateB>\n          • emit an event that StateC:<StateC>\n  Actual: <Instance of 'BehaviorSubject<State>'>\n   Which: emitted • StateA\n                  • StateB\n                  • StateC\n            which didn't emit an event that StateC:<StateC>\n",
            "async*",
            "yield*"
        ]
    },
    {
        "titulo": "Flutter Mockito verify that callback passed to widget is called",
        "score": 7,
        "views": 3770,
        "respostas": 2,
        "tags": [
            "testing",
            "flutter",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/58045775/flutter-mockito-verify-that-callback-passed-to-widget-is-called",
        "conteudo_html": "<p>I have a widget that takes a callback which is called when a button is pressed. I am trying to test that the callback is correctly invoked by the button.</p>\n\n<p>I've tried mocking a <code>Function</code> class:</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>class MockCallback extends Mock implements Function {\n  call() {}\n}\n</code></pre>\n\n<p>Then passing an instance of the mock class to my widget and simulating a tap:</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>final mocked = MockCallback();\nawait tester.pumpWidget(\n  MyWidget(myCallback: mocked),\n);\n\nfinal clearButtonFinder = find.byType(IconButton);\nawait tester.tap(clearButtonFinder);\n\nverify(mocked()).called(1);\n</code></pre>\n\n<p>This results in an error on the <code>verify</code> call saying <code>Used on a non-mockito object</code>. If I put a print statement inside the mocked <code>call</code>, I can see that the tap is indeed calling it.</p>\n\n<p>How can I verify that the callback passed to my widget is getting called once when the button is tapped?</p>\n",
        "codigo": [
            "Function",
            "class MockCallback extends Mock implements Function {\n  call() {}\n}\n",
            "final mocked = MockCallback();\nawait tester.pumpWidget(\n  MyWidget(myCallback: mocked),\n);\n\nfinal clearButtonFinder = find.byType(IconButton);\nawait tester.tap(clearButtonFinder);\n\nverify(mocked()).called(1);\n",
            "verify",
            "Used on a non-mockito object",
            "call"
        ]
    },
    {
        "titulo": "Why is window.open() returning null in unit test?",
        "score": 0,
        "views": 283,
        "respostas": 0,
        "tags": [
            "unit-testing",
            "testing",
            "dart",
            "flutter-web"
        ],
        "link": "https://stackoverflow.com/questions/58011287/why-is-window-open-returning-null-in-unit-test",
        "conteudo_html": "<p>I'm writing a unit test for a method that launches a browser window when a user clicks a button.</p>\n\n<p>The test fails because <code>null</code> is returned.</p>\n\n<p>When running the test no browser window is opened.</p>\n\n<p>When using the app it works as expected.</p>\n\n<p>I've seen a lot of the other SO questions regarding window.open() returning null or otherwise not doing what the OP wanted, but these all have to do with getting the browser to do specific things. The code I'm testing does what I want it to do when used in the web app, but I'm not able to write a passing unit test for it. This unit test is a step along the way to fixing a problem that occurs in the step after this method runs, which is why I want to understand why this test isn't passing.</p>\n\n<p>The top answer <a href=\"https://stackoverflow.com/questions/18401331/window-open-returns-null-and-fails-in-inline-script-but-works-from-console\">here</a> lead me to think that the browser might be blocking a new window because the request is coming from outside the browser, which would result in a <code>null</code> return. I disabled popup blocking in Chrome just in case.</p>\n\n<p>This is main.dart:</p>\n\n<pre><code>import 'package:flutter_web/material.dart';\nimport 'dart:html' as html;\n\nvoid main() =&gt; runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Minimal, Reproducible Example',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n    );\n  }\n}\n\nclass PrintReports extends StatelessWidget {\n\n  const PrintReports({Key key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        RaisedButton(\n          child: Text(\n            \"Print A Form . . .\"\n          ),\n          color: Colors.blue,\n          onPressed: () =&gt; { \n            // generate form . . .\n            // request submission . . .\n            // launch browser window . . .\n          },\n        ),\n      ],\n    );\n  }\n\n  Future launchURL(String download_url) \n  async {\n    try {\n      await html.window.open(download_url, \"Get_Submission\");\n    } catch (e) {\n      print(e);\n    }\n  }\n}\n</code></pre>\n\n<p>This is test.dart:</p>\n\n<pre><code>import 'dart:html';\n\nimport 'package:flutter_tests/main.dart';\nimport 'package:test/test.dart';\n\nvoid main(){\n  test(\"_launchURL launches browser at correct URL\", () async {\n    // Arrange: setup the test\n    PrintReports printReports = PrintReports();\n\n    // Act\n    WindowBase window = await printReports.launchURL(\"https://someurl.com/download\");\n\n    // Assert\n    expect(window, WindowBase);\n  });\n}\n</code></pre>\n\n<p>To run the test I'm using this terminal command: <code>pub run test test/print_reports_card_test.dart -p chrome</code>.</p>\n\n<p>The current test results are:</p>\n\n<pre><code>00:14 +2 -1: _launchURL launches browser at correct URL [E]                                                                                      \n  Expected: Type:&lt;WindowBase&gt;\n    Actual: &lt;null&gt;\n\n[ . . . I can post this redacted output if you think it might be relevant . . . ]\n\n00:14 +2 -1: Some tests failed. \n</code></pre>\n",
        "codigo": [
            "null",
            "null",
            "import 'package:flutter_web/material.dart';\nimport 'dart:html' as html;\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  build(BuildContext context) {\n    return MaterialApp(\n      debugShowCheckedModeBanner: false,\n      title: 'Minimal, Reproducible Example',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n    );\n  }\n}\n\nclass PrintReports extends StatelessWidget {\n\n  const PrintReports({Key key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return Column(\n      children: [\n        RaisedButton(\n          child: Text(\n            \"Print A Form . . .\"\n          ),\n          color: Colors.blue,\n          onPressed: () => { \n            // generate form . . .\n            // request submission . . .\n            // launch browser window . . .\n          },\n        ),\n      ],\n    );\n  }\n\n  Future launchURL(String download_url) \n  async {\n    try {\n      await html.window.open(download_url, \"Get_Submission\");\n    } catch (e) {\n      print(e);\n    }\n  }\n}\n",
            "import 'dart:html';\n\nimport 'package:flutter_tests/main.dart';\nimport 'package:test/test.dart';\n\nvoid main(){\n  test(\"_launchURL launches browser at correct URL\", () async {\n    // Arrange: setup the test\n    PrintReports printReports = PrintReports();\n\n    // Act\n    WindowBase window = await printReports.launchURL(\"https://someurl.com/download\");\n\n    // Assert\n    expect(window, WindowBase);\n  });\n}\n",
            "pub run test test/print_reports_card_test.dart -p chrome",
            "00:14 +2 -1: _launchURL launches browser at correct URL [E]                                                                                      \n  Expected: Type:<WindowBase>\n    Actual: <null>\n\n[ . . . I can post this redacted output if you think it might be relevant . . . ]\n\n00:14 +2 -1: Some tests failed. \n"
        ]
    },
    {
        "titulo": "Testing the bloc state will pass even if some properties are not the same",
        "score": 0,
        "views": 971,
        "respostas": 1,
        "tags": [
            "testing",
            "flutter",
            "dart",
            "bloc"
        ],
        "link": "https://stackoverflow.com/questions/57772406/testing-the-bloc-state-will-pass-even-if-some-properties-are-not-the-same",
        "conteudo_html": "<p>This is <code>mapEventToState</code> of <code>MyBloc</code>:</p>\n\n<pre><code>@override\n  Stream&lt;MyBlocState&gt; mapEventToState(MyBlocEvent event) async* {\n    if (event is MyBlocInitialize) {\n      yield MyBlocStateInitialized(event.something);\n    }\n</code></pre>\n\n<p>where the states are defined like:</p>\n\n<pre><code>abstract class MyBlocState extends Equatable {\n  EnterCredentialsState([List props = const []]) : super(props)\n}\n\nclass MyBlocStateInitialized extends MyBlocState {\n  final String _something;\n  MyBlocStateInitialized(this._something);}\n</code></pre>\n\n<p>and the event like:</p>\n\n<pre><code>abstract class MyBlocEvent {}\n\nclass MyBlocEventInizialize extends MyBlocEvent{\n  final string something;\n  MyBlocEventInitialize(this.something);\n}\n</code></pre>\n\n<p>Now, this is my test:</p>\n\n<pre><code>test('Should return MyBlocInitialized with a defined String', () {\n    String _somethingString = 'Something';\n\nexpectLater(\n_myBloc.state,emitsInOrder([\n          MyBlocsStateUninitialized(),\n          MyBlocStateInitialized(_somethingString)\n        ]));\n\n    _myBloc.dispatch(MyBlocEventInitialize(_somethingString);\n}\n</code></pre>\n\n<p>The problem with this test is that it will just check if the bloc will yield <code>MyBlocsStateUninitialized</code> and <code>MyBlocStateInitialized</code>, but it will not check the string inside <code>MyBlocStateInitialized</code>. Actually I could also change in </p>\n\n<pre><code>expectLater(\n_myBloc.state,emitsInOrder([\n          MyBlocsStateUninitialized(),\n          MyBlocInitialized('WRONG')\n        ]));\n\n    _myBloc.dispatch(MyBlocEventInitialize(_somethingString);\n}\n</code></pre>\n\n<p>and it would still pass.</p>\n",
        "codigo": [
            "mapEventToState",
            "MyBloc",
            "@override\n  Stream<MyBlocState> mapEventToState(MyBlocEvent event) async* {\n    if (event is MyBlocInitialize) {\n      yield MyBlocStateInitialized(event.something);\n    }\n",
            "abstract class MyBlocState extends Equatable {\n  EnterCredentialsState([List props = const []]) : super(props)\n}\n\nclass MyBlocStateInitialized extends MyBlocState {\n  final String _something;\n  MyBlocStateInitialized(this._something);}\n",
            "abstract class MyBlocEvent {}\n\nclass MyBlocEventInizialize extends MyBlocEvent{\n  final string something;\n  MyBlocEventInitialize(this.something);\n}\n",
            "test('Should return MyBlocInitialized with a defined String', () {\n    String _somethingString = 'Something';\n\nexpectLater(\n_myBloc.state,emitsInOrder([\n          MyBlocsStateUninitialized(),\n          MyBlocStateInitialized(_somethingString)\n        ]));\n\n    _myBloc.dispatch(MyBlocEventInitialize(_somethingString);\n}\n",
            "MyBlocsStateUninitialized",
            "MyBlocStateInitialized",
            "MyBlocStateInitialized",
            "expectLater(\n_myBloc.state,emitsInOrder([\n          MyBlocsStateUninitialized(),\n          MyBlocInitialized('WRONG')\n        ]));\n\n    _myBloc.dispatch(MyBlocEventInitialize(_somethingString);\n}\n"
        ]
    },
    {
        "titulo": "Flutter integration test - Check icon type has changed when pressing list row",
        "score": 1,
        "views": 1954,
        "respostas": 1,
        "tags": [
            "testing",
            "flutter",
            "dart",
            "integration-testing"
        ],
        "link": "https://stackoverflow.com/questions/57628640/flutter-integration-test-check-icon-type-has-changed-when-pressing-list-row",
        "conteudo_html": "<p>I'm trying out flutter and I've basically followed along with the getting started Codelabs</p>\n\n<ul>\n<li><a href=\"https://flutter.dev/docs/get-started/codelab\" rel=\"nofollow noreferrer\">https://flutter.dev/docs/get-started/codelab</a></li>\n<li><a href=\"https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/#0\" rel=\"nofollow noreferrer\">https://codelabs.developers.google.com/codelabs/first-flutter-app-pt2/#0</a></li>\n</ul>\n\n<p>But I'm attempting to add some integration tests to it. Basically what I want is to check if the icon is <code>Icons.favourite</code> when the list row is pressed. All other examples I've come across see only checks for text on a screen. Heres the test file:</p>\n\n<pre><code>import 'package:flutter_driver/flutter_driver.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  group('My App', () {\n    final firstListItem = find.byValueKey('list_title_0');\n\n    FlutterDriver driver;\n\n    setUpAll(() async {\n      driver = await FlutterDriver.connect();\n    });\n\n    tearDownAll(() async {\n      if (driver != null) {\n        driver.close();\n      }\n    });\n\n    test('name is favourited', () async {\n      await driver.tap(firstListItem);\n\n      final SerializableFinder firstFavourite = find.byValueKey('favourite_0_saved');\n\n      await driver.waitFor(firstFavourite);\n\n      // not sure what to expect for here..\n    });\n  });\n}\n</code></pre>\n\n<p>Below is the code for the app. It's Basically the codelabs code. The only change I've made is the addition of <code>key</code> to <code>Icon</code> so I can use it for the finder during testing.</p>\n\n<pre><code>import 'package:flutter/material.dart';\nimport 'package:english_words/english_words.dart';\n\nvoid main() =&gt; runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Startup Name Generator',\n      home: RandomWords(),\n    );\n  }\n}\n\nclass RandomWords extends StatefulWidget {\n  @override\n  RandomWordsState createState() =&gt; RandomWordsState();\n}\n\nclass RandomWordsState extends State&lt;RandomWords&gt; {\n  final _suggestions = &lt;WordPair&gt;[];\n  final Set&lt;WordPair&gt; _saved = Set&lt;WordPair&gt;();\n  final _biggerFont = const TextStyle(fontSize: 18.0);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Startup Name Generator'),\n        actions: &lt;Widget&gt;[\n          IconButton(icon: Icon(Icons.list), onPressed: _pushSaved),\n        ],\n      ),\n      body: _buildSuggestions(),\n    );\n  }\n\n  void _pushSaved() {\n    Navigator.of(context).push(\n      MaterialPageRoute&lt;void&gt;(builder: \n        (BuildContext context) {\n          final Iterable&lt;ListTile&gt; tiles = _saved.map((WordPair pair) {\n            return ListTile(\n              title: Text(\n                pair.asPascalCase,\n                style: _biggerFont,\n              ),\n            );\n          });\n          final List&lt;Widget&gt; divided = ListTile.divideTiles(\n            context: context,\n            tiles: tiles\n          ).toList();\n\n          return Scaffold(\n            appBar: AppBar(\n              title: Text('Saved Suggestions'),\n            ),\n            body: ListView(children: divided),\n          );\n        }\n      )\n    );\n  }\n\n  Widget _buildSuggestions() {\n    return ListView.builder(\n      padding: const EdgeInsets.all(16.0),\n      itemBuilder: (context, i) {\n        if (i.isOdd) return Divider();\n\n        final index = i ~/ 2;\n        if (index &gt;= _suggestions.length) {\n          _suggestions.addAll(generateWordPairs().take(10));\n        }\n        return _buildRow(_suggestions[index], i);\n      },\n    );\n  }\n\n  Widget _buildRow(WordPair pair, int i) {\n    final bool alreadySaved = _saved.contains(pair);\n\n    return ListTile(\n      title: Text(\n        pair.asPascalCase,\n        style: _biggerFont,\n      ),\n      key: Key('list_title_$i'),\n      trailing: Icon(\n        alreadySaved ? Icons.favorite : Icons.favorite_border,\n        color: alreadySaved ? Colors.red : null,\n        key: alreadySaved ? Key('favourite_${i}_saved') : Key('favourite_${i}_unsaved'),\n      ),\n      onTap: () {\n        setState(() {\n          if (alreadySaved) {\n            _saved.remove(pair);\n          } else {\n            _saved.add(pair);\n          }\n        });\n      },\n    );\n  }\n}\n</code></pre>\n",
        "codigo": [
            "Icons.favourite",
            "import 'package:flutter_driver/flutter_driver.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  group('My App', () {\n    final firstListItem = find.byValueKey('list_title_0');\n\n    FlutterDriver driver;\n\n    setUpAll(() async {\n      driver = await FlutterDriver.connect();\n    });\n\n    tearDownAll(() async {\n      if (driver != null) {\n        driver.close();\n      }\n    });\n\n    test('name is favourited', () async {\n      await driver.tap(firstListItem);\n\n      final SerializableFinder firstFavourite = find.byValueKey('favourite_0_saved');\n\n      await driver.waitFor(firstFavourite);\n\n      // not sure what to expect for here..\n    });\n  });\n}\n",
            "key",
            "Icon",
            "import 'package:flutter/material.dart';\nimport 'package:english_words/english_words.dart';\n\nvoid main() => runApp(MyApp());\n\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Startup Name Generator',\n      home: RandomWords(),\n    );\n  }\n}\n\nclass RandomWords extends StatefulWidget {\n  @override\n  RandomWordsState createState() => RandomWordsState();\n}\n\nclass RandomWordsState extends State<RandomWords> {\n  final _suggestions = <WordPair>[];\n  final Set<WordPair> _saved = Set<WordPair>();\n  final _biggerFont = const TextStyle(fontSize: 18.0);\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: Text('Startup Name Generator'),\n        actions: <Widget>[\n          IconButton(icon: Icon(Icons.list), onPressed: _pushSaved),\n        ],\n      ),\n      body: _buildSuggestions(),\n    );\n  }\n\n  void _pushSaved() {\n    Navigator.of(context).push(\n      MaterialPageRoute<void>(builder: \n        (BuildContext context) {\n          final Iterable<ListTile> tiles = _saved.map((WordPair pair) {\n            return ListTile(\n              title: Text(\n                pair.asPascalCase,\n                style: _biggerFont,\n              ),\n            );\n          });\n          final List<Widget> divided = ListTile.divideTiles(\n            context: context,\n            tiles: tiles\n          ).toList();\n\n          return Scaffold(\n            appBar: AppBar(\n              title: Text('Saved Suggestions'),\n            ),\n            body: ListView(children: divided),\n          );\n        }\n      )\n    );\n  }\n\n  Widget _buildSuggestions() {\n    return ListView.builder(\n      padding: const EdgeInsets.all(16.0),\n      itemBuilder: (context, i) {\n        if (i.isOdd) return Divider();\n\n        final index = i ~/ 2;\n        if (index >= _suggestions.length) {\n          _suggestions.addAll(generateWordPairs().take(10));\n        }\n        return _buildRow(_suggestions[index], i);\n      },\n    );\n  }\n\n  Widget _buildRow(WordPair pair, int i) {\n    final bool alreadySaved = _saved.contains(pair);\n\n    return ListTile(\n      title: Text(\n        pair.asPascalCase,\n        style: _biggerFont,\n      ),\n      key: Key('list_title_$i'),\n      trailing: Icon(\n        alreadySaved ? Icons.favorite : Icons.favorite_border,\n        color: alreadySaved ? Colors.red : null,\n        key: alreadySaved ? Key('favourite_${i}_saved') : Key('favourite_${i}_unsaved'),\n      ),\n      onTap: () {\n        setState(() {\n          if (alreadySaved) {\n            _saved.remove(pair);\n          } else {\n            _saved.add(pair);\n          }\n        });\n      },\n    );\n  }\n}\n"
        ]
    },
    {
        "titulo": "How to wait for Future method inside widget testing?",
        "score": 1,
        "views": 5616,
        "respostas": 2,
        "tags": [
            "testing",
            "flutter",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/56992429/how-to-wait-for-future-method-inside-widget-testing",
        "conteudo_html": "<p>I want to test my widget. In my HomePage widget, there's a method to call API then it will show the result inside this widget. Here's the code for HomePage widget</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>class HomePage extends StatefulWidget {\n  WebScraper _webScraper = WebScraper();\n\n  HomePage();\n\n  HomePage.forTest(Client client) {\n    _webScraper.client = client;\n  }\n\n  @override\n  _HomePageState createState() =&gt; _HomePageState();\n}\n\nclass _HomePageState extends State&lt;HomePage&gt; {\n  List&lt;Post&gt; posts = [];\n\n  bool isPostLoaded = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _onRefresh();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Column(\n        children: &lt;Widget&gt;[\n          Expanded(\n            child: RefreshIndicator(\n              child: isPostLoaded ? ListView.builder(\n                key: Key('post-list'),\n                itemCount: posts.length,\n                itemBuilder: (context, index) {\n                  return Card(\n                    key: Key(posts[index].id.toString()),\n                    child: Column(\n                      children: &lt;Widget&gt;[\n                        Text(posts[index].title),\n                        Text(posts[index].content),\n                        Row(\n                          children: &lt;Widget&gt;[\n                          // some code\n                          ],\n                        )\n                      ],\n                    ),\n                  );\n                },\n              ) : CircularProgressIndicator(),\n              onRefresh: _onRefresh),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Future&lt;void&gt; _onRefresh() async {\n    List&lt;Post&gt; postFromWebsite =\n        await this.widget._webScraper.getPostsFromWebsite();\n    if (postFromWebsite.length &gt; 0) {\n      setState(() {\n        posts = postFromWebsite;\n        isPostLoaded = true;\n      });\n    }\n  }\n</code></pre>\n\n<p>And here is my test code</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>void main() {\n  var homeHttpMock;\n  setUp(() {\n    MockClient client = MockClient((request) async {\n      String html =\n          await rootBundle.loadString('test_resources/test.html');\n      return Response(html, 200);\n    });\n\n    homeHttpMock = MediaQuery(\n      data: MediaQueryData(),\n      child: MaterialApp(\n        home: HomePage.forTest(client),\n      ),\n    );\n  });\n\n  testWidgets('Show post inside card in the list view',\n      (WidgetTester tester) async {\n    await tester.pumpWidget(homeHttpMock);\n    await tester.pump();\n    final listView = find.byKey(Key('post-list'));\n    expect(listView, findsOneWidget);\n  });\n</code></pre>\n\n<p>I tried to use <code>tester.runAsync</code>, <code>tester.pump</code> with duration, <code>tester.pumpAndSettle</code> (this one will be timed out), and <code>FakeAsync</code> but these methods don't work for my widget test and it will lead my test to be failed.</p>\n\n<p>Thank you in advance</p>\n",
        "codigo": [
            "class HomePage extends StatefulWidget {\n  WebScraper _webScraper = WebScraper();\n\n  HomePage();\n\n  HomePage.forTest(Client client) {\n    _webScraper.client = client;\n  }\n\n  @override\n  _HomePageState createState() => _HomePageState();\n}\n\nclass _HomePageState extends State<HomePage> {\n  List<Post> posts = [];\n\n  bool isPostLoaded = false;\n\n  @override\n  void initState() {\n    super.initState();\n    _onRefresh();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      body: Column(\n        children: <Widget>[\n          Expanded(\n            child: RefreshIndicator(\n              child: isPostLoaded ? ListView.builder(\n                key: Key('post-list'),\n                itemCount: posts.length,\n                itemBuilder: (context, index) {\n                  return Card(\n                    key: Key(posts[index].id.toString()),\n                    child: Column(\n                      children: <Widget>[\n                        Text(posts[index].title),\n                        Text(posts[index].content),\n                        Row(\n                          children: <Widget>[\n                          // some code\n                          ],\n                        )\n                      ],\n                    ),\n                  );\n                },\n              ) : CircularProgressIndicator(),\n              onRefresh: _onRefresh),\n          ),\n        ],\n      ),\n    );\n  }\n\n  Future<void> _onRefresh() async {\n    List<Post> postFromWebsite =\n        await this.widget._webScraper.getPostsFromWebsite();\n    if (postFromWebsite.length > 0) {\n      setState(() {\n        posts = postFromWebsite;\n        isPostLoaded = true;\n      });\n    }\n  }\n",
            "void main() {\n  var homeHttpMock;\n  setUp(() {\n    MockClient client = MockClient((request) async {\n      String html =\n          await rootBundle.loadString('test_resources/test.html');\n      return Response(html, 200);\n    });\n\n    homeHttpMock = MediaQuery(\n      data: MediaQueryData(),\n      child: MaterialApp(\n        home: HomePage.forTest(client),\n      ),\n    );\n  });\n\n  testWidgets('Show post inside card in the list view',\n      (WidgetTester tester) async {\n    await tester.pumpWidget(homeHttpMock);\n    await tester.pump();\n    final listView = find.byKey(Key('post-list'));\n    expect(listView, findsOneWidget);\n  });\n",
            "tester.runAsync",
            "tester.pump",
            "tester.pumpAndSettle",
            "FakeAsync"
        ]
    },
    {
        "titulo": "How to fix MissingPluginException (package_info) caused by get_version plugin?",
        "score": 6,
        "views": 1252,
        "respostas": 1,
        "tags": [
            "testing",
            "plugins",
            "dart",
            "flutter"
        ],
        "link": "https://stackoverflow.com/questions/55595718/how-to-fix-missingpluginexception-package-info-caused-by-get-version-plugin",
        "conteudo_html": "<p>I have a flutter App and I am writing a test case that compares the currentVersion of the App with the latestVersion available. The function simply takes values for currentVersion and latestVersion and returns true or false depending on whether currentVersion&lt;=latestVersion.</p>\n\n<p>I am using get_version plugin to extract the currentVersion of the App. LatestVersion holds a value one than that for testing purposes.</p>\n\n<p>This same call works in the rest of the App. It's creating an issue only  in the test case.</p>\n\n<p>I tried upgrading from 0.0.8 to 0.1.0 but in vain.</p>\n\n<pre><code>    void main() {\n      test('checkAppVersion', () async {\n        String currentVersion = await GetVersion.projectVersion;\n\n\nexpect(\n    checkAppVersionTest(\n        Version.parse(currentVersion), Version.parse(latestVersion)),\n    true);\n\n\n  });\n}\n\n    bool checkAppVersionTest(Version currentVersion, Version latestVersion) { bool updateRequired = false;\n      if (currentVersion &lt; latestVersion) {\n        updateRequired = true;\n      }\n      return updateRequired;\n    }\n</code></pre>\n\n<p>I am getting the following error:</p>\n\n<blockquote>\n  <p>MissingPluginException(No implementation found for method getAll on channel plugins.flutter.io/package_info)\n  package:flutter/src/services/platform_channel.dart 300:7  MethodChannel.invokeMethod\n  ===== asynchronous gap ===========================\n  dart:async                                                _AsyncAwaitCompleter.completeError\n  package:flutter/src/services/platform_channel.dart        MethodChannel.invokeMethod\n  ===== asynchronous gap ===========================\n  dart:async                                                _asyncThenWrapperHelper\n  package:flutter/src/services/platform_channel.dart        MethodChannel.invokeMethod\n  package:package_info/package_info.dart 38:17              PackageInfo.fromPlatform</p>\n</blockquote>\n\n<p>Works fine when I hard code the currentVersion value.</p>\n\n<p>Please suggest a way around this.</p>\n",
        "codigo": [
            "    void main() {\n      test('checkAppVersion', () async {\n        String currentVersion = await GetVersion.projectVersion;\n\n\nexpect(\n    checkAppVersionTest(\n        Version.parse(currentVersion), Version.parse(latestVersion)),\n    true);\n\n\n  });\n}\n\n    bool checkAppVersionTest(Version currentVersion, Version latestVersion) { bool updateRequired = false;\n      if (currentVersion < latestVersion) {\n        updateRequired = true;\n      }\n      return updateRequired;\n    }\n"
        ]
    },
    {
        "titulo": "TESTING: No MaterialLocalizations found. AppBar widgets require MaterialLocalizations to be provided",
        "score": 2,
        "views": 2674,
        "respostas": 1,
        "tags": [
            "testing",
            "dart",
            "flutter"
        ],
        "link": "https://stackoverflow.com/questions/54852106/testing-no-materiallocalizations-found-appbar-widgets-require-materiallocaliza",
        "conteudo_html": "<p>When testing a fullscreen widget which contains a Scaffold(), I get this error:</p>\n\n<pre><code>No MaterialLocalizations found.\nAppBar widgets require MaterialLocalizations to be provided by a Localizations widget ancestor.\n</code></pre>\n\n<p>I was trying to inject Localizations widget, but the error remains the same. Any ideas how to proceed testing?</p>\n\n<pre><code>testWidgets('MiniScaffold', (WidgetTester tester) async {\n    await tester.pumpWidget(Wrap(child: MiniScaffold()));\n    expect(find.text('Hello'), findsOneWidget);\n    await tester.pumpWidget(Container());\n  });\n\nclass MiniScaffold extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: Text('Hello'),\n          actions: &lt;Widget&gt;[],\n        ),\n        body: Container());\n  }\n}\n\nclass Wrap extends StatelessWidget {\n  final Widget child;\n\n  const Wrap({Key key, this.child}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MediaQuery(\n        data: new MediaQueryData(),\n        child: Localizations(\n            locale: Locale('en-US'),\n            delegates: [\n              DefaultMaterialLocalizations.delegate,\n              DefaultWidgetsLocalizations.delegate,\n            ],\n            child: Directionality(\n              textDirection: TextDirection.ltr,\n              child: this.child,\n            )));\n  }\n}\n</code></pre>\n",
        "codigo": [
            "No MaterialLocalizations found.\nAppBar widgets require MaterialLocalizations to be provided by a Localizations widget ancestor.\n",
            "testWidgets('MiniScaffold', (WidgetTester tester) async {\n    await tester.pumpWidget(Wrap(child: MiniScaffold()));\n    expect(find.text('Hello'), findsOneWidget);\n    await tester.pumpWidget(Container());\n  });\n\nclass MiniScaffold extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n        appBar: AppBar(\n          title: Text('Hello'),\n          actions: <Widget>[],\n        ),\n        body: Container());\n  }\n}\n\nclass Wrap extends StatelessWidget {\n  final Widget child;\n\n  const Wrap({Key key, this.child}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MediaQuery(\n        data: new MediaQueryData(),\n        child: Localizations(\n            locale: Locale('en-US'),\n            delegates: [\n              DefaultMaterialLocalizations.delegate,\n              DefaultWidgetsLocalizations.delegate,\n            ],\n            child: Directionality(\n              textDirection: TextDirection.ltr,\n              child: this.child,\n            )));\n  }\n}\n"
        ]
    },
    {
        "titulo": "How to test dart class static constant?",
        "score": 4,
        "views": 1682,
        "respostas": 1,
        "tags": [
            "testing",
            "dart",
            "code-coverage"
        ],
        "link": "https://stackoverflow.com/questions/54741605/how-to-test-dart-class-static-constant",
        "conteudo_html": "<p><a href=\"https://i.sstatic.net/B26fi.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/B26fi.png\" alt=\"enter image description here\"></a></p>\n\n<p>Here is my test code:</p>\n\n<pre><code> test('should set correct constant', (){\n    expect(Stores.CurrentContext, 'currentContext');\n  });\n</code></pre>\n\n<p>but the picture  above shows that the static constant code not tested. and why?</p>\n\n<p>version infos:</p>\n\n<pre><code>Flutter 1.2.2-pre.3 • channel master • https://github.com/flutter/flutter.git\nFramework • revision 67cf21577f (4 days ago) • 2019-02-14 23:17:16 -0800\nEngine • revision 3757390fa4\nTools • Dart 2.1.2 (build 2.1.2-dev.0.0 0a7dcf17eb)\n</code></pre>\n",
        "codigo": [
            " test('should set correct constant', (){\n    expect(Stores.CurrentContext, 'currentContext');\n  });\n",
            "Flutter 1.2.2-pre.3 • channel master • https://github.com/flutter/flutter.git\nFramework • revision 67cf21577f (4 days ago) • 2019-02-14 23:17:16 -0800\nEngine • revision 3757390fa4\nTools • Dart 2.1.2 (build 2.1.2-dev.0.0 0a7dcf17eb)\n"
        ]
    },
    {
        "titulo": "How to test Flutter app where there is an async call in initState()?",
        "score": 9,
        "views": 4571,
        "respostas": 3,
        "tags": [
            "asynchronous",
            "testing",
            "dart",
            "flutter"
        ],
        "link": "https://stackoverflow.com/questions/53511473/how-to-test-flutter-app-where-there-is-an-async-call-in-initstate",
        "conteudo_html": "<p>I have a StatefulWidget that does an async call in its <code>initState()</code>, to build a Widget. When I manually run this, the widget does build quickly.</p>\n\n<p>However, in my test, even if I use <code>await tester.pump()</code> or <code>await tester.pumpAndSettle()</code>, the widget doesn't seem to get built, until way after the test has run.</p>\n\n<p>Widget code:</p>\n\n<pre><code>Widget _coolWidget;\n\n@override\nvoid initState() {\n  super.initState();\n  _coolWidget = Container(); // If I set this to OverflowBox() my test passes\n  _buildWidgetFromCanvas();\n}\n\nFuture&lt;void&gt; _buildWidgetFromCanvas() {\n  final ui.PictureRecorder recorder = ui.PictureRecorder();\n  final ui.Canvas canvas = ui.Canvas(recorder);\n  // ... more canvas drawing code ...\n  final img = ... // Image.memory() I build from the canvas\n  if (!mounted) {\n    print('no longer mounted');\n    return;\n  }\n\n  setState(() {\n    print(img);\n    _coolWidget = OverflowBox(\n      child: img,\n    );\n    print(_coolWidget);\n  });\n}\n</code></pre>\n\n<p>Test code:</p>\n\n<pre><code>void main() {\n  testWidgets('''OverflowBox shows up.''', (WidgetTester tester) async {\n    await _setUp(tester); // Just instantiates my widget in an app\n    await tester.pumpAndSettle();\n    expect(find.byType(OverflowBox).evaluate().length, 1);\n  });\n}\n</code></pre>\n\n<p>An output when I run my test results in:</p>\n\n<pre><code>failed: Error caught by Flutter test framework, thrown running a test.\nExpected: &lt;1&gt;\nActual: &lt;0&gt;\n</code></pre>\n\n<p>But if I set <code>_coolWidget = OverflowBox();</code> in <code>initState()</code>, the test passes.</p>\n\n<p>I have other tests that run after this one. After those ones are done, I see the print logging the <code>print(img);</code> and <code>print(_coolWidget);</code> from above, and it correctly logs the drawn image.</p>\n\n<p>I also get the <code>no longer mounted</code> print, but that only happens as the very last print, prior to Flutter's built in <code>(tearDownAll)</code>.</p>\n\n<p>Setting durations in the pump() and pumpAndSettle() don't seem to change anything.</p>\n\n<p>I'm probably missing something obvious.</p>\n",
        "codigo": [
            "initState()",
            "await tester.pump()",
            "await tester.pumpAndSettle()",
            "Widget _coolWidget;\n\n@override\nvoid initState() {\n  super.initState();\n  _coolWidget = Container(); // If I set this to OverflowBox() my test passes\n  _buildWidgetFromCanvas();\n}\n\nFuture<void> _buildWidgetFromCanvas() {\n  final ui.PictureRecorder recorder = ui.PictureRecorder();\n  final ui.Canvas canvas = ui.Canvas(recorder);\n  // ... more canvas drawing code ...\n  final img = ... // Image.memory() I build from the canvas\n  if (!mounted) {\n    print('no longer mounted');\n    return;\n  }\n\n  setState(() {\n    print(img);\n    _coolWidget = OverflowBox(\n      child: img,\n    );\n    print(_coolWidget);\n  });\n}\n",
            "void main() {\n  testWidgets('''OverflowBox shows up.''', (WidgetTester tester) async {\n    await _setUp(tester); // Just instantiates my widget in an app\n    await tester.pumpAndSettle();\n    expect(find.byType(OverflowBox).evaluate().length, 1);\n  });\n}\n",
            "failed: Error caught by Flutter test framework, thrown running a test.\nExpected: <1>\nActual: <0>\n",
            "_coolWidget = OverflowBox();",
            "initState()",
            "print(img);",
            "print(_coolWidget);",
            "no longer mounted",
            "(tearDownAll)"
        ]
    },
    {
        "titulo": "Flutter: unit testing",
        "score": 3,
        "views": 2636,
        "respostas": 1,
        "tags": [
            "unit-testing",
            "testing",
            "dart",
            "flutter"
        ],
        "link": "https://stackoverflow.com/questions/52816759/flutter-unit-testing",
        "conteudo_html": "<p>I'm trying to test this function:</p>\n\n<pre><code>  setToday(Map filters) {\n    if (filters['today'] == false) {\n      filters['yesterday'] = false;\n      filters['lastWeek'] = false;\n      filters['lastMonth'] = false;\n      filters['customRange'] = false;\n      filters['today'] =  true;\n    } else\n      filters['today'] = false;\n  }\n</code></pre>\n\n<p>And this is the test:</p>\n\n<pre><code>     test(\"\", (){\n        Map&lt;String, bool&gt; filters = {\n          \"today\" : false,\n          \"yesterday\" : false,\n          \"lastWeek\" : false,\n          \"lastMonth\" : false,\n          \"customRange\" : false,\n        };\n\n        expect(_kpiFilterViewController.setToday(filters), filters[\"today\"] == true);\n      });\n</code></pre>\n\n<p>But the result is :</p>\n\n<pre><code>Expected: &lt;true&gt;\n  Actual: &lt;null&gt;\n</code></pre>\n\n<p>What is my mistake?</p>\n",
        "codigo": [
            "  setToday(Map filters) {\n    if (filters['today'] == false) {\n      filters['yesterday'] = false;\n      filters['lastWeek'] = false;\n      filters['lastMonth'] = false;\n      filters['customRange'] = false;\n      filters['today'] =  true;\n    } else\n      filters['today'] = false;\n  }\n",
            "     test(\"\", (){\n        Map<String, bool> filters = {\n          \"today\" : false,\n          \"yesterday\" : false,\n          \"lastWeek\" : false,\n          \"lastMonth\" : false,\n          \"customRange\" : false,\n        };\n\n        expect(_kpiFilterViewController.setToday(filters), filters[\"today\"] == true);\n      });\n",
            "Expected: <true>\n  Actual: <null>\n"
        ]
    },
    {
        "titulo": "Flutter: Test future builder",
        "score": 3,
        "views": 3078,
        "respostas": 1,
        "tags": [
            "testing",
            "dart",
            "flutter",
            "future"
        ],
        "link": "https://stackoverflow.com/questions/52813572/flutter-test-future-builder",
        "conteudo_html": "<p>I want to test a function that has a Future builder. The function is:</p>\n\n<pre><code>     Widget loadWidget() {\n        return new FutureBuilder(\n            future: getData(),\n            builder: (BuildContext context, AsyncSnapshot&lt;double&gt; snapshot) {\n              if (snapshot.hasData) {\n                double content = snapshot.data;\n              return new Container(...)\n           } else {\n            return new Center(\n              child: CircularProgressIndicator(),\n            );\n</code></pre>\n\n<p>The test that I tried to write was something like:</p>\n\n<pre><code>testWidgets(\"should return a container\",\n      (WidgetTester tester) async {\n    await tester.pumpWidget(\n        StatefulBuilder(builder: (BuildContext context, StateSetter setState) {\n      return MaterialApp(\n          home: Material(\n              child: Scaffold(\n                  body:loadWidget());\n    }));\n\n    expect(find.byType(Container), findsOneWidget);\n</code></pre>\n\n<p>The <code>getData()</code> function seems to work, so I think that my problem could be that I don't know how to handle with the AsyncSnapshot. </p>\n",
        "codigo": [
            "     Widget loadWidget() {\n        return new FutureBuilder(\n            future: getData(),\n            builder: (BuildContext context, AsyncSnapshot<double> snapshot) {\n              if (snapshot.hasData) {\n                double content = snapshot.data;\n              return new Container(...)\n           } else {\n            return new Center(\n              child: CircularProgressIndicator(),\n            );\n",
            "testWidgets(\"should return a container\",\n      (WidgetTester tester) async {\n    await tester.pumpWidget(\n        StatefulBuilder(builder: (BuildContext context, StateSetter setState) {\n      return MaterialApp(\n          home: Material(\n              child: Scaffold(\n                  body:loadWidget());\n    }));\n\n    expect(find.byType(Container), findsOneWidget);\n",
            "getData()"
        ]
    },
    {
        "titulo": "flutter. Mock api call in widget test",
        "score": 2,
        "views": 1596,
        "respostas": 1,
        "tags": [
            "testing",
            "dart",
            "mockito",
            "flutter"
        ],
        "link": "https://stackoverflow.com/questions/52663888/flutter-mock-api-call-in-widget-test",
        "conteudo_html": "<p>I'm trying to create widget test for login screen in application.\nSo i want to test several things:\n1. That i can find all needed widgets on screen\n2. Empty fields validation\n3. Wrong login or password scenario\n4. Successfull login scenario</p>\n\n<p>But i stuck with items 3 and 4. As i found out on widget tests flutter doesn't allow api calls - so responce is 400 in every case.</p>\n\n<p>I found a way to write test using mockHtmlClient. Inspired by this topic <a href=\"https://groups.google.com/forum/#!msg/flutter-dev/AnqDqgQ6vus/8BoHfxoNBwAJ\" rel=\"nofollow noreferrer\">https://groups.google.com/forum/#!msg/flutter-dev/AnqDqgQ6vus/8BoHfxoNBwAJ</a></p>\n\n<pre><code> HttpOverrides.runZoned(() async {\n  // All code inside here will use the HttpClient returned below.\n  await tester.pumpWidget(buildTestableWidget(LoginScreen()));\n  Finder emailField = find.byKey(new Key('email'));\n  await tester.enterText(emailField, 'some@some.some');\n\n  Finder passwordField = find.byKey(Key(\"password\"));\n  await tester.enterText(passwordField, 'some');\n\n\n\n  // tap on the login button\n\n  Finder loginButton = find.byKey(new Key('login'));\n  await tester.tap(loginButton);\n\n  // 'pump' the tester again. This causes the widget to rebuild\n  await tester.pump();\n  //sleep(const Duration(seconds:2));\n  // await tester.pump();\n\n  //find validation text on SnackBar\n  expect(find.text(\"Invalid email or password\"), findsOneWidget);\n\n}, createHttpClient: createMockHttpClient);\n</code></pre>\n\n<p>My question is - <strong>How can i implement MockHttpClient so i could send correct API responce for 3 and 4 scenarious.</strong> I can get json answer from real api on this scenarious. \nThere is implementation of createMockHttpClient for case of NetworkImage in the dicsussion from the linked i posted above. </p>\n",
        "codigo": [
            " HttpOverrides.runZoned(() async {\n  // All code inside here will use the HttpClient returned below.\n  await tester.pumpWidget(buildTestableWidget(LoginScreen()));\n  Finder emailField = find.byKey(new Key('email'));\n  await tester.enterText(emailField, 'some@some.some');\n\n  Finder passwordField = find.byKey(Key(\"password\"));\n  await tester.enterText(passwordField, 'some');\n\n\n\n  // tap on the login button\n\n  Finder loginButton = find.byKey(new Key('login'));\n  await tester.tap(loginButton);\n\n  // 'pump' the tester again. This causes the widget to rebuild\n  await tester.pump();\n  //sleep(const Duration(seconds:2));\n  // await tester.pump();\n\n  //find validation text on SnackBar\n  expect(find.text(\"Invalid email or password\"), findsOneWidget);\n\n}, createHttpClient: createMockHttpClient);\n"
        ]
    },
    {
        "titulo": "Flutter: testing",
        "score": 7,
        "views": 2429,
        "respostas": 1,
        "tags": [
            "unit-testing",
            "testing",
            "dart",
            "flutter"
        ],
        "link": "https://stackoverflow.com/questions/52602935/flutter-testing",
        "conteudo_html": "<p>I was trying to test this function</p>\n\n<pre><code>  UserApi createUserApi(String url, String username, String password) {\n    UserApi userApi = new UserApi(base: route(url), serializers: repo);\n    userApi.base.basicAuth('$username', '$password');\n    return userApi;\n  }\n</code></pre>\n\n<p>basically, the test was to compare the result of this function with a \"manually composition\" of it, expecting to have the same result. But It doesn't:</p>\n\n<pre><code>  String username = \"asd\";\n  String password = \"asd\";\n  UserApi userApiTest = new UserApi(base: route(\"asd\"), serializers: repo);\n  userApiTest.base.basicAuth('$username', '$password');\n  test(\"UserApi creation\", () {\n    UserApi userApi = _presenter.createUserApi(\"asd\", \"asd\", \"asd\");\n    expect(userApi, userApiTest);\n  }); \n</code></pre>\n\n<p>The result is always : </p>\n\n<pre><code>Expected: &lt;Instance of 'UserApi'&gt;\n  Actual: &lt;Instance of 'UserApi'&gt;\n</code></pre>\n\n<p>Why are they different? In the debug every property is the same.</p>\n",
        "codigo": [
            "  UserApi createUserApi(String url, String username, String password) {\n    UserApi userApi = new UserApi(base: route(url), serializers: repo);\n    userApi.base.basicAuth('$username', '$password');\n    return userApi;\n  }\n",
            "  String username = \"asd\";\n  String password = \"asd\";\n  UserApi userApiTest = new UserApi(base: route(\"asd\"), serializers: repo);\n  userApiTest.base.basicAuth('$username', '$password');\n  test(\"UserApi creation\", () {\n    UserApi userApi = _presenter.createUserApi(\"asd\", \"asd\", \"asd\");\n    expect(userApi, userApiTest);\n  }); \n",
            "Expected: <Instance of 'UserApi'>\n  Actual: <Instance of 'UserApi'>\n"
        ]
    },
    {
        "titulo": "Flutter: testing widgets",
        "score": 3,
        "views": 2415,
        "respostas": 2,
        "tags": [
            "testing",
            "dart",
            "flutter"
        ],
        "link": "https://stackoverflow.com/questions/52445193/flutter-testing-widgets",
        "conteudo_html": "<p>what I'm trying to test is:\nthe user taps a button and the snackbar is shown for five second.</p>\n\n<p>Here is the scaffold with its key:</p>\n\n<pre><code>final GlobalKey&lt;ScaffoldState&gt; _scaffoldKey = new GlobalKey&lt;ScaffoldState&gt;(debugLabel: \"scaffoldState\");\n</code></pre>\n\n<p>...</p>\n\n<pre><code>builder: (context, viewModel) =&gt; Scaffold(\n              key: _scaffoldKey,\n</code></pre>\n\n<p>Then the code for the button and the snackBar:</p>\n\n<pre><code>child: FlatButton(key: Key('loginButton'), onPressed: () { \n validate();\n</code></pre>\n\n<p>...</p>\n\n<pre><code>  validate() {\n    // FormState object can be used to save, reset, and validate\n    // every FormField that is a descendant of the associated Form.\n\n    final FormState form = _formKey.currentState;\n\n    if (form.validate()) {\n      form.save();\n      form.reset();\n\n      //implementation of the snackBar:\n      _scaffoldKey.currentState.showSnackBar(new SnackBar(\n        duration: new Duration(seconds: 5)\n</code></pre>\n\n<p>...</p>\n\n<p>And I am trying to test this behaviour in this way (I'm using also Flutter redux):</p>\n\n<pre><code>void main(){\n\n  final store = Store&lt;AppState&gt;(reducer, initialState: AppState.initialState());\n  testWidgets(\"MaterialApp local\", (WidgetTester tester) async{\n    await tester.pumpWidget(new StoreProvider(\n        store: store,\n        child: MaterialApp(\n          home: LoginView(),\n        )));\n    await tester.pumpAndSettle();\n    await tester.press(find.byKey(Key(\"loginButton\")));\n    expect();\n</code></pre>\n\n<p>I don't know what to put inside expect. I was trying to take the GlobalKey using find.ByKey(Key)) and to search for the debugLabel, but it doesn't seem to work. I'm trying since 2 days, but I can't find a way out.</p>\n",
        "codigo": [
            "final GlobalKey<ScaffoldState> _scaffoldKey = new GlobalKey<ScaffoldState>(debugLabel: \"scaffoldState\");\n",
            "builder: (context, viewModel) => Scaffold(\n              key: _scaffoldKey,\n",
            "child: FlatButton(key: Key('loginButton'), onPressed: () { \n validate();\n",
            "  validate() {\n    // FormState object can be used to save, reset, and validate\n    // every FormField that is a descendant of the associated Form.\n\n    final FormState form = _formKey.currentState;\n\n    if (form.validate()) {\n      form.save();\n      form.reset();\n\n      //implementation of the snackBar:\n      _scaffoldKey.currentState.showSnackBar(new SnackBar(\n        duration: new Duration(seconds: 5)\n",
            "void main(){\n\n  final store = Store<AppState>(reducer, initialState: AppState.initialState());\n  testWidgets(\"MaterialApp local\", (WidgetTester tester) async{\n    await tester.pumpWidget(new StoreProvider(\n        store: store,\n        child: MaterialApp(\n          home: LoginView(),\n        )));\n    await tester.pumpAndSettle();\n    await tester.press(find.byKey(Key(\"loginButton\")));\n    expect();\n"
        ]
    },
    {
        "titulo": "How to find the `text` property of a Widget during testing in Flutter?",
        "score": 9,
        "views": 9088,
        "respostas": 4,
        "tags": [
            "testing",
            "text",
            "dart",
            "flutter"
        ],
        "link": "https://stackoverflow.com/questions/52304957/how-to-find-the-text-property-of-a-widget-during-testing-in-flutter",
        "conteudo_html": "<p>I have a piece of code that creates a Table of Text widgets, like this:</p>\n\n<pre><code>return Table(\n  defaultColumnWidth: FixedColumnWidth(120.0),\n  children: &lt;TableRow&gt;[\n    TableRow(\n      children: &lt;Widget&gt;[Text('toffee'), Text('potato')],\n    ),\n    TableRow(\n      children: &lt;Widget&gt;[Text('cheese'), Text('pie')],\n    ),\n  ],\n);\n</code></pre>\n\n<p>I want to test that the first item in the Table is indeed the word 'toffee'. I set up my test and get to this part:</p>\n\n<pre><code>var firstCell = find\n      .descendant(\n        of: find.byType(Table),\n        matching: find.byType(Text),\n      )\n      .evaluate()\n      .toList()[0].widget;\n\n  expect(firstCell, 'toffee');\n</code></pre>\n\n<p>This definitely doesn't work because <code>firstCell</code> is of type Widget, which is not equal to the String <code>toffee</code>. </p>\n\n<p>I only see a <code>toString()</code> function, like this:</p>\n\n<pre><code>'Text(\"toffee\", inherit: true, color: Color(0xff616161), size: 16.0,\n textAlign: left)'\n</code></pre>\n\n<p>How do I extract the <code>text</code> property to get the word <code>toffee</code>?</p>\n\n<p>Right now it seems like all I can do is check that the <code>.toString().contains('toffee')</code> which isn't ideal.</p>\n",
        "codigo": [
            "return Table(\n  defaultColumnWidth: FixedColumnWidth(120.0),\n  children: <TableRow>[\n    TableRow(\n      children: <Widget>[Text('toffee'), Text('potato')],\n    ),\n    TableRow(\n      children: <Widget>[Text('cheese'), Text('pie')],\n    ),\n  ],\n);\n",
            "var firstCell = find\n      .descendant(\n        of: find.byType(Table),\n        matching: find.byType(Text),\n      )\n      .evaluate()\n      .toList()[0].widget;\n\n  expect(firstCell, 'toffee');\n",
            "firstCell",
            "toffee",
            "toString()",
            "'Text(\"toffee\", inherit: true, color: Color(0xff616161), size: 16.0,\n textAlign: left)'\n",
            "text",
            "toffee",
            ".toString().contains('toffee')"
        ]
    },
    {
        "titulo": "Can&#39;t enter text in flutter test",
        "score": 10,
        "views": 9087,
        "respostas": 2,
        "tags": [
            "testing",
            "dart",
            "flutter",
            "flutter-test"
        ],
        "link": "https://stackoverflow.com/questions/50034957/cant-enter-text-in-flutter-test",
        "conteudo_html": "<p>I've been trying to test an element that when an IconButton is pressed, a Text object changes to a TextFormField. When I try to test this I get the following error:</p>\n\n<pre><code>A Timer is still pending even after the widget tree was disposed.\n'package:flutter_test/src/binding.dart': Failed assertion: line 672 pos 7:\n'_fakeAsync.nonPeriodicTimerCount == 0'\n</code></pre>\n\n<p>Despite the widget not using any timers that I'm aware of?</p>\n\n<p>Example code: </p>\n\n<pre><code>await tester.tap(find.byType(IconButton));\nawait tester.pump();\n\nexpect(find.byType(TextFormField), findsOneWidget);\nawait tester.pump();\nawait tester.enterText(find.byType(EditableText), \"0.2\");\n</code></pre>\n\n<p>I'm really not sure what's causing the issue but if I remove the last 2 lines it runs fine (although I don't get to actually test my input).</p>\n",
        "codigo": [
            "A Timer is still pending even after the widget tree was disposed.\n'package:flutter_test/src/binding.dart': Failed assertion: line 672 pos 7:\n'_fakeAsync.nonPeriodicTimerCount == 0'\n",
            "await tester.tap(find.byType(IconButton));\nawait tester.pump();\n\nexpect(find.byType(TextFormField), findsOneWidget);\nawait tester.pump();\nawait tester.enterText(find.byType(EditableText), \"0.2\");\n"
        ]
    },
    {
        "titulo": "How to test if method that takes argument is throwing an exception in dart?",
        "score": 4,
        "views": 2762,
        "respostas": 1,
        "tags": [
            "testing",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/49523786/how-to-test-if-method-that-takes-argument-is-throwing-an-exception-in-dart",
        "conteudo_html": "<p>If I have </p>\n\n<pre><code>class ErrorThrower{\n  void throwAnError(String argument){\n    throw new Error();\n  }\n}\n</code></pre>\n\n<p>I want to test if throwAnError throws Exception, or more precisely an instance of <code>Error</code></p>\n\n<p>This is my code but it doesn't work</p>\n\n<pre><code>  test('', () {\n    var errorThrower = new ErrorThrower();\n    expect(errorThrower.throwAnError(\"string\"), throwsException);\n  });\n</code></pre>\n",
        "codigo": [
            "class ErrorThrower{\n  void throwAnError(String argument){\n    throw new Error();\n  }\n}\n",
            "Error",
            "  test('', () {\n    var errorThrower = new ErrorThrower();\n    expect(errorThrower.throwAnError(\"string\"), throwsException);\n  });\n"
        ]
    },
    {
        "titulo": "When attempting to test an html File object, it wont let me prepopulate it with a sample image?",
        "score": 3,
        "views": 1419,
        "respostas": 1,
        "tags": [
            "testing",
            "dart",
            "angular-dart",
            "dart-html"
        ],
        "link": "https://stackoverflow.com/questions/47995486/when-attempting-to-test-an-html-file-object-it-wont-let-me-prepopulate-it-with",
        "conteudo_html": "<p>I created Component I was wanting to test with Angular Dart's Framework.</p>\n\n<p>When I create my test file, it seems though that I am having issues creating a sample file to test against.</p>\n\n<p>In my hirerarchy, I have:</p>\n\n<pre><code>./bird.jpg\n./image_uploader_po.dart\n./image_uploaders_test.dart\n</code></pre>\n\n<p>and then in the code I have</p>\n\n<pre><code>test(\"testing against valid image upload\", () async {\n  File testImage = new File(\"./bird.jpg\");  //improper constructor.\n  fixture.update((Component com){\n    com.imageFile = testImage;\n  });\n  uploaderPO = await fixture.resolvePageObject(Component);\n});\n</code></pre>\n\n<p>The issue I have is that this is not the <em>dart/io</em> implementation of File, but instead the Html Implementation.</p>\n\n<p>I was trying to determine what the best course of action would be for this, to open a file for read access to apply to the Component's implementation of File.</p>\n\n<p>I was looking up filereader, but that relates to a file which exists, which is what I am having issues with.</p>\n\n<p>Right now, File constructor is:  <code>File(List&lt;Object&gt; fileBits, String filename, [Map&lt;String, Dynamic&gt; options]);</code> and ultimately didn't know what \"fileBits\" should be.</p>\n\n<p>You can find the File Class I am using at: <a href=\"https://api.dartlang.org/stable/1.24.3/dart-html/File-class.html\" rel=\"nofollow noreferrer\">https://api.dartlang.org/stable/1.24.3/dart-html/File-class.html</a></p>\n\n<p>My desired end state is to use a sample image file to apply it to an Image Uploader Component.</p>\n\n<p>Thank you.</p>\n",
        "codigo": [
            "./bird.jpg\n./image_uploader_po.dart\n./image_uploaders_test.dart\n",
            "test(\"testing against valid image upload\", () async {\n  File testImage = new File(\"./bird.jpg\");  //improper constructor.\n  fixture.update((Component com){\n    com.imageFile = testImage;\n  });\n  uploaderPO = await fixture.resolvePageObject(Component);\n});\n",
            "File(List<Object> fileBits, String filename, [Map<String, Dynamic> options]);"
        ]
    },
    {
        "titulo": "Mockito with functions in Dart",
        "score": 9,
        "views": 10153,
        "respostas": 2,
        "tags": [
            "testing",
            "dart",
            "mockito",
            "flutter",
            "flutter-test"
        ],
        "link": "https://stackoverflow.com/questions/47714342/mockito-with-functions-in-dart",
        "conteudo_html": "<p>I have a method that I would like to mock, however when I am trying to verify calls of this method. I get an error that says:</p>\n\n<pre><code>Used on a non-mockito object\n</code></pre>\n\n<p>Here is the simplified code:</p>\n\n<pre><code>test('test',() {\n  MockReducer reducer = new MockReducer();\n  verify(reducer).called(0);\n});\n\nclass MockReducer extends Mock {\n  call(state, action) =&gt; state;\n}\n</code></pre>\n\n<p>Why can't I do something like this?</p>\n",
        "codigo": [
            "Used on a non-mockito object\n",
            "test('test',() {\n  MockReducer reducer = new MockReducer();\n  verify(reducer).called(0);\n});\n\nclass MockReducer extends Mock {\n  call(state, action) => state;\n}\n"
        ]
    },
    {
        "titulo": "How to get the code coverage in Angular Dart?",
        "score": 6,
        "views": 159,
        "respostas": 0,
        "tags": [
            "testing",
            "dart",
            "code-coverage",
            "angular-dart"
        ],
        "link": "https://stackoverflow.com/questions/46441137/how-to-get-the-code-coverage-in-angular-dart",
        "conteudo_html": "<p>I've tried using package <code>coverage</code> to get the code coverage from my Angular Dart 4.0 project.</p>\n<p>The following steps are my working flow:</p>\n<ol>\n<li>run <code>pub serve test --port=8081</code></li>\n<li>run <code>pub run test --pub-serve=8081 --pause-after-load</code></li>\n<li>waiting for test runner print the observatory URL (e.g. <a href=\"http://127.0.0.1:12345\" rel=\"nofollow noreferrer\">http://127.0.0.1:12345</a>)</li>\n<li>run <code>pub global run coverage:collect_coverage --port=12345 -o coverage.json</code></li>\n<li>press Enter to resume test runner</li>\n<li>run <code>pub global run coverage:format_coverage --packages=.packages-c -i coverage.json -o coverage.report</code></li>\n</ol>\n<p>After step 5, I will get a <code>coverage.json</code> file which contains some data, but I don't know why the coverage report always shows each code is uncovered.</p>\n<p>Am I using a wrong flow for getting code coverage? Or have any better way to do it?</p>\n<p>Thanks !</p>\n<hr />\n<p>There are my experiment code:</p>\n<p><code>experiment_component.dart</code>:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>import 'package:angular/angular.dart';\n\n@Component(\n  selector: 'experiment_component',\n  template: '&lt;h1&gt;{{greeting}}&lt;/h1&gt;'\n)\nclass ExperimentComponent {\n\n  String greeting = '';\n\n  void greet() {\n    greeting = 'Hello';\n  }\n\n}\n</code></pre>\n<p><code>experiment_component_test.dart</code>:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>@TestOn('browser')\n@Tags(const ['aot'])\nimport 'package:angular/angular.dart';\nimport 'package:angular4_test/src/experiment_component.dart';\nimport 'package:angular_test/angular_test.dart';\nimport 'package:test/test.dart';\n\nNgTestBed&lt;ExperimentComponent&gt; testBed;\nNgTestFixture&lt;ExperimentComponent&gt; testFixture;\n\n@AngularEntrypoint()\nvoid main() {\n  tearDown(disposeAnyRunningTest);\n\n  setUp(() async {\n    testBed = new NgTestBed&lt;ExperimentComponent&gt;();\n    testFixture = await testBed.create();\n  });\n\n  test('should render Hello', () async {\n    await testFixture.update((comp)=&gt; comp.greet());\n    expect(testFixture.text, contains('Hello'));\n  });\n}\n</code></pre>\n<p><code>.packages-c</code>:</p>\n<pre class=\"lang-none prettyprint-override\"><code>angular4_test:lib/\n</code></pre>\n<p><code>coverage.report</code>:</p>\n<pre class=\"lang-dart prettyprint-override\"><code>|import 'package:angular/angular.dart';\n|\n|@Component(\n|  selector: 'experiment_component',\n|  template: '&lt;h1&gt;{{greeting}}&lt;/h1&gt;'\n|)\n|class ExperimentComponent {\n|\n|  String greeting = '';\n|\n|  void greet() {\n0    greeting = 'Hello';\n|  }\n|\n|}\n</code></pre>\n",
        "codigo": [
            "coverage",
            "pub serve test --port=8081",
            "pub run test --pub-serve=8081 --pause-after-load",
            "pub global run coverage:collect_coverage --port=12345 -o coverage.json",
            "pub global run coverage:format_coverage --packages=.packages-c -i coverage.json -o coverage.report",
            "coverage.json",
            "experiment_component.dart",
            "import 'package:angular/angular.dart';\n\n@Component(\n  selector: 'experiment_component',\n  template: '<h1>{{greeting}}</h1>'\n)\nclass ExperimentComponent {\n\n  String greeting = '';\n\n  void greet() {\n    greeting = 'Hello';\n  }\n\n}\n",
            "experiment_component_test.dart",
            "@TestOn('browser')\n@Tags(const ['aot'])\nimport 'package:angular/angular.dart';\nimport 'package:angular4_test/src/experiment_component.dart';\nimport 'package:angular_test/angular_test.dart';\nimport 'package:test/test.dart';\n\nNgTestBed<ExperimentComponent> testBed;\nNgTestFixture<ExperimentComponent> testFixture;\n\n@AngularEntrypoint()\nvoid main() {\n  tearDown(disposeAnyRunningTest);\n\n  setUp(() async {\n    testBed = new NgTestBed<ExperimentComponent>();\n    testFixture = await testBed.create();\n  });\n\n  test('should render Hello', () async {\n    await testFixture.update((comp)=> comp.greet());\n    expect(testFixture.text, contains('Hello'));\n  });\n}\n",
            ".packages-c",
            "angular4_test:lib/\n",
            "coverage.report",
            "|import 'package:angular/angular.dart';\n|\n|@Component(\n|  selector: 'experiment_component',\n|  template: '<h1>{{greeting}}</h1>'\n|)\n|class ExperimentComponent {\n|\n|  String greeting = '';\n|\n|  void greet() {\n0    greeting = 'Hello';\n|  }\n|\n|}\n"
        ]
    },
    {
        "titulo": "How to test AngularDart components?",
        "score": 1,
        "views": 487,
        "respostas": 1,
        "tags": [
            "angular",
            "testing",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/42813235/how-to-test-angulardart-components",
        "conteudo_html": "<p>I try testing some component:\n<a href=\"https://gist.github.com/Rasarts/000e233092b6781128a8488cbbb7a051\" rel=\"nofollow noreferrer\">https://gist.github.com/Rasarts/000e233092b6781128a8488cbbb7a051</a></p>\n\n<pre><code>dependencies:\n  angular2: '^3.0.0-alpha+1'\n  angular2_components: '^0.4.0-alpha'\n\ndev_dependencies:\n  angular_test:\n   git: \"https://github.com/dart-lang/angular_test.git\"\n   version: '^1.0.0-alpha+5'\n  test: '^0.12.20+2'\n\n\n@Component(selector: 'page-view', templateUrl: 'page_view_component.html')\nclass PageViewComponent {}\n\n@AngularEntrypoint()\nvoid main() {\n  test('Should create a new component in the DOM', () async {\n    NgTestBed testBed = new NgTestBed&lt;PageViewComponent&gt;();\n    NgTestFixture fixture = await testBed.create();\n    expect(fixture.rootElement.innerHtml, contains(\"PageViewComponent\"));\n  });\n}\n</code></pre>\n\n<p>When I run <strong>pub run test -p dartium</strong> command I get failed test:</p>\n\n<pre><code>00:02 +0 -1: test/client/components/page_view_test.dart: Should create a new component in the DO\nM [E]\n  Cannot find reflection information on ApplicationRefImpl\n  package:angular2/src/core/reflection/reflection.dart 24:7     NoReflectionCapabilities.factory\n  package:angular2/src/core/reflection/reflector.dart 85:37     Reflector.factory\n  package:angular2/src/core/di/reflective_provider.dart 130:27  resolveReflectiveFactory\n  package:angular2/src/core/di/reflective_provider.dart 156:8   resolveReflectiveProvider\n  dart:_internal                                                ListIterable.toList\n  package:angular2/src/core/di/reflective_provider.dart 163:60  resolveReflectiveProviders\n  package:angular2/src/core/di/reflective_injector.dart 363:12  ReflectiveInjector.resolve\n  package:angular2/src/core/di/reflective_injector.dart 392:58  ReflectiveInjector.resolveAndCre\nate\n  package:angular_test/src/bootstrap.dart 35:42                 bootstrapForTest\n  package:angular_test/src/frontend/bed.dart 192:14             NgTestBed._createDynamic.&lt;fn&gt;\n  dart:async                                                    Future.Future.sync\n  package:angular_test/src/frontend/bed.dart 190:16             NgTestBed._createDynamic\n  package:angular_test/src/frontend/bed.dart 171:12             NgTestBed.create\n  page_view_test.dart 17:43                                     main.&lt;fn&gt;.&lt;async&gt;\n  ===== asynchronous gap ===========================\n  dart:async                                                    Future.Future.sync\n  package:angular_test/src/frontend/bed.dart 190:16             NgTestBed._createDynamic\n  package:angular_test/src/frontend/bed.dart 171:12             NgTestBed.create\n  page_view_test.dart 17:43                                     main.&lt;fn&gt;.&lt;async&gt;\n  ===== asynchronous gap ===========================\n  dart:async                                                    Future.Future.microtask\n  page_view_test.dart                                           main.&lt;fn&gt;\n\n00:02 +0 -1: Some tests failed.\n</code></pre>\n\n<p>When I run <strong>pub run angular_test:test</strong>, I get:</p>\n\n<pre><code>Could not find bin/test.dart in package angular_test.\n</code></pre>\n\n<p>When I run <strong>pub run angular_test</strong> and open Dartium, in console I get:</p>\n\n<pre><code>00:00 [32m+0[0m: Should create a new component in the DOM[0m\n(program):1 00:00 [32m+0[0m[31m -1[0m: Should create a new component in the DOM [1m[31m[E][0m[0m\n(program):1   NoSuchMethodError: Class 'DynamicComponentLoaderImpl' has no instance method 'loadAsRootIntoNode'.\n  Receiver: Instance of 'DynamicComponentLoaderImpl'\n  Tried calling: loadAsRootIntoNode(Type: class 'PageViewComponent', Instance of 'ReflectiveInjectorImpl', overrideNode: Instance of 'HtmlElementImpl')\n(program):1   dart:core                                              Object.noSuchMethod\n  package:angular_test/src/bootstrap.dart 75:37          _runAndLoadComponent.&lt;async&gt;\n  dart:async                                             _ZoneDelegate.run\n  package:angular2/src/core/zone/ng_zone.dart 176:21     NgZone._run\n  dart:async                                             _CustomZone.bindCallback.&lt;fn&gt;\n  package:angular2/src/core/zone/ng_zone.dart 162:11     NgZone._scheduleMicrotask.&lt;fn&gt;\n  dart:async                                             _ZoneDelegate.run\n  package:angular2/src/core/zone/ng_zone.dart 176:21     NgZone._run\n  ===== asynchronous gap ===========================\n  dart:async                                             _Completer.completeError\n  package:angular_test/src/bootstrap.dart 90:1           _runAndLoadComponent.&lt;async&gt;\n  dart:async                                             _ZoneDelegate.run\n  package:angular2/src/core/zone/ng_zone.dart 176:21     NgZone._run\n  dart:async                                             _CustomZone.bindCallback.&lt;fn&gt;\n  package:angular2/src/core/zone/ng_zone.dart 162:11     NgZone._scheduleMicrotask.&lt;fn&gt;\n  dart:async                                             _ZoneDelegate.run\n  package:angular2/src/core/zone/ng_zone.dart 176:21     NgZone._run\n  ===== asynchronous gap ===========================\n  dart:async                                             Future.Future.microtask\n  package:angular_test/src/bootstrap.dart                _runAndLoadComponent\n  package:angular_test/src/bootstrap.dart 47:12          bootstrapForTest.&lt;fn&gt;\n  package:angular2/src/core/application_ref.dart 314:26  ApplicationRefImpl.run.&lt;fn&gt;\n  dart:async                                             _ZoneDelegate.run\n  package:angular2/src/core/zone/ng_zone.dart 176:21     NgZone._run\n  dart:async                                             _CustomZone.run\n  package:angular2/src/core/zone/ng_zone.dart 305:23     NgZone.run\n  package:angular2/src/core/application_ref.dart 312:10  ApplicationRefImpl.run\n  package:angular_test/src/bootstrap.dart 46:17          bootstrapForTest\n  package:angular_test/src/frontend/bed.dart 192:14      NgTestBed._createDynamic.&lt;fn&gt;\n  dart:async                                             Future.Future.sync\n  package:angular_test/src/frontend/bed.dart 190:16      NgTestBed._createDynamic\n  package:angular_test/src/frontend/bed.dart 171:12      NgTestBed.create\n  page_view_test.dart 17:43                              main.&lt;fn&gt;.&lt;async&gt;\n  ===== asynchronous gap ===========================\n  dart:async                                             Future.Future.microtask\n  page_view_test.dart                                    main.&lt;fn&gt;\n\n(program):1 00:00 [32m+0[0m[31m -1[0m: [31mSome tests failed.[0m\n(program):1 \npage_view_test.html:1 Uncaught Unhandled exception:\nDummy exception to set exit code.\n#0      _rootHandleUncaughtError.&lt;anonymous closure&gt; (dart:async/zone.dart:1138)\n#1      _microtaskLoop (dart:async/schedule_microtask.dart:41)\n#2      _startMicrotaskLoop (dart:async/schedule_microtask.dart:50)\n#3      _ScheduleImmediateHelper._handleMutation (dart:html:49306)\npage_view_test.html:1 Observatory listening at http://127.0.0.1:33685/\n</code></pre>\n\n<p>How it can be testing?</p>\n\n<p><a href=\"https://github.com/dart-lang/angular2_components/issues/62\" rel=\"nofollow noreferrer\">https://github.com/dart-lang/angular2_components/issues/62</a></p>\n",
        "codigo": [
            "dependencies:\n  angular2: '^3.0.0-alpha+1'\n  angular2_components: '^0.4.0-alpha'\n\ndev_dependencies:\n  angular_test:\n   git: \"https://github.com/dart-lang/angular_test.git\"\n   version: '^1.0.0-alpha+5'\n  test: '^0.12.20+2'\n\n\n@Component(selector: 'page-view', templateUrl: 'page_view_component.html')\nclass PageViewComponent {}\n\n@AngularEntrypoint()\nvoid main() {\n  test('Should create a new component in the DOM', () async {\n    NgTestBed testBed = new NgTestBed<PageViewComponent>();\n    NgTestFixture fixture = await testBed.create();\n    expect(fixture.rootElement.innerHtml, contains(\"PageViewComponent\"));\n  });\n}\n",
            "00:02 +0 -1: test/client/components/page_view_test.dart: Should create a new component in the DO\nM [E]\n  Cannot find reflection information on ApplicationRefImpl\n  package:angular2/src/core/reflection/reflection.dart 24:7     NoReflectionCapabilities.factory\n  package:angular2/src/core/reflection/reflector.dart 85:37     Reflector.factory\n  package:angular2/src/core/di/reflective_provider.dart 130:27  resolveReflectiveFactory\n  package:angular2/src/core/di/reflective_provider.dart 156:8   resolveReflectiveProvider\n  dart:_internal                                                ListIterable.toList\n  package:angular2/src/core/di/reflective_provider.dart 163:60  resolveReflectiveProviders\n  package:angular2/src/core/di/reflective_injector.dart 363:12  ReflectiveInjector.resolve\n  package:angular2/src/core/di/reflective_injector.dart 392:58  ReflectiveInjector.resolveAndCre\nate\n  package:angular_test/src/bootstrap.dart 35:42                 bootstrapForTest\n  package:angular_test/src/frontend/bed.dart 192:14             NgTestBed._createDynamic.<fn>\n  dart:async                                                    Future.Future.sync\n  package:angular_test/src/frontend/bed.dart 190:16             NgTestBed._createDynamic\n  package:angular_test/src/frontend/bed.dart 171:12             NgTestBed.create\n  page_view_test.dart 17:43                                     main.<fn>.<async>\n  ===== asynchronous gap ===========================\n  dart:async                                                    Future.Future.sync\n  package:angular_test/src/frontend/bed.dart 190:16             NgTestBed._createDynamic\n  package:angular_test/src/frontend/bed.dart 171:12             NgTestBed.create\n  page_view_test.dart 17:43                                     main.<fn>.<async>\n  ===== asynchronous gap ===========================\n  dart:async                                                    Future.Future.microtask\n  page_view_test.dart                                           main.<fn>\n\n00:02 +0 -1: Some tests failed.\n",
            "Could not find bin/test.dart in package angular_test.\n",
            "00:00 [32m+0[0m: Should create a new component in the DOM[0m\n(program):1 00:00 [32m+0[0m[31m -1[0m: Should create a new component in the DOM [1m[31m[E][0m[0m\n(program):1   NoSuchMethodError: Class 'DynamicComponentLoaderImpl' has no instance method 'loadAsRootIntoNode'.\n  Receiver: Instance of 'DynamicComponentLoaderImpl'\n  Tried calling: loadAsRootIntoNode(Type: class 'PageViewComponent', Instance of 'ReflectiveInjectorImpl', overrideNode: Instance of 'HtmlElementImpl')\n(program):1   dart:core                                              Object.noSuchMethod\n  package:angular_test/src/bootstrap.dart 75:37          _runAndLoadComponent.<async>\n  dart:async                                             _ZoneDelegate.run\n  package:angular2/src/core/zone/ng_zone.dart 176:21     NgZone._run\n  dart:async                                             _CustomZone.bindCallback.<fn>\n  package:angular2/src/core/zone/ng_zone.dart 162:11     NgZone._scheduleMicrotask.<fn>\n  dart:async                                             _ZoneDelegate.run\n  package:angular2/src/core/zone/ng_zone.dart 176:21     NgZone._run\n  ===== asynchronous gap ===========================\n  dart:async                                             _Completer.completeError\n  package:angular_test/src/bootstrap.dart 90:1           _runAndLoadComponent.<async>\n  dart:async                                             _ZoneDelegate.run\n  package:angular2/src/core/zone/ng_zone.dart 176:21     NgZone._run\n  dart:async                                             _CustomZone.bindCallback.<fn>\n  package:angular2/src/core/zone/ng_zone.dart 162:11     NgZone._scheduleMicrotask.<fn>\n  dart:async                                             _ZoneDelegate.run\n  package:angular2/src/core/zone/ng_zone.dart 176:21     NgZone._run\n  ===== asynchronous gap ===========================\n  dart:async                                             Future.Future.microtask\n  package:angular_test/src/bootstrap.dart                _runAndLoadComponent\n  package:angular_test/src/bootstrap.dart 47:12          bootstrapForTest.<fn>\n  package:angular2/src/core/application_ref.dart 314:26  ApplicationRefImpl.run.<fn>\n  dart:async                                             _ZoneDelegate.run\n  package:angular2/src/core/zone/ng_zone.dart 176:21     NgZone._run\n  dart:async                                             _CustomZone.run\n  package:angular2/src/core/zone/ng_zone.dart 305:23     NgZone.run\n  package:angular2/src/core/application_ref.dart 312:10  ApplicationRefImpl.run\n  package:angular_test/src/bootstrap.dart 46:17          bootstrapForTest\n  package:angular_test/src/frontend/bed.dart 192:14      NgTestBed._createDynamic.<fn>\n  dart:async                                             Future.Future.sync\n  package:angular_test/src/frontend/bed.dart 190:16      NgTestBed._createDynamic\n  package:angular_test/src/frontend/bed.dart 171:12      NgTestBed.create\n  page_view_test.dart 17:43                              main.<fn>.<async>\n  ===== asynchronous gap ===========================\n  dart:async                                             Future.Future.microtask\n  page_view_test.dart                                    main.<fn>\n\n(program):1 00:00 [32m+0[0m[31m -1[0m: [31mSome tests failed.[0m\n(program):1 \npage_view_test.html:1 Uncaught Unhandled exception:\nDummy exception to set exit code.\n#0      _rootHandleUncaughtError.<anonymous closure> (dart:async/zone.dart:1138)\n#1      _microtaskLoop (dart:async/schedule_microtask.dart:41)\n#2      _startMicrotaskLoop (dart:async/schedule_microtask.dart:50)\n#3      _ScheduleImmediateHelper._handleMutation (dart:html:49306)\npage_view_test.html:1 Observatory listening at http://127.0.0.1:33685/\n"
        ]
    },
    {
        "titulo": "Dart integration test with VM server and dartium browser",
        "score": 0,
        "views": 131,
        "respostas": 1,
        "tags": [
            "testing",
            "dart",
            "integration-testing"
        ],
        "link": "https://stackoverflow.com/questions/39862806/dart-integration-test-with-vm-server-and-dartium-browser",
        "conteudo_html": "<p>I'm making a library that implements both server and client parts that interacts between them via websockets:</p>\n\n<p>Server use example (ran in CLI):</p>\n\n<pre><code>Server srv = await new Server(\"localhost:1234\");\nsrv.onNewClientConnected.listen(print(\"client connected\"));\n</code></pre>\n\n<p>Client use example (ran in browser):</p>\n\n<pre><code>Client cli = await new Cliente(\"localhost:1234\");\ncli.sendCommand(...);\n</code></pre>\n\n<p>(Just by creating the instances, the client should be connected and the server noticed about that connection.)</p>\n\n<p>I'd like to know what would be the best way to test their interactions? Could I check both objects internals with that method?</p>\n\n<p>I would like something like this:</p>\n\n<pre><code>test(\".echo should receive same input from server\", (){\n   cli.echo(\"message\");\n   expect(srv.lastMessageReceived, equals(\"echo: message\"));\n   expect(cli.lastResponseReceived, equals(\"echo: message\"));\n   expect(srv.amountMessagesReceived, equals(1));\n});\n</code></pre>\n",
        "codigo": [
            "Server srv = await new Server(\"localhost:1234\");\nsrv.onNewClientConnected.listen(print(\"client connected\"));\n",
            "Client cli = await new Cliente(\"localhost:1234\");\ncli.sendCommand(...);\n",
            "test(\".echo should receive same input from server\", (){\n   cli.echo(\"message\");\n   expect(srv.lastMessageReceived, equals(\"echo: message\"));\n   expect(cli.lastResponseReceived, equals(\"echo: message\"));\n   expect(srv.amountMessagesReceived, equals(1));\n});\n"
        ]
    },
    {
        "titulo": "Dartium/content shell unable to run tests",
        "score": 1,
        "views": 224,
        "respostas": 1,
        "tags": [
            "testing",
            "dart",
            "dartium"
        ],
        "link": "https://stackoverflow.com/questions/39681783/dartium-content-shell-unable-to-run-tests",
        "conteudo_html": "<p>When running tests with </p>\n\n<blockquote>\n  <p>pub run test -p dartium (or content-shell)</p>\n</blockquote>\n\n<p>Although the broser is open with a blank page, every test fails with the same output:<a href=\"https://i.sstatic.net/W41xi.png\" rel=\"nofollow noreferrer\"><img src=\"https://i.sstatic.net/W41xi.png\" alt=\"enter image description here\"></a></p>\n\n<p>The browser.dart file is an <em>ad hoc</em> made one:</p>\n\n<pre><code>@TestOn(\"browser\")\nimport \"package:test/test.dart\";\nimport \"dart:html\";\nvoid main(){\n  test(\"it works!\", (){\n     expect(true, isTrue);\n  });\n}\n</code></pre>\n\n<p>I even tried by adding a browser.html file:</p>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n     &lt;title&gt;Browser test&lt;/title&gt;\n     &lt;link rel=\"x-dart-test\" href=\"browser.dart\"&gt;\n     &lt;script src=\"packages/test/dart.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n     &lt;h1&gt;It works&lt;/h1&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>Still failing with the same error >.&lt;</p>\n",
        "codigo": [
            "@TestOn(\"browser\")\nimport \"package:test/test.dart\";\nimport \"dart:html\";\nvoid main(){\n  test(\"it works!\", (){\n     expect(true, isTrue);\n  });\n}\n",
            "<!doctype html>\n<html>\n  <head>\n     <title>Browser test</title>\n     <link rel=\"x-dart-test\" href=\"browser.dart\">\n     <script src=\"packages/test/dart.js\"></script>\n  </head>\n  <body>\n     <h1>It works</h1>\n  </body>\n</html>\n"
        ]
    },
    {
        "titulo": "Force stream events delivery",
        "score": 1,
        "views": 42,
        "respostas": 1,
        "tags": [
            "testing",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/38916001/force-stream-events-delivery",
        "conteudo_html": "<p>I am trying to test stream events in my service, and faced a problem: is any way to synchronously deliver events in async stream? Here is simplified code example: </p>\n\n<pre><code>test(\"deliver event\", () {\n  StreamController sc = new StreamController();\n  String v = \"old\";\n  sc.stream.listen((val) {v = val;});\n  sc.add(\"new\");\n  expect(v, \"new\"); // test fails: actual value is \"old\"\n});\n</code></pre>\n",
        "codigo": [
            "test(\"deliver event\", () {\n  StreamController sc = new StreamController();\n  String v = \"old\";\n  sc.stream.listen((val) {v = val;});\n  sc.add(\"new\");\n  expect(v, \"new\"); // test fails: actual value is \"old\"\n});\n"
        ]
    },
    {
        "titulo": "dart content_shell does not run browser http-client request",
        "score": 0,
        "views": 74,
        "respostas": 0,
        "tags": [
            "testing",
            "browser",
            "dart",
            "client"
        ],
        "link": "https://stackoverflow.com/questions/37944212/dart-content-shell-does-not-run-browser-http-client-request",
        "conteudo_html": "<p>I have Linux Ubuntu 12.04LTS and I'm trying to make dart (sdk 1.17.1) test (0.12.13.+5) of such client-side code:</p>\n\n<p><strong>test.html:</strong></p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\"&gt;\n    &lt;title&gt;test&lt;/title&gt;\n    &lt;script type=\"application/dart\" src=\"test.dart\"&gt;&lt;/script&gt;\n    &lt;script src=\"packages/browser/dart.js\"&gt;&lt;/script&gt;\n    &lt;script src=\"packages/test/dart.js\"&gt;&lt;/script&gt;\n    &lt;link rel=\"x-dart-test\" href=\"test.dart\"&gt;\n&lt;/head&gt;\n&lt;body&gt;&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p><strong>test.dart:</strong></p>\n\n<pre><code>@TestOn('browser')\n\nimport 'package:http/browser_client.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  test('client.get', () {\n    var client = new BrowserClient();\n    return client.get('https://hacker-news.firebaseio.com')\n    .then((result) {\n      expect(result.statusCode, 200);\n    });\n  });\n}\n</code></pre>\n\n<p>With</p>\n\n<pre><code>pub run test -p dartium test/test.dart \n</code></pre>\n\n<p>test passed OK and there is data exchange between test runner and remote server (firebaseio.com).\nBut with</p>\n\n<pre><code>pub run test -p content-shell test/test.dart \n</code></pre>\n\n<p>test failed by timeout and there is no any data exchange with remote server. Why? How to solve this problem? </p>\n",
        "codigo": [
            "<!DOCTYPE html>\n<html>\n<head>\n    <meta charset=\"utf-8\">\n    <title>test</title>\n    <script type=\"application/dart\" src=\"test.dart\"></script>\n    <script src=\"packages/browser/dart.js\"></script>\n    <script src=\"packages/test/dart.js\"></script>\n    <link rel=\"x-dart-test\" href=\"test.dart\">\n</head>\n<body></body>\n</html>\n",
            "@TestOn('browser')\n\nimport 'package:http/browser_client.dart';\nimport 'package:test/test.dart';\n\nvoid main() {\n  test('client.get', () {\n    var client = new BrowserClient();\n    return client.get('https://hacker-news.firebaseio.com')\n    .then((result) {\n      expect(result.statusCode, 200);\n    });\n  });\n}\n",
            "pub run test -p dartium test/test.dart \n",
            "pub run test -p content-shell test/test.dart \n"
        ]
    },
    {
        "titulo": "How to test Dart Polymer elements using the new Test library?",
        "score": 4,
        "views": 251,
        "respostas": 1,
        "tags": [
            "unit-testing",
            "testing",
            "dart",
            "dart-polymer"
        ],
        "link": "https://stackoverflow.com/questions/30823692/how-to-test-dart-polymer-elements-using-the-new-test-library",
        "conteudo_html": "<h1>How do you test <a href=\"https://pub.dartlang.org/packages/polymer\" rel=\"nofollow\">Polymer</a> elements using the new <a href=\"https://pub.dartlang.org/packages/test\" rel=\"nofollow\">test</a> library?</h1>\n\n<p>Using the new <a href=\"https://pub.dartlang.org/packages/test\" rel=\"nofollow\">test</a> library to test a <a href=\"https://pub.dartlang.org/packages/polymer\" rel=\"nofollow\">Dart Polymer</a> element, I build <code>my_element_test.html</code> <a href=\"https://github.com/dart-lang/test#running-tests-with-custom-html\" rel=\"nofollow\">as prescribed</a>. Please see my repo: <a href=\"https://github.com/damondouglas/polymer-dart-testing\" rel=\"nofollow\">polymer-dart-testing</a>.</p>\n\n<h2>No Polymer Initiation Passes</h2>\n\n<p><code>my_element_test.html</code> and <code>my_element_test.dart</code> (commenting out Polymer initiation) passes tests as expected:</p>\n\n<h3>my_element_test.html</h3>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Element Test&lt;/title&gt;\n    &lt;link rel=\"import\" href=\"packages/polymer_dart_testing/my_element.html\"&gt;\n    &lt;link rel=\"x-dart-test\" href=\"my_element_test.dart\"&gt;\n    &lt;script src=\"packages/test/dart.js\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;Custom HTML Test is Custom.&lt;/div&gt;\n    &lt;my-element&gt;&lt;/my-element&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h3>my_element_test.dart</h3>\n\n<pre><code>import 'package:test/test.dart';\nimport 'package:polymer_dart_testing/my_element.dart';\nimport 'package:polymer/polymer.dart';\n\nimport 'dart:html';\n\nmain() {\n\n  setUp(() async {\n    // await initPolymer();\n    // return await Polymer.onReady;\n  });\n\n  test('custom_html_test', (){\n    expect(true, isTrue);\n  });\n}\n</code></pre>\n\n<h2>Loading in Dartium without <code>pub run test...</code> passes in the console and shows custom element, after adding <code>test/my_element_test.html</code> to the polymer entry point in <code>pubspec.yaml</code>.</h2>\n\n<h3>pubspec.yaml</h3>\n\n<pre><code>transformers:\n- polymer:\n    entry_points:\n     - web/index.html\n     - test/my_element_test.html\n</code></pre>\n\n<h3>my_element_test.html</h3>\n\n<pre><code>&lt;!doctype html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;My Element Test&lt;/title&gt;\n    &lt;link rel=\"import\" href=\"packages/polymer_dart_testing/my_element.html\"&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div&gt;Custom HTML Test is Custom.&lt;/div&gt;\n    &lt;my-element&gt;&lt;/my-element&gt;\n    &lt;script type=\"application/dart\" src=\"my_element_test.dart\"&gt;&lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<h3>my_element_test.dart</h3>\n\n<pre><code>import 'package:test/test.dart';\nimport 'package:polymer_dart_testing/my_element.dart';\nimport 'package:polymer/polymer.dart';\n\nimport 'dart:html';\n\nmain() {\n\n  setUp(() async {\n    await initPolymer();\n    return await Polymer.onReady;\n  });\n\n  test('custom_html_test', (){\n    expect(true, isTrue);\n  });\n}\n</code></pre>\n\n\n\n<h1>However, <code>pub run test...</code> fails when initiating Polymer and adding to the <code>pubspec</code> entry point.</h1>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ pub serve\nLoading source assets... \nLoading polymer and test/pub_serve transformers... \nServing polymer_dart_testing web  on http://localhost:8080\nServing polymer_dart_testing test on http://localhost:8081\nBuild completed successfully\n\n...\n...\n/my_element_test.html.polymer.bootstrap.dart.browser_test.dart → \nCould not find asset polymer_dart_testing|test/my_element_test.html.polymer.bootstrap.dart.browser_test.dart.\n</code></pre>\n\n<pre class=\"lang-sh prettyprint-override\"><code>$ pub run test --pub-serve=8081 -p content-shell\n\"pub serve\" is compiling test/my_element_test.dart...\n00:00 +0: load error                                                            00:00 +0 -1: load error                                                                             \n  Failed to load \"test/my_element_test.dart\": Failed to load script at http://localhost:8081/my_element_test.html.polymer.bootstrap.dart.browser_test.dart.\n00:00 +0 -1: Some tests failed. \n</code></pre>\n",
        "codigo": [
            "my_element_test.html",
            "my_element_test.html",
            "my_element_test.dart",
            "<!doctype html>\n<html>\n  <head>\n    <title>My Element Test</title>\n    <link rel=\"import\" href=\"packages/polymer_dart_testing/my_element.html\">\n    <link rel=\"x-dart-test\" href=\"my_element_test.dart\">\n    <script src=\"packages/test/dart.js\"></script>\n  </head>\n  <body>\n    <div>Custom HTML Test is Custom.</div>\n    <my-element></my-element>\n  </body>\n</html>\n",
            "import 'package:test/test.dart';\nimport 'package:polymer_dart_testing/my_element.dart';\nimport 'package:polymer/polymer.dart';\n\nimport 'dart:html';\n\nmain() {\n\n  setUp(() async {\n    // await initPolymer();\n    // return await Polymer.onReady;\n  });\n\n  test('custom_html_test', (){\n    expect(true, isTrue);\n  });\n}\n",
            "pub run test...",
            "test/my_element_test.html",
            "pubspec.yaml",
            "transformers:\n- polymer:\n    entry_points:\n     - web/index.html\n     - test/my_element_test.html\n",
            "<!doctype html>\n<html>\n  <head>\n    <title>My Element Test</title>\n    <link rel=\"import\" href=\"packages/polymer_dart_testing/my_element.html\">\n  </head>\n  <body>\n    <div>Custom HTML Test is Custom.</div>\n    <my-element></my-element>\n    <script type=\"application/dart\" src=\"my_element_test.dart\"></script>\n  </body>\n</html>\n",
            "import 'package:test/test.dart';\nimport 'package:polymer_dart_testing/my_element.dart';\nimport 'package:polymer/polymer.dart';\n\nimport 'dart:html';\n\nmain() {\n\n  setUp(() async {\n    await initPolymer();\n    return await Polymer.onReady;\n  });\n\n  test('custom_html_test', (){\n    expect(true, isTrue);\n  });\n}\n",
            "pub run test...",
            "pubspec",
            "$ pub serve\nLoading source assets... \nLoading polymer and test/pub_serve transformers... \nServing polymer_dart_testing web  on http://localhost:8080\nServing polymer_dart_testing test on http://localhost:8081\nBuild completed successfully\n\n...\n...\n/my_element_test.html.polymer.bootstrap.dart.browser_test.dart → \nCould not find asset polymer_dart_testing|test/my_element_test.html.polymer.bootstrap.dart.browser_test.dart.\n",
            "$ pub run test --pub-serve=8081 -p content-shell\n\"pub serve\" is compiling test/my_element_test.dart...\n00:00 +0: load error                                                            00:00 +0 -1: load error                                                                             \n  Failed to load \"test/my_element_test.dart\": Failed to load script at http://localhost:8081/my_element_test.html.polymer.bootstrap.dart.browser_test.dart.\n00:00 +0 -1: Some tests failed. \n"
        ]
    },
    {
        "titulo": "How to test Polymer Dart",
        "score": 1,
        "views": 500,
        "respostas": 1,
        "tags": [
            "testing",
            "dart",
            "polymer",
            "dart-polymer"
        ],
        "link": "https://stackoverflow.com/questions/27404245/how-to-test-polymer-dart",
        "conteudo_html": "<p>I started testing my web components and noticed that Dart has a good library for that and it does work well with Dart. But now I also want to test my Polymer component, but I'm having a hard time doing that. It seems that my Unit Test does not recognize my Element as a Polymer Element.\nThat how my \"test\" looks like at the moment</p>\n\n<p><strong>test.dart</strong></p>\n\n<pre><code>import \"../../../components/medium/bar-chart.dart\";\nimport \"package:unittest/unittest.dart\";\nimport 'package:polymer/polymer.dart';\nimport 'dart:html';\n\nmain() {\n    // initPolymer();\n\n    print(\"--- Bar Chart Test ---\");\n\n    group('Bar Chart Test', () {\n        test((\"queryForBarChart\"),() {\n            expect(querySelector('bar-chart'), isNotNull); // PASS\n        });\n\n        test((\"testtest\"),() {\n            // This should pass\n            expect(querySelector('bar-chart').test(), equals(5));\n            // Test failed: Caught type 'HtmlElement' is not a subtype of type 'BarChartElement' in type cast.\n            // without Cast: Test failed: Caught Class 'HtmlElement' has no instance method 'test'.\n        });\n\n    });\n}\n</code></pre>\n\n<p><strong>test.html</strong></p>\n\n<pre><code>&lt;!DOCTYPE html&gt;\n\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;meta charset=\"utf-8\"/&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/&gt;\n    &lt;title&gt;Unit Test Results&lt;/title&gt;\n    &lt;script src=\"../packages/web_components/platform.js\"&gt;&lt;/script&gt;\n    &lt;link rel=\"import\" href=\"packages/polymer/polymer.html\"/&gt;\n    &lt;link rel=\"import\" href=\"../../../components/medium/bar-chart.html\"/&gt;\n    &lt;script src=\"../packages/browser/dart.js\"&gt;&lt;/script&gt;\n\n  &lt;script type=\"application/dart\" src=\"test.dart\"&gt;&lt;/script&gt;\n  &lt;/head&gt;\n\n&lt;body\n  &lt;bar-chart&gt;&lt;/bar-chart&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>\n\n<p>also I get the Exception:</p>\n\n<blockquote>\n  <p>Uncaught HierarchyRequestError: Failed to execute 'appendChild' on 'Node': Nodes of type 'HTML' may not be inserted inside nodes of type '#document'. </p>\n</blockquote>\n\n<p>from: polymer.concat.js:6313</p>\n\n<p>As i dont have any experience testing dart polymer, I take any advice whats the best what to do that.</p>\n",
        "codigo": [
            "import \"../../../components/medium/bar-chart.dart\";\nimport \"package:unittest/unittest.dart\";\nimport 'package:polymer/polymer.dart';\nimport 'dart:html';\n\nmain() {\n    // initPolymer();\n\n    print(\"--- Bar Chart Test ---\");\n\n    group('Bar Chart Test', () {\n        test((\"queryForBarChart\"),() {\n            expect(querySelector('bar-chart'), isNotNull); // PASS\n        });\n\n        test((\"testtest\"),() {\n            // This should pass\n            expect(querySelector('bar-chart').test(), equals(5));\n            // Test failed: Caught type 'HtmlElement' is not a subtype of type 'BarChartElement' in type cast.\n            // without Cast: Test failed: Caught Class 'HtmlElement' has no instance method 'test'.\n        });\n\n    });\n}\n",
            "<!DOCTYPE html>\n\n<html>\n  <head>\n    <meta charset=\"utf-8\"/>\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"/>\n    <title>Unit Test Results</title>\n    <script src=\"../packages/web_components/platform.js\"></script>\n    <link rel=\"import\" href=\"packages/polymer/polymer.html\"/>\n    <link rel=\"import\" href=\"../../../components/medium/bar-chart.html\"/>\n    <script src=\"../packages/browser/dart.js\"></script>\n\n  <script type=\"application/dart\" src=\"test.dart\"></script>\n  </head>\n\n<body\n  <bar-chart></bar-chart>\n</body>\n</html>\n"
        ]
    },
    {
        "titulo": "Strange behaviour with Dart asynchronous tests",
        "score": 1,
        "views": 175,
        "respostas": 1,
        "tags": [
            "testing",
            "asynchronous",
            "dart"
        ],
        "link": "https://stackoverflow.com/questions/15657267/strange-behaviour-with-dart-asynchronous-tests",
        "conteudo_html": "<p>Why doesn't this work?</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>var validUri = 'postgresql://user:pwd@localhost:5432/testdb';\n\ntest('Query on closed connection.', () {\n  connect(validUri).then((conn) {\n    conn.close();\n    conn.query(\"select 'blah'\").toList()\n      .then((_) =&gt; throw new Exception('Should not be reached.'))\n      .catchError(expectAsync1((err) {}));\n  });\n});\n\ntest('Execute on closed connection.', () {\n  connect(validUri).then((conn) {\n    conn.close();\n    conn.execute(\"select 'blah'\")\n      .then((_) =&gt; throw new Exception('Should not be reached.'))\n      .catchError(expectAsync1((err) {});\n  });\n});\n</code></pre>\n\n<p>But, if one changes the callback assignment for the last <em>catchError</em>:</p>\n\n<pre class=\"lang-dart prettyprint-override\"><code>(...)\n\ntest('Execute on closed connection.', () {\n  var cb = expectAsync1((e) {});\n  connect(validUri).then((conn) {\n    conn.close();\n    conn.execute(\"select 'blah'\")\n      .then((_) =&gt; throw new Exception('Should not be reached.'))\n      .catchError(cb);\n  });\n});\n</code></pre>\n\n<p>It works!</p>\n\n<p>I would love to read a nice explanation on this and perhaps have a lesson or two in Dart asynchronous testing :-)</p>\n\n<p>Edit:\nThe problem is that the first example did work - it reported passing! It shouldn't have. I assume expectAsyncX() must have been called back during a later test.</p>\n\n<p>Is this a problem with the test framework? This type of problem shouldn't be silently ignored.</p>\n",
        "codigo": [
            "var validUri = 'postgresql://user:pwd@localhost:5432/testdb';\n\ntest('Query on closed connection.', () {\n  connect(validUri).then((conn) {\n    conn.close();\n    conn.query(\"select 'blah'\").toList()\n      .then((_) => throw new Exception('Should not be reached.'))\n      .catchError(expectAsync1((err) {}));\n  });\n});\n\ntest('Execute on closed connection.', () {\n  connect(validUri).then((conn) {\n    conn.close();\n    conn.execute(\"select 'blah'\")\n      .then((_) => throw new Exception('Should not be reached.'))\n      .catchError(expectAsync1((err) {});\n  });\n});\n",
            "(...)\n\ntest('Execute on closed connection.', () {\n  var cb = expectAsync1((e) {});\n  connect(validUri).then((conn) {\n    conn.close();\n    conn.execute(\"select 'blah'\")\n      .then((_) => throw new Exception('Should not be reached.'))\n      .catchError(cb);\n  });\n});\n"
        ]
    }
]